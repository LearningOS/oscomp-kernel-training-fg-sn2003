{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1","program":"/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","embedded_hal","--edition=2018","/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=268242c5d94575fa","-C","extra-filename=-268242c5d94575fa","--out-dir","/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","--target","riscv64gc-unknown-none-elf","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/debug/deps","--extern","nb=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libnb-cc10053d6d92c049.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libembedded_hal-268242c5d94575fa.rmeta"},"prelude":{"crate_id":{"name":"embedded_hal","disambiguator":[10103173263469344445,0]},"crate_root":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src","external_crates":[{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16824974774548153985,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[18062996579175346233,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1534907499907218240,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","num":4,"id":{"name":"nb","disambiguator":[7659022394780168621,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","num":5,"id":{"name":"nb","disambiguator":[9952267402709107539,0]}}],"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":0,"byte_end":21076,"line_start":1,"line_end":701,"column_start":1,"column_end":18}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42193,"byte_end":42200,"line_start":6,"line_end":6,"column_start":21,"column_end":28},"alias_span":null,"name":"_embedded_hal_adc_OneShot","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":21},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42263,"byte_end":42270,"line_start":7,"line_end":7,"column_start":33,"column_end":40},"alias_span":null,"name":"_embedded_hal_blocking_delay_DelayMs","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42344,"byte_end":42351,"line_start":8,"line_end":8,"column_start":33,"column_end":40},"alias_span":null,"name":"_embedded_hal_blocking_delay_DelayUs","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42429,"byte_end":42433,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"alias_span":null,"name":"_embedded_hal_blocking_i2c_Read","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42470,"byte_end":42475,"line_start":10,"line_end":10,"column_start":46,"column_end":51},"alias_span":null,"name":"_embedded_hal_blocking_i2c_Write","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42517,"byte_end":42526,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"alias_span":null,"name":"_embedded_hal_blocking_i2c_WriteRead","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":48},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42601,"byte_end":42605,"line_start":13,"line_end":13,"column_start":31,"column_end":35},"alias_span":null,"name":"_embedded_hal_blocking_rng_Read","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42675,"byte_end":42680,"line_start":14,"line_end":14,"column_start":34,"column_end":39},"alias_span":null,"name":"_embedded_hal_blocking_serial_Write","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42757,"byte_end":42765,"line_start":16,"line_end":16,"column_start":5,"column_end":13},"alias_span":null,"name":"_embedded_hal_blocking_spi_Transfer","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42806,"byte_end":42811,"line_start":16,"line_end":16,"column_start":54,"column_end":59},"alias_span":null,"name":"_embedded_hal_blocking_spi_Write","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42876,"byte_end":42883,"line_start":18,"line_end":18,"column_start":25,"column_end":32},"alias_span":null,"name":"_embedded_hal_Capture","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42934,"byte_end":42942,"line_start":19,"line_end":19,"column_start":25,"column_end":33},"alias_span":null,"name":"_embedded_hal_digital_InputPin","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43002,"byte_end":43011,"line_start":20,"line_end":20,"column_start":25,"column_end":34},"alias_span":null,"name":"_embedded_hal_digital_OutputPin","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43072,"byte_end":43091,"line_start":21,"line_end":21,"column_start":25,"column_end":44},"alias_span":null,"name":"_embedded_hal_digital_ToggleableOutputPin","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43158,"byte_end":43161,"line_start":22,"line_end":22,"column_start":21,"column_end":24},"alias_span":null,"name":"_embedded_hal_Pwm","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":258},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43204,"byte_end":43210,"line_start":23,"line_end":23,"column_start":21,"column_end":27},"alias_span":null,"name":"_embedded_hal_PwmPin","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43256,"byte_end":43259,"line_start":24,"line_end":24,"column_start":21,"column_end":24},"alias_span":null,"name":"_embedded_hal_Qei","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":276},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43302,"byte_end":43306,"line_start":25,"line_end":25,"column_start":21,"column_end":25},"alias_span":null,"name":"_embedded_hal_rng_Read","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43357,"byte_end":43361,"line_start":26,"line_end":26,"column_start":24,"column_end":28},"alias_span":null,"name":"_embedded_hal_serial_Read","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43415,"byte_end":43420,"line_start":27,"line_end":27,"column_start":24,"column_end":29},"alias_span":null,"name":"_embedded_hal_serial_Write","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43472,"byte_end":43482,"line_start":28,"line_end":28,"column_start":21,"column_end":31},"alias_span":null,"name":"_embedded_hal_spi_FullDuplex","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":309},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43538,"byte_end":43547,"line_start":29,"line_end":29,"column_start":23,"column_end":32},"alias_span":null,"name":"_embedded_hal_timer_CountDown","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43607,"byte_end":43615,"line_start":30,"line_end":30,"column_start":26,"column_end":34},"alias_span":null,"name":"_embedded_hal_watchdog_Watchdog","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43677,"byte_end":43692,"line_start":31,"line_end":31,"column_start":26,"column_end":41},"alias_span":null,"name":"_embedded_hal_watchdog_WatchdogDisable","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":43761,"byte_end":43775,"line_start":32,"line_end":32,"column_start":26,"column_end":40},"alias_span":null,"name":"_embedded_hal_watchdog_WatchdogEnable","value":"","parent":{"krate":0,"index":166}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":0,"byte_end":21076,"line_start":1,"line_end":701,"column_start":1,"column_end":18},"name":"","qualname":"::","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":19},{"krate":0,"index":107},{"krate":0,"index":122},{"krate":0,"index":153},{"krate":0,"index":166},{"krate":0,"index":244},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":279},{"krate":0,"index":292},{"krate":0,"index":305},{"krate":0,"index":318}],"decl_id":null,"docs":" A Hardware Abstraction Layer (HAL) for embedded systems","sig":null,"attributes":[{"value":"/ A Hardware Abstraction Layer (HAL) for embedded systems","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":0,"byte_end":59,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":60,"byte_end":63,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ **NOTE** This HAL is still is active development. Expect the traits presented here to be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":64,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ tweaked, split or be replaced wholesale before being stabilized, i.e. before hitting the 1.0.0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":157,"byte_end":255,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ release.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":256,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":269,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Design goals","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":273,"byte_end":291,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":292,"byte_end":295,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The HAL","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":296,"byte_end":307,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":308,"byte_end":311,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - Must *erase* device specific details. Neither register, register blocks or magic values should","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":312,"byte_end":412,"line_start":11,"line_end":11,"column_start":1,"column_end":101}},{"value":"/ appear in the API.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":413,"byte_end":435,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":436,"byte_end":439,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ - Must be generic *within* a device and *across* devices. The API to use a serial interface must","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":440,"byte_end":540,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ be the same regardless of whether the implementation uses the USART1 or UART4 peripheral of a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":541,"byte_end":638,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ device or the UART0 peripheral of another device.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":639,"byte_end":692,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":693,"byte_end":696,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ - Where possible must *not* be tied to a specific asynchronous model. The API should be usable","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":697,"byte_end":795,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ in blocking mode, with the `futures` model, with an async/await model or with a callback model.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":796,"byte_end":895,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"/ (cf. the [`nb`] crate)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":896,"byte_end":922,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":923,"byte_end":926,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - Must be minimal, and thus easy to implement and zero cost, yet highly composable. People that","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":927,"byte_end":1026,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ want higher level abstraction should *prefer to use this HAL* rather than *re-implement*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1027,"byte_end":1119,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ register manipulation code.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1120,"byte_end":1151,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1152,"byte_end":1155,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ - Serve as a foundation for building an ecosystem of platform agnostic drivers. Here driver","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1156,"byte_end":1251,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ means a library crate that lets a target platform interface an external device like a digital","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1252,"byte_end":1349,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"/ sensor or a wireless transceiver. The advantage of this system is that by writing the driver as","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1350,"byte_end":1449,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/ a generic library on top of `embedded-hal` driver authors can support any number of target","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1450,"byte_end":1544,"line_start":29,"line_end":29,"column_start":1,"column_end":95}},{"value":"/ platforms (e.g. Cortex-M microcontrollers, AVR microcontrollers, embedded Linux, etc.). The","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1545,"byte_end":1640,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ advantage for application developers is that by adopting `embedded-hal` they can unlock all","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1641,"byte_end":1736,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ these drivers for their platform.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1737,"byte_end":1774,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1775,"byte_end":1778,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Out of scope","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1779,"byte_end":1797,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ - Initialization and configuration stuff like \"ensure this serial interface and that SPI","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1802,"byte_end":1894,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/ interface are not using the same pins\". The HAL will focus on *doing I/O*.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1895,"byte_end":1973,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1974,"byte_end":1977,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Reference implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":1978,"byte_end":2008,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2009,"byte_end":2012,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The [`stm32f30x-hal`] crate contains a reference implementation of this HAL.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2013,"byte_end":2093,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2094,"byte_end":2097,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`stm32f30x-hal`]: https://crates.io/crates/stm32f30x-hal/0.1.0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2098,"byte_end":2165,"line_start":43,"line_end":43,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2166,"byte_end":2169,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Platform agnostic drivers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2170,"byte_end":2201,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2202,"byte_end":2205,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can find platform agnostic drivers built on top of `embedded-hal` on crates.io by [searching","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2206,"byte_end":2306,"line_start":47,"line_end":47,"column_start":1,"column_end":101}},{"value":"/ for the *embedded-hal* keyword](https://crates.io/keywords/embedded-hal).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2307,"byte_end":2384,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2385,"byte_end":2388,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If you are writing a platform agnostic driver yourself you are highly encouraged to [add the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2389,"byte_end":2485,"line_start":50,"line_end":50,"column_start":1,"column_end":97}},{"value":"/ embedded-hal keyword](https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2486,"byte_end":2585,"line_start":51,"line_end":51,"column_start":1,"column_end":100}},{"value":"/ to your crate before publishing it!","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2586,"byte_end":2625,"line_start":52,"line_end":52,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2626,"byte_end":2629,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Detailed design","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2630,"byte_end":2651,"line_start":54,"line_end":54,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2652,"byte_end":2655,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Traits","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2656,"byte_end":2669,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2670,"byte_end":2673,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The HAL is specified as traits to allow generic programming. These traits make use of the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2674,"byte_end":2767,"line_start":58,"line_end":58,"column_start":1,"column_end":94}},{"value":"/ [`nb`][] crate (*please go read that crate documentation before continuing*) to abstract over","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2768,"byte_end":2865,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the asynchronous model and to also provide a blocking operation mode.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2866,"byte_end":2939,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2940,"byte_end":2943,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`nb`]: https://crates.io/crates/nb","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2944,"byte_end":2983,"line_start":62,"line_end":62,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2984,"byte_end":2987,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Here's how a HAL trait may look like:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":2988,"byte_end":3029,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3030,"byte_end":3033,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3034,"byte_end":3041,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3042,"byte_end":3062,"line_start":67,"line_end":67,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3063,"byte_end":3066,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ /// A serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3067,"byte_end":3093,"line_start":69,"line_end":69,"column_start":1,"column_end":27}},{"value":"/ pub trait Serial {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3094,"byte_end":3116,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"/     /// Error type associated to this serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3117,"byte_end":3175,"line_start":71,"line_end":71,"column_start":1,"column_end":59}},{"value":"/     type Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3176,"byte_end":3195,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3196,"byte_end":3199,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/     /// Reads a single byte","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3200,"byte_end":3231,"line_start":74,"line_end":74,"column_start":1,"column_end":32}},{"value":"/     fn try_read(&mut self) -> nb::Result<u8, Self::Error>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3232,"byte_end":3294,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3295,"byte_end":3298,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/     /// Writes a single byte","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3299,"byte_end":3331,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/     fn try_write(&mut self, byte: u8) -> nb::Result<(), Self::Error>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3332,"byte_end":3405,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3406,"byte_end":3411,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3412,"byte_end":3419,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3420,"byte_end":3423,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The `nb::Result` enum is used to add a [`WouldBlock`] variant to the errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3424,"byte_end":3503,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/ of the serial interface. As explained in the documentation of the `nb` crate this single API,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3504,"byte_end":3601,"line_start":83,"line_end":83,"column_start":1,"column_end":98}},{"value":"/ when paired with the macros in the `nb` crate, can operate in a blocking manner, or in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3602,"byte_end":3694,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"/ non-blocking manner compatible with `futures` and with the `await!` operator.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3695,"byte_end":3776,"line_start":85,"line_end":85,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3777,"byte_end":3780,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`WouldBlock`]: https://docs.rs/nb/0.1.0/nb/enum.Error.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3781,"byte_end":3844,"line_start":87,"line_end":87,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3845,"byte_end":3848,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Some traits, like the one shown below, may expose possibly blocking APIs that can't fail. In","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3849,"byte_end":3945,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/ those cases `nb::Result<_, Infallible>` is used.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3946,"byte_end":3998,"line_start":90,"line_end":90,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":3999,"byte_end":4002,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4003,"byte_end":4010,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4011,"byte_end":4031,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4032,"byte_end":4035,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ # use std as core;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4036,"byte_end":4058,"line_start":95,"line_end":95,"column_start":1,"column_end":23}},{"value":"/ use ::core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4059,"byte_end":4095,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4096,"byte_end":4099,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ /// A count down timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4100,"byte_end":4126,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ pub trait CountDown {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4127,"byte_end":4152,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4153,"byte_end":4166,"line_start":100,"line_end":100,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4167,"byte_end":4170,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/     /// \"waits\" until the count down is over","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4171,"byte_end":4219,"line_start":102,"line_end":102,"column_start":1,"column_end":49}},{"value":"/     fn try_wait(&mut self) -> nb::Result<(), Infallible>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4220,"byte_end":4281,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4282,"byte_end":4287,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4288,"byte_end":4291,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4292,"byte_end":4310,"line_start":106,"line_end":106,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4311,"byte_end":4318,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4319,"byte_end":4322,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ## Suggested implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4323,"byte_end":4354,"line_start":109,"line_end":109,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4355,"byte_end":4358,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The HAL traits should be implemented for device crates generated via [`svd2rust`] to maximize","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4359,"byte_end":4456,"line_start":111,"line_end":111,"column_start":1,"column_end":98}},{"value":"/ code reuse.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4457,"byte_end":4472,"line_start":112,"line_end":112,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4473,"byte_end":4476,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`svd2rust`]: https://crates.io/crates/svd2rust","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4477,"byte_end":4528,"line_start":114,"line_end":114,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4529,"byte_end":4532,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Shown below is an implementation of some of the HAL traits for the [`stm32f30x`] crate. This","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4533,"byte_end":4629,"line_start":116,"line_end":116,"column_start":1,"column_end":97}},{"value":"/ single implementation will work for *any* microcontroller in the STM32F30x family.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4630,"byte_end":4716,"line_start":117,"line_end":117,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4717,"byte_end":4720,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`stm32f3`]: https://crates.io/crates/stm32f3","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4721,"byte_end":4770,"line_start":119,"line_end":119,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4771,"byte_end":4774,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4775,"byte_end":4782,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/ // crate: stm32f3xx-hal","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4783,"byte_end":4810,"line_start":122,"line_end":122,"column_start":1,"column_end":28}},{"value":"/ // An implementation of the `embedded-hal` traits for STM32F3xx microcontrollers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4811,"byte_end":4895,"line_start":123,"line_end":123,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4896,"byte_end":4899,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4900,"byte_end":4937,"line_start":125,"line_end":125,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4938,"byte_end":4958,"line_start":126,"line_end":126,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4959,"byte_end":4962,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ // device crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4963,"byte_end":4982,"line_start":128,"line_end":128,"column_start":1,"column_end":20}},{"value":"/ extern crate stm32f3;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":4983,"byte_end":5008,"line_start":129,"line_end":129,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5009,"byte_end":5012,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ use stm32f3::stm32f303::USART1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5013,"byte_end":5048,"line_start":131,"line_end":131,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5049,"byte_end":5052,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ /// A serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5053,"byte_end":5079,"line_start":133,"line_end":133,"column_start":1,"column_end":27}},{"value":"/ // NOTE generic over the USART peripheral","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5080,"byte_end":5125,"line_start":134,"line_end":134,"column_start":1,"column_end":46}},{"value":"/ pub struct Serial<USART> { usart: USART }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5126,"byte_end":5171,"line_start":135,"line_end":135,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5172,"byte_end":5175,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ // convenience type alias","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5176,"byte_end":5205,"line_start":137,"line_end":137,"column_start":1,"column_end":30}},{"value":"/ pub type Serial1 = Serial<USART1>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5206,"byte_end":5244,"line_start":138,"line_end":138,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5245,"byte_end":5248,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ /// Serial interface error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5249,"byte_end":5279,"line_start":140,"line_end":140,"column_start":1,"column_end":31}},{"value":"/ pub enum Error {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5280,"byte_end":5300,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"/     /// Buffer overrun","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5301,"byte_end":5327,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/     Overrun,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5328,"byte_end":5344,"line_start":143,"line_end":143,"column_start":1,"column_end":17}},{"value":"/     // omitted: other error variants","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5345,"byte_end":5385,"line_start":144,"line_end":144,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5386,"byte_end":5391,"line_start":145,"line_end":145,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5392,"byte_end":5395,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ impl hal::serial::Read<u8> for Serial<USART1> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5396,"byte_end":5447,"line_start":147,"line_end":147,"column_start":1,"column_end":52}},{"value":"/     type Error = Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5448,"byte_end":5475,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5476,"byte_end":5479,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/     fn try_read(&mut self) -> nb::Result<u8, Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5480,"byte_end":5537,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/         // read the status register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5538,"byte_end":5577,"line_start":151,"line_end":151,"column_start":1,"column_end":40}},{"value":"/         let isr = self.usart.isr.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5578,"byte_end":5622,"line_start":152,"line_end":152,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5623,"byte_end":5626,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/         if isr.ore().bit_is_set() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5627,"byte_end":5666,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/             // Error: Buffer overrun","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5667,"byte_end":5707,"line_start":155,"line_end":155,"column_start":1,"column_end":41}},{"value":"/             Err(nb::Error::Other(Error::Overrun))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5708,"byte_end":5761,"line_start":156,"line_end":156,"column_start":1,"column_end":54}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5762,"byte_end":5775,"line_start":157,"line_end":157,"column_start":1,"column_end":14}},{"value":"/         // omitted: checks for other errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5776,"byte_end":5823,"line_start":158,"line_end":158,"column_start":1,"column_end":48}},{"value":"/         else if isr.rxne().bit_is_set() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5824,"byte_end":5869,"line_start":159,"line_end":159,"column_start":1,"column_end":46}},{"value":"/             // Data available: read the data register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5870,"byte_end":5927,"line_start":160,"line_end":160,"column_start":1,"column_end":58}},{"value":"/             Ok(self.usart.rdr.read().bits() as u8)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5928,"byte_end":5982,"line_start":161,"line_end":161,"column_start":1,"column_end":55}},{"value":"/         } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":5983,"byte_end":6003,"line_start":162,"line_end":162,"column_start":1,"column_end":21}},{"value":"/             // No data available yet","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6004,"byte_end":6044,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/             Err(nb::Error::WouldBlock)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6045,"byte_end":6087,"line_start":164,"line_end":164,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6088,"byte_end":6101,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6102,"byte_end":6111,"line_start":166,"line_end":166,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6112,"byte_end":6117,"line_start":167,"line_end":167,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6118,"byte_end":6121,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ impl hal::serial::Write<u8> for Serial<USART1> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6122,"byte_end":6174,"line_start":169,"line_end":169,"column_start":1,"column_end":53}},{"value":"/     type Error = Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6175,"byte_end":6202,"line_start":170,"line_end":170,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6203,"byte_end":6206,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/     fn try_write(&mut self, byte: u8) -> nb::Result<(), Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6207,"byte_end":6275,"line_start":172,"line_end":172,"column_start":1,"column_end":69}},{"value":"/         // Similar to the `try_read` implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6276,"byte_end":6331,"line_start":173,"line_end":173,"column_start":1,"column_end":56}},{"value":"/         # Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6332,"byte_end":6352,"line_start":174,"line_end":174,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6353,"byte_end":6362,"line_start":175,"line_end":175,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6363,"byte_end":6366,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/     fn try_flush(&mut self) -> nb::Result<(), Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6367,"byte_end":6425,"line_start":177,"line_end":177,"column_start":1,"column_end":59}},{"value":"/         // Similar to the `try_read` implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6426,"byte_end":6481,"line_start":178,"line_end":178,"column_start":1,"column_end":56}},{"value":"/         # Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6482,"byte_end":6502,"line_start":179,"line_end":179,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6503,"byte_end":6512,"line_start":180,"line_end":180,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6513,"byte_end":6518,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6519,"byte_end":6522,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6523,"byte_end":6541,"line_start":183,"line_end":183,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6542,"byte_end":6549,"line_start":184,"line_end":184,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6550,"byte_end":6553,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ ## Intended usage","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6554,"byte_end":6575,"line_start":186,"line_end":186,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6576,"byte_end":6579,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Thanks to the [`nb`] crate the HAL API can be used in a blocking manner,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6580,"byte_end":6656,"line_start":188,"line_end":188,"column_start":1,"column_end":77}},{"value":"/ with `futures` or with the `await` operator using the [`block!`],","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6657,"byte_end":6726,"line_start":189,"line_end":189,"column_start":1,"column_end":70}},{"value":"/ [`try_nb!`] and [`await!`] macros respectively.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6727,"byte_end":6778,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6779,"byte_end":6782,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ [`block!`]: https://docs.rs/nb/0.1.0/nb/macro.block.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6783,"byte_end":6843,"line_start":192,"line_end":192,"column_start":1,"column_end":61}},{"value":"/ [`try_nb!`]: https://docs.rs/nb/0.1.0/nb/index.html#how-to-use-this-crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6844,"byte_end":6921,"line_start":193,"line_end":193,"column_start":1,"column_end":78}},{"value":"/ [`await!`]: https://docs.rs/nb/0.1.0/nb/index.html#how-to-use-this-crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6922,"byte_end":6998,"line_start":194,"line_end":194,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":6999,"byte_end":7002,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ ### Blocking mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7003,"byte_end":7024,"line_start":196,"line_end":196,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7025,"byte_end":7028,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ An example of sending a string over the serial interface in a blocking","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7029,"byte_end":7103,"line_start":198,"line_end":198,"column_start":1,"column_end":75}},{"value":"/ fashion:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7104,"byte_end":7116,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7117,"byte_end":7120,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7121,"byte_end":7128,"line_start":201,"line_end":201,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7129,"byte_end":7159,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7160,"byte_end":7183,"line_start":203,"line_end":203,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7184,"byte_end":7204,"line_start":204,"line_end":204,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7205,"byte_end":7208,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ use stm32f30x_hal::Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7209,"byte_end":7240,"line_start":206,"line_end":206,"column_start":1,"column_end":32}},{"value":"/ use embedded_hal::serial::Write;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7241,"byte_end":7277,"line_start":207,"line_end":207,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7278,"byte_end":7281,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7282,"byte_end":7299,"line_start":209,"line_end":209,"column_start":1,"column_end":18}},{"value":"/ let mut serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7300,"byte_end":7331,"line_start":210,"line_end":210,"column_start":1,"column_end":32}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7332,"byte_end":7345,"line_start":211,"line_end":211,"column_start":1,"column_end":14}},{"value":"/ #   Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7346,"byte_end":7361,"line_start":212,"line_end":212,"column_start":1,"column_end":16}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7362,"byte_end":7368,"line_start":213,"line_end":213,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7369,"byte_end":7372,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ for byte in b\"Hello, world!\" {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7373,"byte_end":7407,"line_start":215,"line_end":215,"column_start":1,"column_end":35}},{"value":"/     // NOTE `block!` blocks until `serial.try_write()` completes and returns","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7408,"byte_end":7488,"line_start":216,"line_end":216,"column_start":1,"column_end":81}},{"value":"/     // `Result<(), Error>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7489,"byte_end":7519,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/     block!(serial.try_write(*byte)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7520,"byte_end":7569,"line_start":218,"line_end":218,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7570,"byte_end":7575,"line_start":219,"line_end":219,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7576,"byte_end":7583,"line_start":220,"line_end":220,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7584,"byte_end":7587,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7588,"byte_end":7613,"line_start":222,"line_end":222,"column_start":1,"column_end":26}},{"value":"/ #     use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7614,"byte_end":7654,"line_start":223,"line_end":223,"column_start":1,"column_end":41}},{"value":"/ #     pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7655,"byte_end":7684,"line_start":224,"line_end":224,"column_start":1,"column_end":30}},{"value":"/ #     impl Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7685,"byte_end":7709,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/ #         pub fn try_write(&mut self, _: u8) -> ::nb::Result<(), Infallible> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7710,"byte_end":7792,"line_start":226,"line_end":226,"column_start":1,"column_end":83}},{"value":"/ #             Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7793,"byte_end":7817,"line_start":227,"line_end":227,"column_start":1,"column_end":25}},{"value":"/ #         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7818,"byte_end":7833,"line_start":228,"line_end":228,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7834,"byte_end":7845,"line_start":229,"line_end":229,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7846,"byte_end":7853,"line_start":230,"line_end":230,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7854,"byte_end":7861,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7862,"byte_end":7865,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ### `futures`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7866,"byte_end":7883,"line_start":233,"line_end":233,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7884,"byte_end":7887,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ An example of running two tasks concurrently. First task: blink a LED every","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7888,"byte_end":7967,"line_start":235,"line_end":235,"column_start":1,"column_end":80}},{"value":"/ second. Second task: loop back data over the serial interface. The target","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":7968,"byte_end":8045,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"/ must provide the `libstd` in order to be able to use `futures`, which is not","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8046,"byte_end":8126,"line_start":237,"line_end":237,"column_start":1,"column_end":81}},{"value":"/ the case for many embedded targets.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8127,"byte_end":8166,"line_start":238,"line_end":238,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8167,"byte_end":8170,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ ```not_run","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8171,"byte_end":8185,"line_start":240,"line_end":240,"column_start":1,"column_end":15}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8186,"byte_end":8223,"line_start":241,"line_end":241,"column_start":1,"column_end":38}},{"value":"/ extern crate futures;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8224,"byte_end":8249,"line_start":242,"line_end":242,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8250,"byte_end":8253,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ #[macro_use(try_nb)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8254,"byte_end":8278,"line_start":244,"line_end":244,"column_start":1,"column_end":25}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8279,"byte_end":8299,"line_start":245,"line_end":245,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8300,"byte_end":8303,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8304,"byte_end":8328,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/ use futures::{","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8329,"byte_end":8347,"line_start":248,"line_end":248,"column_start":1,"column_end":19}},{"value":"/     future,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8348,"byte_end":8363,"line_start":249,"line_end":249,"column_start":1,"column_end":16}},{"value":"/     Async,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8364,"byte_end":8378,"line_start":250,"line_end":250,"column_start":1,"column_end":15}},{"value":"/     Future,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8379,"byte_end":8394,"line_start":251,"line_end":251,"column_start":1,"column_end":16}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8395,"byte_end":8401,"line_start":252,"line_end":252,"column_start":1,"column_end":7}},{"value":"/ use futures::future::Loop;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8402,"byte_end":8432,"line_start":253,"line_end":253,"column_start":1,"column_end":31}},{"value":"/ use stm32f30x_hal::{Led, Serial1, Timer6};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8433,"byte_end":8479,"line_start":254,"line_end":254,"column_start":1,"column_end":47}},{"value":"/ use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8480,"byte_end":8514,"line_start":255,"line_end":255,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8515,"byte_end":8518,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `CountDown.try_wait`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8519,"byte_end":8568,"line_start":257,"line_end":257,"column_start":1,"column_end":50}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8569,"byte_end":8576,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8577,"byte_end":8640,"line_start":259,"line_end":259,"column_start":1,"column_end":64}},{"value":"/ fn wait<T>(mut timer: T) -> impl Future<Item = T, Error = Infallible>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8641,"byte_end":8714,"line_start":260,"line_end":260,"column_start":1,"column_end":74}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8715,"byte_end":8724,"line_start":261,"line_end":261,"column_start":1,"column_end":10}},{"value":"/     T: hal::timer::CountDown,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8725,"byte_end":8758,"line_start":262,"line_end":262,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8759,"byte_end":8764,"line_start":263,"line_end":263,"column_start":1,"column_end":6}},{"value":"/     let mut timer = Some(timer);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8765,"byte_end":8801,"line_start":264,"line_end":264,"column_start":1,"column_end":37}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8802,"byte_end":8835,"line_start":265,"line_end":265,"column_start":1,"column_end":34}},{"value":"/         try_nb!(timer.as_mut().unwrap().try_wait());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8836,"byte_end":8892,"line_start":266,"line_end":266,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8893,"byte_end":8896,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready(timer.take().unwrap()))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8897,"byte_end":8948,"line_start":268,"line_end":268,"column_start":1,"column_end":52}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8949,"byte_end":8959,"line_start":269,"line_end":269,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8960,"byte_end":8965,"line_start":270,"line_end":270,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8966,"byte_end":8969,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `Serial.read`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":8970,"byte_end":9012,"line_start":272,"line_end":272,"column_start":1,"column_end":43}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9013,"byte_end":9020,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9021,"byte_end":9084,"line_start":274,"line_end":274,"column_start":1,"column_end":64}},{"value":"/ fn read<S>(mut serial: S) -> impl Future<Item = (S, u8), Error = S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9085,"byte_end":9163,"line_start":275,"line_end":275,"column_start":1,"column_end":79}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9164,"byte_end":9173,"line_start":276,"line_end":276,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Read<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9174,"byte_end":9207,"line_start":277,"line_end":277,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9208,"byte_end":9213,"line_start":278,"line_end":278,"column_start":1,"column_end":6}},{"value":"/     let mut serial = Some(serial);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9214,"byte_end":9252,"line_start":279,"line_end":279,"column_start":1,"column_end":39}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9253,"byte_end":9286,"line_start":280,"line_end":280,"column_start":1,"column_end":34}},{"value":"/         let byte = try_nb!(serial.as_mut().unwrap().try_read());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9287,"byte_end":9355,"line_start":281,"line_end":281,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9356,"byte_end":9359,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready((serial.take().unwrap(), byte)))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9360,"byte_end":9420,"line_start":283,"line_end":283,"column_start":1,"column_end":61}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9421,"byte_end":9431,"line_start":284,"line_end":284,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9432,"byte_end":9437,"line_start":285,"line_end":285,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9438,"byte_end":9441,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `Serial.write`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9442,"byte_end":9485,"line_start":287,"line_end":287,"column_start":1,"column_end":44}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9486,"byte_end":9493,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9494,"byte_end":9557,"line_start":289,"line_end":289,"column_start":1,"column_end":64}},{"value":"/ fn write<S>(mut serial: S, byte: u8) -> impl Future<Item = S, Error = S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9558,"byte_end":9641,"line_start":290,"line_end":290,"column_start":1,"column_end":84}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9642,"byte_end":9651,"line_start":291,"line_end":291,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9652,"byte_end":9686,"line_start":292,"line_end":292,"column_start":1,"column_end":35}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9687,"byte_end":9692,"line_start":293,"line_end":293,"column_start":1,"column_end":6}},{"value":"/     let mut serial = Some(serial);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9693,"byte_end":9731,"line_start":294,"line_end":294,"column_start":1,"column_end":39}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9732,"byte_end":9765,"line_start":295,"line_end":295,"column_start":1,"column_end":34}},{"value":"/         try_nb!(serial.as_mut().unwrap().try_write(byte));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9766,"byte_end":9828,"line_start":296,"line_end":296,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9829,"byte_end":9832,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready(serial.take().unwrap()))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9833,"byte_end":9885,"line_start":298,"line_end":298,"column_start":1,"column_end":53}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9886,"byte_end":9896,"line_start":299,"line_end":299,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9897,"byte_end":9902,"line_start":300,"line_end":300,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9903,"byte_end":9906,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9907,"byte_end":9922,"line_start":302,"line_end":302,"column_start":1,"column_end":16}},{"value":"/     // HAL implementers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9923,"byte_end":9950,"line_start":303,"line_end":303,"column_start":1,"column_end":28}},{"value":"/     let timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9951,"byte_end":9980,"line_start":304,"line_end":304,"column_start":1,"column_end":30}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9981,"byte_end":9998,"line_start":305,"line_end":305,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":9999,"byte_end":10017,"line_start":306,"line_end":306,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10018,"byte_end":10028,"line_start":307,"line_end":307,"column_start":1,"column_end":11}},{"value":"/     let serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10029,"byte_end":10060,"line_start":308,"line_end":308,"column_start":1,"column_end":32}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10061,"byte_end":10078,"line_start":309,"line_end":309,"column_start":1,"column_end":18}},{"value":"/ #       Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10079,"byte_end":10098,"line_start":310,"line_end":310,"column_start":1,"column_end":20}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10099,"byte_end":10109,"line_start":311,"line_end":311,"column_start":1,"column_end":11}},{"value":"/     let led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10110,"byte_end":10134,"line_start":312,"line_end":312,"column_start":1,"column_end":25}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10135,"byte_end":10152,"line_start":313,"line_end":313,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10153,"byte_end":10168,"line_start":314,"line_end":314,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10169,"byte_end":10179,"line_start":315,"line_end":315,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10180,"byte_end":10183,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/     // Tasks","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10184,"byte_end":10200,"line_start":317,"line_end":317,"column_start":1,"column_end":17}},{"value":"/     let mut blinky = future::loop_fn::<_, (), _, _>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10201,"byte_end":10257,"line_start":318,"line_end":318,"column_start":1,"column_end":57}},{"value":"/         (led, timer, true),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10258,"byte_end":10289,"line_start":319,"line_end":319,"column_start":1,"column_end":32}},{"value":"/         |(mut led, mut timer, state)| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10290,"byte_end":10333,"line_start":320,"line_end":320,"column_start":1,"column_end":44}},{"value":"/             wait(timer).map(move |timer| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10334,"byte_end":10380,"line_start":321,"line_end":321,"column_start":1,"column_end":47}},{"value":"/                 if state {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10381,"byte_end":10411,"line_start":322,"line_end":322,"column_start":1,"column_end":31}},{"value":"/                     led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10412,"byte_end":10445,"line_start":323,"line_end":323,"column_start":1,"column_end":34}},{"value":"/                 } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10446,"byte_end":10474,"line_start":324,"line_end":324,"column_start":1,"column_end":29}},{"value":"/                     led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10475,"byte_end":10509,"line_start":325,"line_end":325,"column_start":1,"column_end":35}},{"value":"/                 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10510,"byte_end":10531,"line_start":326,"line_end":326,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10532,"byte_end":10535,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/                 Loop::Continue((led, timer, !state))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10536,"byte_end":10592,"line_start":328,"line_end":328,"column_start":1,"column_end":57}},{"value":"/             })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10593,"byte_end":10611,"line_start":329,"line_end":329,"column_start":1,"column_end":19}},{"value":"/         });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10612,"byte_end":10627,"line_start":330,"line_end":330,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10628,"byte_end":10631,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/     let mut loopback = future::loop_fn::<_, (), _, _>(serial, |mut serial| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10632,"byte_end":10712,"line_start":332,"line_end":332,"column_start":1,"column_end":81}},{"value":"/         read(serial).and_then(|(serial, byte)| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10713,"byte_end":10765,"line_start":333,"line_end":333,"column_start":1,"column_end":53}},{"value":"/             write(serial, byte)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10766,"byte_end":10801,"line_start":334,"line_end":334,"column_start":1,"column_end":36}},{"value":"/         }).map(|serial| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10802,"byte_end":10831,"line_start":335,"line_end":335,"column_start":1,"column_end":30}},{"value":"/             Loop::Continue(serial)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10832,"byte_end":10870,"line_start":336,"line_end":336,"column_start":1,"column_end":39}},{"value":"/         })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10871,"byte_end":10885,"line_start":337,"line_end":337,"column_start":1,"column_end":15}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10886,"byte_end":10897,"line_start":338,"line_end":338,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10898,"byte_end":10901,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/     // Event loop","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10902,"byte_end":10923,"line_start":340,"line_end":340,"column_start":1,"column_end":22}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10924,"byte_end":10938,"line_start":341,"line_end":341,"column_start":1,"column_end":15}},{"value":"/         blinky.poll().unwrap(); // NOTE(unwrap) E = Infallible","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":10939,"byte_end":11005,"line_start":342,"line_end":342,"column_start":1,"column_end":67}},{"value":"/         loopback.poll().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11006,"byte_end":11043,"line_start":343,"line_end":343,"column_start":1,"column_end":38}},{"value":"/ #       break;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11044,"byte_end":11062,"line_start":344,"line_end":344,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11063,"byte_end":11072,"line_start":345,"line_end":345,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11073,"byte_end":11078,"line_start":346,"line_end":346,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11079,"byte_end":11082,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11083,"byte_end":11108,"line_start":348,"line_end":348,"column_start":1,"column_end":26}},{"value":"/ #     use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11109,"byte_end":11149,"line_start":349,"line_end":349,"column_start":1,"column_end":41}},{"value":"/ #     pub struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11150,"byte_end":11178,"line_start":350,"line_end":350,"column_start":1,"column_end":29}},{"value":"/ #     impl ::hal::timer::CountDown for Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11179,"byte_end":11230,"line_start":351,"line_end":351,"column_start":1,"column_end":52}},{"value":"/ #         type Time = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11231,"byte_end":11260,"line_start":352,"line_end":352,"column_start":1,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11261,"byte_end":11266,"line_start":353,"line_end":353,"column_start":1,"column_end":6}},{"value":"/ #         fn try_start<T>(&mut self, _: T) -> Result<(), Infallible> where T: Into<()> {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11267,"byte_end":11360,"line_start":354,"line_end":354,"column_start":1,"column_end":94}},{"value":"/ #         fn try_wait(&mut self) -> ::nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11361,"byte_end":11462,"line_start":355,"line_end":355,"column_start":1,"column_end":102}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11463,"byte_end":11474,"line_start":356,"line_end":356,"column_start":1,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11475,"byte_end":11480,"line_start":357,"line_end":357,"column_start":1,"column_end":6}},{"value":"/ #     pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11481,"byte_end":11510,"line_start":358,"line_end":358,"column_start":1,"column_end":30}},{"value":"/ #     impl ::hal::serial::Read<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11511,"byte_end":11563,"line_start":359,"line_end":359,"column_start":1,"column_end":53}},{"value":"/ #         type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11564,"byte_end":11602,"line_start":360,"line_end":360,"column_start":1,"column_end":39}},{"value":"/ #         fn try_read(&mut self) -> ::nb::Result<u8, Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11603,"byte_end":11704,"line_start":361,"line_end":361,"column_start":1,"column_end":102}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11705,"byte_end":11716,"line_start":362,"line_end":362,"column_start":1,"column_end":12}},{"value":"/ #     impl ::hal::serial::Write<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11717,"byte_end":11770,"line_start":363,"line_end":363,"column_start":1,"column_end":54}},{"value":"/ #         type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11771,"byte_end":11809,"line_start":364,"line_end":364,"column_start":1,"column_end":39}},{"value":"/ #         fn try_flush(&mut self) -> ::nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11810,"byte_end":11912,"line_start":365,"line_end":365,"column_start":1,"column_end":103}},{"value":"/ #         fn try_write(&mut self, _: u8) -> ::nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":11913,"byte_end":12022,"line_start":366,"line_end":366,"column_start":1,"column_end":110}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12023,"byte_end":12034,"line_start":367,"line_end":367,"column_start":1,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12035,"byte_end":12040,"line_start":368,"line_end":368,"column_start":1,"column_end":6}},{"value":"/ #     pub struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12041,"byte_end":12066,"line_start":369,"line_end":369,"column_start":1,"column_end":26}},{"value":"/ #     impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12067,"byte_end":12087,"line_start":370,"line_end":370,"column_start":1,"column_end":21}},{"value":"/ #         pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12088,"byte_end":12126,"line_start":371,"line_end":371,"column_start":1,"column_end":39}},{"value":"/ #         pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12127,"byte_end":12164,"line_start":372,"line_end":372,"column_start":1,"column_end":38}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12165,"byte_end":12176,"line_start":373,"line_end":373,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12177,"byte_end":12184,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12185,"byte_end":12192,"line_start":375,"line_end":375,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12193,"byte_end":12196,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ ### `await`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12197,"byte_end":12212,"line_start":377,"line_end":377,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12213,"byte_end":12216,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ Same example as above but using `await!` instead of `futures`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12217,"byte_end":12282,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ (same remark concerning the availability of `libstd` on the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12283,"byte_end":12346,"line_start":380,"line_end":380,"column_start":1,"column_end":64}},{"value":"/ target).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12347,"byte_end":12359,"line_start":381,"line_end":381,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12360,"byte_end":12363,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ ```not_run","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12364,"byte_end":12378,"line_start":383,"line_end":383,"column_start":1,"column_end":15}},{"value":"/ #![feature(generator_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12379,"byte_end":12411,"line_start":384,"line_end":384,"column_start":1,"column_end":33}},{"value":"/ #![feature(generators)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12412,"byte_end":12439,"line_start":385,"line_end":385,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12440,"byte_end":12443,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12444,"byte_end":12481,"line_start":387,"line_end":387,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12482,"byte_end":12485,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ #[macro_use(r#await)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12486,"byte_end":12511,"line_start":389,"line_end":389,"column_start":1,"column_end":26}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12512,"byte_end":12532,"line_start":390,"line_end":390,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12533,"byte_end":12536,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ use core::ops::Generator;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12537,"byte_end":12566,"line_start":392,"line_end":392,"column_start":1,"column_end":30}},{"value":"/ use core::pin::Pin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12567,"byte_end":12590,"line_start":393,"line_end":393,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12591,"byte_end":12594,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12595,"byte_end":12619,"line_start":395,"line_end":395,"column_start":1,"column_end":25}},{"value":"/ use stm32f30x_hal::{Led, Serial1, Timer6};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12620,"byte_end":12666,"line_start":396,"line_end":396,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12667,"byte_end":12670,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12671,"byte_end":12686,"line_start":398,"line_end":398,"column_start":1,"column_end":16}},{"value":"/     // HAL implementers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12687,"byte_end":12714,"line_start":399,"line_end":399,"column_start":1,"column_end":28}},{"value":"/     let mut timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12715,"byte_end":12748,"line_start":400,"line_end":400,"column_start":1,"column_end":34}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12749,"byte_end":12766,"line_start":401,"line_end":401,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12767,"byte_end":12785,"line_start":402,"line_end":402,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12786,"byte_end":12796,"line_start":403,"line_end":403,"column_start":1,"column_end":11}},{"value":"/     let mut serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12797,"byte_end":12832,"line_start":404,"line_end":404,"column_start":1,"column_end":36}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12833,"byte_end":12850,"line_start":405,"line_end":405,"column_start":1,"column_end":18}},{"value":"/ #       Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12851,"byte_end":12870,"line_start":406,"line_end":406,"column_start":1,"column_end":20}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12871,"byte_end":12881,"line_start":407,"line_end":407,"column_start":1,"column_end":11}},{"value":"/     let mut led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12882,"byte_end":12910,"line_start":408,"line_end":408,"column_start":1,"column_end":29}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12911,"byte_end":12928,"line_start":409,"line_end":409,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12929,"byte_end":12944,"line_start":410,"line_end":410,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12945,"byte_end":12955,"line_start":411,"line_end":411,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12956,"byte_end":12959,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/     // Tasks","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12960,"byte_end":12976,"line_start":413,"line_end":413,"column_start":1,"column_end":17}},{"value":"/     let mut blinky = (move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":12977,"byte_end":13012,"line_start":414,"line_end":414,"column_start":1,"column_end":36}},{"value":"/         let mut state = false;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13013,"byte_end":13047,"line_start":415,"line_end":415,"column_start":1,"column_end":35}},{"value":"/         loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13048,"byte_end":13066,"line_start":416,"line_end":416,"column_start":1,"column_end":19}},{"value":"/             // `await!` means \"suspend / yield here\" instead of \"block until","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13067,"byte_end":13147,"line_start":417,"line_end":417,"column_start":1,"column_end":81}},{"value":"/             // completion\"","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13148,"byte_end":13178,"line_start":418,"line_end":418,"column_start":1,"column_end":31}},{"value":"/             nb::r#await!(timer.try_wait()).unwrap(); // NOTE(unwrap) E = Infallible","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13179,"byte_end":13266,"line_start":419,"line_end":419,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13267,"byte_end":13270,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/             state = !state;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13271,"byte_end":13302,"line_start":421,"line_end":421,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13303,"byte_end":13306,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/             if state {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13307,"byte_end":13333,"line_start":423,"line_end":423,"column_start":1,"column_end":27}},{"value":"/                 led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13334,"byte_end":13363,"line_start":424,"line_end":424,"column_start":1,"column_end":30}},{"value":"/             } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13364,"byte_end":13388,"line_start":425,"line_end":425,"column_start":1,"column_end":25}},{"value":"/                 led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13389,"byte_end":13419,"line_start":426,"line_end":426,"column_start":1,"column_end":31}},{"value":"/             }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13420,"byte_end":13437,"line_start":427,"line_end":427,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13438,"byte_end":13451,"line_start":428,"line_end":428,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13452,"byte_end":13463,"line_start":429,"line_end":429,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13464,"byte_end":13467,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/     let mut loopback = (move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13468,"byte_end":13505,"line_start":431,"line_end":431,"column_start":1,"column_end":38}},{"value":"/         loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13506,"byte_end":13524,"line_start":432,"line_end":432,"column_start":1,"column_end":19}},{"value":"/             let byte = nb::r#await!(serial.try_read()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13525,"byte_end":13593,"line_start":433,"line_end":433,"column_start":1,"column_end":69}},{"value":"/             nb::r#await!(serial.try_write(byte)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13594,"byte_end":13656,"line_start":434,"line_end":434,"column_start":1,"column_end":63}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13657,"byte_end":13670,"line_start":435,"line_end":435,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13671,"byte_end":13682,"line_start":436,"line_end":436,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13683,"byte_end":13686,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/     // Event loop","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13687,"byte_end":13708,"line_start":438,"line_end":438,"column_start":1,"column_end":22}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13709,"byte_end":13723,"line_start":439,"line_end":439,"column_start":1,"column_end":15}},{"value":"/         Pin::new(&mut blinky).resume();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13724,"byte_end":13767,"line_start":440,"line_end":440,"column_start":1,"column_end":44}},{"value":"/         Pin::new(&mut loopback).resume();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13768,"byte_end":13813,"line_start":441,"line_end":441,"column_start":1,"column_end":46}},{"value":"/         # break;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13814,"byte_end":13834,"line_start":442,"line_end":442,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13835,"byte_end":13844,"line_start":443,"line_end":443,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13845,"byte_end":13850,"line_start":444,"line_end":444,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13851,"byte_end":13854,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13855,"byte_end":13880,"line_start":446,"line_end":446,"column_start":1,"column_end":26}},{"value":"/ #   use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13881,"byte_end":13919,"line_start":447,"line_end":447,"column_start":1,"column_end":39}},{"value":"/ #   pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13920,"byte_end":13947,"line_start":448,"line_end":448,"column_start":1,"column_end":28}},{"value":"/ #   impl Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13948,"byte_end":13970,"line_start":449,"line_end":449,"column_start":1,"column_end":23}},{"value":"/ #       pub fn try_read(&mut self) -> ::nb::Result<u8, Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":13971,"byte_end":14074,"line_start":450,"line_end":450,"column_start":1,"column_end":104}},{"value":"/ #       pub fn try_write(&mut self, _: u8) -> ::nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14075,"byte_end":14186,"line_start":451,"line_end":451,"column_start":1,"column_end":112}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14187,"byte_end":14196,"line_start":452,"line_end":452,"column_start":1,"column_end":10}},{"value":"/ #   pub struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14197,"byte_end":14223,"line_start":453,"line_end":453,"column_start":1,"column_end":27}},{"value":"/ #   impl Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14224,"byte_end":14245,"line_start":454,"line_end":454,"column_start":1,"column_end":22}},{"value":"/ #       pub fn try_wait(&mut self) -> ::nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14246,"byte_end":14349,"line_start":455,"line_end":455,"column_start":1,"column_end":104}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14350,"byte_end":14359,"line_start":456,"line_end":456,"column_start":1,"column_end":10}},{"value":"/ #   pub struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14360,"byte_end":14383,"line_start":457,"line_end":457,"column_start":1,"column_end":24}},{"value":"/ #   impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14384,"byte_end":14402,"line_start":458,"line_end":458,"column_start":1,"column_end":19}},{"value":"/ #       pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14403,"byte_end":14439,"line_start":459,"line_end":459,"column_start":1,"column_end":37}},{"value":"/ #       pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14440,"byte_end":14475,"line_start":460,"line_end":460,"column_start":1,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14476,"byte_end":14485,"line_start":461,"line_end":461,"column_start":1,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14486,"byte_end":14493,"line_start":462,"line_end":462,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14494,"byte_end":14501,"line_start":463,"line_end":463,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14502,"byte_end":14505,"line_start":464,"line_end":464,"column_start":1,"column_end":4}},{"value":"/ ## Generic programming and higher level abstractions","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14506,"byte_end":14562,"line_start":465,"line_end":465,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14563,"byte_end":14566,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ The core of the HAL has been kept minimal on purpose to encourage building **generic** higher","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14567,"byte_end":14664,"line_start":467,"line_end":467,"column_start":1,"column_end":98}},{"value":"/ level abstractions on top of it. Some higher level abstractions that pick an asynchronous model","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14665,"byte_end":14764,"line_start":468,"line_end":468,"column_start":1,"column_end":100}},{"value":"/ or that have blocking behavior and that are deemed useful to build other abstractions can be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14765,"byte_end":14861,"line_start":469,"line_end":469,"column_start":1,"column_end":97}},{"value":"/ found in the `blocking` module and, in the future, in the `futures` and `async` modules.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14862,"byte_end":14954,"line_start":470,"line_end":470,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14955,"byte_end":14958,"line_start":471,"line_end":471,"column_start":1,"column_end":4}},{"value":"/ Some examples:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14959,"byte_end":14977,"line_start":472,"line_end":472,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14978,"byte_end":14981,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ **NOTE** All the functions shown below could have been written as trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":14982,"byte_end":15057,"line_start":474,"line_end":474,"column_start":1,"column_end":76}},{"value":"/ methods with default implementation to allow specialization, but they have","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15058,"byte_end":15136,"line_start":475,"line_end":475,"column_start":1,"column_end":79}},{"value":"/ been written as functions to keep things simple.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15137,"byte_end":15189,"line_start":476,"line_end":476,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15190,"byte_end":15193,"line_start":477,"line_end":477,"column_start":1,"column_end":4}},{"value":"/ - Write a whole buffer to a serial device in blocking a fashion.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15194,"byte_end":15262,"line_start":478,"line_end":478,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15263,"byte_end":15266,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15267,"byte_end":15274,"line_start":480,"line_end":480,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15275,"byte_end":15312,"line_start":481,"line_end":481,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15313,"byte_end":15336,"line_start":482,"line_end":482,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15337,"byte_end":15357,"line_start":483,"line_end":483,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15358,"byte_end":15361,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15362,"byte_end":15386,"line_start":485,"line_end":485,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15387,"byte_end":15390,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ fn write_all<S>(serial: &mut S, buffer: &[u8]) -> Result<(), S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15391,"byte_end":15465,"line_start":487,"line_end":487,"column_start":1,"column_end":75}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15466,"byte_end":15475,"line_start":488,"line_end":488,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15476,"byte_end":15509,"line_start":489,"line_end":489,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15510,"byte_end":15515,"line_start":490,"line_end":490,"column_start":1,"column_end":6}},{"value":"/     for &byte in buffer {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15516,"byte_end":15545,"line_start":491,"line_end":491,"column_start":1,"column_end":30}},{"value":"/         block!(serial.try_write(byte))?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15546,"byte_end":15590,"line_start":492,"line_end":492,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15591,"byte_end":15600,"line_start":493,"line_end":493,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15601,"byte_end":15604,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/     Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15605,"byte_end":15619,"line_start":495,"line_end":495,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15620,"byte_end":15625,"line_start":496,"line_end":496,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15626,"byte_end":15629,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15630,"byte_end":15648,"line_start":498,"line_end":498,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15649,"byte_end":15656,"line_start":499,"line_end":499,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15657,"byte_end":15660,"line_start":500,"line_end":500,"column_start":1,"column_end":4}},{"value":"/ - Blocking serial read with timeout","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15661,"byte_end":15700,"line_start":501,"line_end":501,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15701,"byte_end":15704,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15705,"byte_end":15712,"line_start":503,"line_end":503,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15713,"byte_end":15750,"line_start":504,"line_end":504,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15751,"byte_end":15771,"line_start":505,"line_end":505,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15772,"byte_end":15775,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15776,"byte_end":15800,"line_start":507,"line_end":507,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15801,"byte_end":15804,"line_start":508,"line_end":508,"column_start":1,"column_end":4}},{"value":"/ enum Error<SE, TE> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15805,"byte_end":15829,"line_start":509,"line_end":509,"column_start":1,"column_end":25}},{"value":"/     /// Serial interface error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15830,"byte_end":15864,"line_start":510,"line_end":510,"column_start":1,"column_end":35}},{"value":"/     Serial(SE),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15865,"byte_end":15884,"line_start":511,"line_end":511,"column_start":1,"column_end":20}},{"value":"/     /// Timeout error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15885,"byte_end":15910,"line_start":512,"line_end":512,"column_start":1,"column_end":26}},{"value":"/     TimedOut(TE),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15911,"byte_end":15932,"line_start":513,"line_end":513,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15933,"byte_end":15938,"line_start":514,"line_end":514,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15939,"byte_end":15942,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"/ fn read_with_timeout<S, T>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15943,"byte_end":15974,"line_start":516,"line_end":516,"column_start":1,"column_end":32}},{"value":"/     serial: &mut S,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15975,"byte_end":15998,"line_start":517,"line_end":517,"column_start":1,"column_end":24}},{"value":"/     timer: &mut T,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":15999,"byte_end":16021,"line_start":518,"line_end":518,"column_start":1,"column_end":23}},{"value":"/     timeout: T::Time,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16022,"byte_end":16047,"line_start":519,"line_end":519,"column_start":1,"column_end":26}},{"value":"/ ) -> Result<u8, Error<S::Error, T::Error>>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16048,"byte_end":16094,"line_start":520,"line_end":520,"column_start":1,"column_end":47}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16095,"byte_end":16104,"line_start":521,"line_end":521,"column_start":1,"column_end":10}},{"value":"/     T: hal::timer::CountDown<Error = ()>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16105,"byte_end":16150,"line_start":522,"line_end":522,"column_start":1,"column_end":46}},{"value":"/     S: hal::serial::Read<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16151,"byte_end":16184,"line_start":523,"line_end":523,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16185,"byte_end":16190,"line_start":524,"line_end":524,"column_start":1,"column_end":6}},{"value":"/     timer.try_start(timeout).map_err(Error::TimedOut)?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16191,"byte_end":16250,"line_start":525,"line_end":525,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16251,"byte_end":16254,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16255,"byte_end":16269,"line_start":527,"line_end":527,"column_start":1,"column_end":15}},{"value":"/         match serial.try_read() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16270,"byte_end":16307,"line_start":528,"line_end":528,"column_start":1,"column_end":38}},{"value":"/             // raise error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16308,"byte_end":16338,"line_start":529,"line_end":529,"column_start":1,"column_end":31}},{"value":"/             Err(nb::Error::Other(e)) => return Err(Error::Serial(e)),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16339,"byte_end":16412,"line_start":530,"line_end":530,"column_start":1,"column_end":74}},{"value":"/             Err(nb::Error::WouldBlock) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16413,"byte_end":16460,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/                 // no data available yet, check the timer below","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16461,"byte_end":16528,"line_start":532,"line_end":532,"column_start":1,"column_end":68}},{"value":"/             },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16529,"byte_end":16547,"line_start":533,"line_end":533,"column_start":1,"column_end":19}},{"value":"/             Ok(byte) => return Ok(byte),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16548,"byte_end":16592,"line_start":534,"line_end":534,"column_start":1,"column_end":45}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16593,"byte_end":16606,"line_start":535,"line_end":535,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16607,"byte_end":16610,"line_start":536,"line_end":536,"column_start":1,"column_end":4}},{"value":"/         match timer.try_wait() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16611,"byte_end":16647,"line_start":537,"line_end":537,"column_start":1,"column_end":37}},{"value":"/             Err(nb::Error::Other(e)) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16648,"byte_end":16693,"line_start":538,"line_end":538,"column_start":1,"column_end":46}},{"value":"/                 // The error type specified by `timer.try_wait()` is `!`, which","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16694,"byte_end":16777,"line_start":539,"line_end":539,"column_start":1,"column_end":84}},{"value":"/                 // means no error can actually occur. The Rust compiler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16778,"byte_end":16853,"line_start":540,"line_end":540,"column_start":1,"column_end":76}},{"value":"/                 // still forces us to provide this match arm, though.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16854,"byte_end":16927,"line_start":541,"line_end":541,"column_start":1,"column_end":74}},{"value":"/                 unreachable!()","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16928,"byte_end":16962,"line_start":542,"line_end":542,"column_start":1,"column_end":35}},{"value":"/             },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16963,"byte_end":16981,"line_start":543,"line_end":543,"column_start":1,"column_end":19}},{"value":"/             // no timeout yet, try again","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":16982,"byte_end":17026,"line_start":544,"line_end":544,"column_start":1,"column_end":45}},{"value":"/             Err(nb::Error::WouldBlock) => continue,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17027,"byte_end":17082,"line_start":545,"line_end":545,"column_start":1,"column_end":56}},{"value":"/             Ok(()) => return Err(Error::TimedOut(())),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17083,"byte_end":17141,"line_start":546,"line_end":546,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17142,"byte_end":17155,"line_start":547,"line_end":547,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17156,"byte_end":17165,"line_start":548,"line_end":548,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17166,"byte_end":17171,"line_start":549,"line_end":549,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17172,"byte_end":17175,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17176,"byte_end":17194,"line_start":551,"line_end":551,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17195,"byte_end":17202,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17203,"byte_end":17206,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ - Asynchronous SPI transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17207,"byte_end":17238,"line_start":554,"line_end":554,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17239,"byte_end":17242,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ ```not_run","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17243,"byte_end":17257,"line_start":556,"line_end":556,"column_start":1,"column_end":15}},{"value":"/ #![feature(conservative_impl_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17258,"byte_end":17298,"line_start":557,"line_end":557,"column_start":1,"column_end":41}},{"value":"/ #![feature(generators)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17299,"byte_end":17326,"line_start":558,"line_end":558,"column_start":1,"column_end":28}},{"value":"/ #![feature(generator_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17327,"byte_end":17359,"line_start":559,"line_end":559,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17360,"byte_end":17363,"line_start":560,"line_end":560,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17364,"byte_end":17401,"line_start":561,"line_end":561,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(r#await)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17402,"byte_end":17427,"line_start":562,"line_end":562,"column_start":1,"column_end":26}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17428,"byte_end":17448,"line_start":563,"line_end":563,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17449,"byte_end":17452,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ use core::ops::Generator;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17453,"byte_end":17482,"line_start":565,"line_end":565,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17483,"byte_end":17486,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ /// Transfers a byte buffer of size N","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17487,"byte_end":17528,"line_start":567,"line_end":567,"column_start":1,"column_end":42}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17529,"byte_end":17536,"line_start":568,"line_end":568,"column_start":1,"column_end":8}},{"value":"/ /// Returns the same byte buffer but filled with the data received from the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17537,"byte_end":17616,"line_start":569,"line_end":569,"column_start":1,"column_end":80}},{"value":"/ /// slave device","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17617,"byte_end":17637,"line_start":570,"line_end":570,"column_start":1,"column_end":21}},{"value":"/ fn transfer<S, B>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17638,"byte_end":17660,"line_start":571,"line_end":571,"column_start":1,"column_end":23}},{"value":"/     mut spi: S,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17661,"byte_end":17680,"line_start":572,"line_end":572,"column_start":1,"column_end":20}},{"value":"/     mut buffer: [u8; 16], // NOTE this should be generic over the size of the array","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17681,"byte_end":17768,"line_start":573,"line_end":573,"column_start":1,"column_end":88}},{"value":"/ ) -> impl Generator<Return = Result<(S, [u8; 16]), S::Error>, Yield = ()>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17769,"byte_end":17846,"line_start":574,"line_end":574,"column_start":1,"column_end":78}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17847,"byte_end":17856,"line_start":575,"line_end":575,"column_start":1,"column_end":10}},{"value":"/     S: hal::spi::FullDuplex<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17857,"byte_end":17893,"line_start":576,"line_end":576,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17894,"byte_end":17899,"line_start":577,"line_end":577,"column_start":1,"column_end":6}},{"value":"/     move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17900,"byte_end":17917,"line_start":578,"line_end":578,"column_start":1,"column_end":18}},{"value":"/         let n = buffer.len();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17918,"byte_end":17951,"line_start":579,"line_end":579,"column_start":1,"column_end":34}},{"value":"/         for i in 0..n {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17952,"byte_end":17979,"line_start":580,"line_end":580,"column_start":1,"column_end":28}},{"value":"/             nb::r#await!(spi.try_send(buffer[i]))?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":17980,"byte_end":18035,"line_start":581,"line_end":581,"column_start":1,"column_end":56}},{"value":"/             buffer[i] = nb::r#await!(spi.try_read())?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18036,"byte_end":18094,"line_start":582,"line_end":582,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18095,"byte_end":18108,"line_start":583,"line_end":583,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18109,"byte_end":18112,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/         Ok((spi, buffer))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18113,"byte_end":18142,"line_start":585,"line_end":585,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18143,"byte_end":18152,"line_start":586,"line_end":586,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18153,"byte_end":18158,"line_start":587,"line_end":587,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18159,"byte_end":18162,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18163,"byte_end":18181,"line_start":589,"line_end":589,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18182,"byte_end":18189,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18190,"byte_end":18193,"line_start":591,"line_end":591,"column_start":1,"column_end":4}},{"value":"/ - Buffered serial interface with periodic flushing in interrupt handler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18194,"byte_end":18269,"line_start":592,"line_end":592,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18270,"byte_end":18273,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18274,"byte_end":18281,"line_start":594,"line_end":594,"column_start":1,"column_end":8}},{"value":"/ # use std as core;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18282,"byte_end":18304,"line_start":595,"line_end":595,"column_start":1,"column_end":23}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18305,"byte_end":18342,"line_start":596,"line_end":596,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18343,"byte_end":18363,"line_start":597,"line_end":597,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18364,"byte_end":18367,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18368,"byte_end":18392,"line_start":599,"line_end":599,"column_start":1,"column_end":25}},{"value":"/ use ::core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18393,"byte_end":18429,"line_start":600,"line_end":600,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18430,"byte_end":18433,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ fn flush<S>(serial: &mut S, cb: &mut CircularBuffer)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18434,"byte_end":18490,"line_start":602,"line_end":602,"column_start":1,"column_end":57}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18491,"byte_end":18500,"line_start":603,"line_end":603,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8, Error = Infallible>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18501,"byte_end":18555,"line_start":604,"line_end":604,"column_start":1,"column_end":55}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18556,"byte_end":18561,"line_start":605,"line_end":605,"column_start":1,"column_end":6}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18562,"byte_end":18576,"line_start":606,"line_end":606,"column_start":1,"column_end":15}},{"value":"/         if let Some(byte) = cb.peek() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18577,"byte_end":18620,"line_start":607,"line_end":607,"column_start":1,"column_end":44}},{"value":"/             match serial.try_write(*byte) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18621,"byte_end":18668,"line_start":608,"line_end":608,"column_start":1,"column_end":48}},{"value":"/                 Err(nb::Error::Other(_)) => unreachable!(),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18669,"byte_end":18732,"line_start":609,"line_end":609,"column_start":1,"column_end":64}},{"value":"/                 Err(nb::Error::WouldBlock) => return,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18733,"byte_end":18790,"line_start":610,"line_end":610,"column_start":1,"column_end":58}},{"value":"/                 Ok(()) => {}, // keep flushing data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18791,"byte_end":18846,"line_start":611,"line_end":611,"column_start":1,"column_end":56}},{"value":"/             }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18847,"byte_end":18864,"line_start":612,"line_end":612,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18865,"byte_end":18878,"line_start":613,"line_end":613,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18879,"byte_end":18882,"line_start":614,"line_end":614,"column_start":1,"column_end":4}},{"value":"/         cb.pop();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18883,"byte_end":18904,"line_start":615,"line_end":615,"column_start":1,"column_end":22}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18905,"byte_end":18914,"line_start":616,"line_end":616,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18915,"byte_end":18920,"line_start":617,"line_end":617,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18921,"byte_end":18924,"line_start":618,"line_end":618,"column_start":1,"column_end":4}},{"value":"/ // The stuff below could be in some other crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18925,"byte_end":18976,"line_start":619,"line_end":619,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18977,"byte_end":18980,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ /// Global singleton","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":18981,"byte_end":19005,"line_start":621,"line_end":621,"column_start":1,"column_end":25}},{"value":"/ pub struct BufferedSerial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19006,"byte_end":19037,"line_start":622,"line_end":622,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19038,"byte_end":19041,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ // NOTE private","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19042,"byte_end":19061,"line_start":624,"line_end":624,"column_start":1,"column_end":20}},{"value":"/ static BUFFER1: Mutex<CircularBuffer> = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19062,"byte_end":19107,"line_start":625,"line_end":625,"column_start":1,"column_end":46}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19108,"byte_end":19121,"line_start":626,"line_end":626,"column_start":1,"column_end":14}},{"value":"/ #   Mutex(CircularBuffer)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19122,"byte_end":19151,"line_start":627,"line_end":627,"column_start":1,"column_end":30}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19152,"byte_end":19158,"line_start":628,"line_end":628,"column_start":1,"column_end":7}},{"value":"/ static SERIAL1: Mutex<Serial1> = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19159,"byte_end":19197,"line_start":629,"line_end":629,"column_start":1,"column_end":39}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19198,"byte_end":19211,"line_start":630,"line_end":630,"column_start":1,"column_end":14}},{"value":"/ #   Mutex(Serial1)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19212,"byte_end":19234,"line_start":631,"line_end":631,"column_start":1,"column_end":23}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19235,"byte_end":19241,"line_start":632,"line_end":632,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19242,"byte_end":19245,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ impl BufferedSerial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19246,"byte_end":19272,"line_start":634,"line_end":634,"column_start":1,"column_end":27}},{"value":"/     pub fn write(&self, byte: u8) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19273,"byte_end":19312,"line_start":635,"line_end":635,"column_start":1,"column_end":40}},{"value":"/         self.write_all(&[byte])","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19313,"byte_end":19348,"line_start":636,"line_end":636,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19349,"byte_end":19358,"line_start":637,"line_end":637,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19359,"byte_end":19362,"line_start":638,"line_end":638,"column_start":1,"column_end":4}},{"value":"/     pub fn write_all(&self, bytes: &[u8]) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19363,"byte_end":19410,"line_start":639,"line_end":639,"column_start":1,"column_end":48}},{"value":"/         let mut buffer = BUFFER1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19411,"byte_end":19455,"line_start":640,"line_end":640,"column_start":1,"column_end":45}},{"value":"/         for byte in bytes {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19456,"byte_end":19487,"line_start":641,"line_end":641,"column_start":1,"column_end":32}},{"value":"/             buffer.push(*byte).expect(\"buffer overrun\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19488,"byte_end":19548,"line_start":642,"line_end":642,"column_start":1,"column_end":61}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19549,"byte_end":19562,"line_start":643,"line_end":643,"column_start":1,"column_end":14}},{"value":"/         // omitted: pend / enable interrupt_handler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19563,"byte_end":19618,"line_start":644,"line_end":644,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19619,"byte_end":19628,"line_start":645,"line_end":645,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19629,"byte_end":19634,"line_start":646,"line_end":646,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19635,"byte_end":19638,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19639,"byte_end":19667,"line_start":648,"line_end":648,"column_start":1,"column_end":29}},{"value":"/     let mut serial = SERIAL1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19668,"byte_end":19708,"line_start":649,"line_end":649,"column_start":1,"column_end":41}},{"value":"/     let mut buffer = BUFFER1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19709,"byte_end":19749,"line_start":650,"line_end":650,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19750,"byte_end":19753,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/     flush(&mut *serial, &mut buffer);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19754,"byte_end":19795,"line_start":652,"line_end":652,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19796,"byte_end":19801,"line_start":653,"line_end":653,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19802,"byte_end":19805,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ # struct Mutex<T>(T);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19806,"byte_end":19831,"line_start":655,"line_end":655,"column_start":1,"column_end":26}},{"value":"/ # impl<T> Mutex<T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19832,"byte_end":19856,"line_start":656,"line_end":656,"column_start":1,"column_end":25}},{"value":"/ #     fn lock(&self) -> RefMut<T> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19857,"byte_end":19915,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19916,"byte_end":19923,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # struct RefMut<'a, T>(&'a mut T) where T: 'a;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19924,"byte_end":19974,"line_start":659,"line_end":659,"column_start":1,"column_end":51}},{"value":"/ # impl<'a, T> ::core::ops::Deref for RefMut<'a, T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":19975,"byte_end":20031,"line_start":660,"line_end":660,"column_start":1,"column_end":57}},{"value":"/ #     type Target = T;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20032,"byte_end":20058,"line_start":661,"line_end":661,"column_start":1,"column_end":27}},{"value":"/ #     fn deref(&self) -> &T { self.0 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20059,"byte_end":20101,"line_start":662,"line_end":662,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20102,"byte_end":20109,"line_start":663,"line_end":663,"column_start":1,"column_end":8}},{"value":"/ # impl<'a, T> ::core::ops::DerefMut for RefMut<'a, T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20110,"byte_end":20169,"line_start":664,"line_end":664,"column_start":1,"column_end":60}},{"value":"/ #     fn deref_mut(&mut self) -> &mut T { self.0 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20170,"byte_end":20224,"line_start":665,"line_end":665,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20225,"byte_end":20232,"line_start":666,"line_end":666,"column_start":1,"column_end":8}},{"value":"/ # struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20233,"byte_end":20254,"line_start":667,"line_end":667,"column_start":1,"column_end":22}},{"value":"/ # impl ::hal::serial::Write<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20255,"byte_end":20304,"line_start":668,"line_end":668,"column_start":1,"column_end":50}},{"value":"/ #   type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20305,"byte_end":20337,"line_start":669,"line_end":669,"column_start":1,"column_end":33}},{"value":"/ #   fn try_write(&mut self, _: u8) -> nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20338,"byte_end":20439,"line_start":670,"line_end":670,"column_start":1,"column_end":102}},{"value":"/ #   fn try_flush(&mut self) -> nb::Result<(), Infallible> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20440,"byte_end":20534,"line_start":671,"line_end":671,"column_start":1,"column_end":95}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20535,"byte_end":20542,"line_start":672,"line_end":672,"column_start":1,"column_end":8}},{"value":"/ # struct CircularBuffer;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20543,"byte_end":20571,"line_start":673,"line_end":673,"column_start":1,"column_end":29}},{"value":"/ # impl CircularBuffer {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20572,"byte_end":20599,"line_start":674,"line_end":674,"column_start":1,"column_end":28}},{"value":"/ #   pub fn peek(&mut self) -> Option<&u8> { None }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20600,"byte_end":20654,"line_start":675,"line_end":675,"column_start":1,"column_end":55}},{"value":"/ #   pub fn pop(&mut self) -> Option<u8> { None }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20655,"byte_end":20707,"line_start":676,"line_end":676,"column_start":1,"column_end":53}},{"value":"/ #   pub fn push(&mut self, _: u8) -> Result<(), ()> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20708,"byte_end":20774,"line_start":677,"line_end":677,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20775,"byte_end":20782,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20783,"byte_end":20786,"line_start":679,"line_end":679,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20787,"byte_end":20805,"line_start":680,"line_end":680,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20806,"byte_end":20813,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20815,"byte_end":20837,"line_start":683,"line_end":683,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20838,"byte_end":20848,"line_start":684,"line_end":684,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adc","qualname":"::adc","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":13}],"decl_id":null,"docs":" Analog-digital conversion traits\n","sig":null,"attributes":[{"value":"/ Analog-digital conversion traits","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21078,"byte_end":21114,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22560,"byte_end":22567,"line_start":37,"line_end":37,"column_start":11,"column_end":18},"name":"Channel","qualname":"::adc::Channel","value":"Channel<ADC>","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12}],"decl_id":null,"docs":" A marker trait to identify MCU pins that can be used as inputs to an ADC channel.","sig":null,"attributes":[{"value":"/ A marker trait to identify MCU pins that can be used as inputs to an ADC channel.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21125,"byte_end":21210,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21211,"byte_end":21214,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This marker trait denotes an object, i.e. a GPIO pin, that is ready for use as an input to the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21215,"byte_end":21313,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ ADC. As ADCs channels can be supplied by multiple pins, this trait defines the relationship","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21314,"byte_end":21409,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"/ between the physical interface and the ADC sampling buffer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21410,"byte_end":21473,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21474,"byte_end":21477,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21478,"byte_end":21485,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # use core::marker::PhantomData;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21486,"byte_end":21522,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/ # use embedded_hal::adc::Channel;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21523,"byte_end":21560,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21561,"byte_end":21564,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ struct Adc1; // Example ADC with single bank of 8 channels","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21565,"byte_end":21627,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/ struct Gpio1Pin1<MODE>(PhantomData<MODE>);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21628,"byte_end":21674,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/ struct Analog(()); // marker type to denote a pin in \"analog\" mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21675,"byte_end":21745,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21746,"byte_end":21749,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // GPIO 1 pin 1 can supply an ADC channel when it is configured in Analog mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21750,"byte_end":21832,"line_start":19,"line_end":19,"column_start":1,"column_end":83}},{"value":"/ impl Channel<Adc1> for Gpio1Pin1<Analog> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21833,"byte_end":21879,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/     type ID = u8; // ADC channels are identified numerically","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21880,"byte_end":21944,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21945,"byte_end":21948,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/     const CHANNEL: u8 = 7_u8; // GPIO pin 1 is connected to ADC channel 7","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":21949,"byte_end":22026,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22027,"byte_end":22032,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22033,"byte_end":22036,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ struct Adc2; // ADC with two banks of 16 channels","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22037,"byte_end":22090,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ struct Gpio2PinA<MODE>(PhantomData<MODE>);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22091,"byte_end":22137,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ struct AltFun(()); // marker type to denote some alternate function mode for the pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22138,"byte_end":22226,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22227,"byte_end":22230,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // GPIO 2 pin A can supply an ADC channel when it's configured in some alternate function mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22231,"byte_end":22329,"line_start":30,"line_end":30,"column_start":1,"column_end":99}},{"value":"/ impl Channel<Adc2> for Gpio2PinA<AltFun> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22330,"byte_end":22376,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/     type ID = (u8, u8); // ADC channels are identified by bank number and channel number","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22377,"byte_end":22469,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22470,"byte_end":22473,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     const CHANNEL: (u8, u8) = (0, 3); // bank 0 channel 3","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22474,"byte_end":22535,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22536,"byte_end":22541,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22542,"byte_end":22549,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22850,"byte_end":22852,"line_start":43,"line_end":43,"column_start":10,"column_end":12},"name":"ID","qualname":"::adc::Channel::ID","value":"type ID: Copy;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Channel ID type","sig":null,"attributes":[{"value":"/ Channel ID type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22579,"byte_end":22598,"line_start":38,"line_end":38,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22603,"byte_end":22606,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ A type used to identify this ADC channel. For example, if the ADC has eight channels, this","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22611,"byte_end":22705,"line_start":40,"line_end":40,"column_start":5,"column_end":99}},{"value":"/ might be a `u8`. If the ADC has multiple banks of channels, it could be a tuple, like","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22710,"byte_end":22799,"line_start":41,"line_end":41,"column_start":5,"column_end":94}},{"value":"/ `(u8: bank_id, u8: channel_id)`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22804,"byte_end":22840,"line_start":42,"line_end":42,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23002,"byte_end":23009,"line_start":47,"line_end":47,"column_start":11,"column_end":18},"name":"CHANNEL","qualname":"::adc::Channel::CHANNEL","value":"Self::ID","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Get the specific ID that identifies this channel, for example `0_u8` for the first ADC\n channel, if Self::ID is u8.\n","sig":null,"attributes":[{"value":"/ Get the specific ID that identifies this channel, for example `0_u8` for the first ADC","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22865,"byte_end":22955,"line_start":45,"line_end":45,"column_start":5,"column_end":95}},{"value":"/ channel, if Self::ID is u8.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":22960,"byte_end":22991,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24039,"byte_end":24046,"line_start":81,"line_end":81,"column_start":11,"column_end":18},"name":"OneShot","qualname":"::adc::OneShot","value":"OneShot<ADC, Word, Pin: Channel<ADC>>","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18}],"decl_id":null,"docs":" ADCs that sample on single channels per request, and do so at the time of the request.","sig":null,"attributes":[{"value":"/ ADCs that sample on single channels per request, and do so at the time of the request.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23024,"byte_end":23114,"line_start":50,"line_end":50,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23115,"byte_end":23118,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This trait is the interface to an ADC that is configured to read a specific channel at the time","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23119,"byte_end":23218,"line_start":52,"line_end":52,"column_start":1,"column_end":100}},{"value":"/ of the request (in contrast to continuous asynchronous sampling).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23219,"byte_end":23288,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23289,"byte_end":23292,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23293,"byte_end":23300,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use embedded_hal::adc::{Channel, OneShot};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23301,"byte_end":23347,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23348,"byte_end":23351,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ struct MyAdc; // 10-bit ADC, with 5 channels","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23352,"byte_end":23400,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/ # impl MyAdc {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23401,"byte_end":23419,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/ #     pub fn power_up(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23420,"byte_end":23459,"line_start":60,"line_end":60,"column_start":1,"column_end":40}},{"value":"/ #     pub fn power_down(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23460,"byte_end":23501,"line_start":61,"line_end":61,"column_start":1,"column_end":42}},{"value":"/ #     pub fn do_conversion(&mut self, chan: u8) -> u16 { 0xAA55_u16 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23502,"byte_end":23575,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23576,"byte_end":23583,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23584,"byte_end":23587,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ impl<WORD, PIN> OneShot<MyAdc, WORD, PIN> for MyAdc","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23588,"byte_end":23643,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23644,"byte_end":23653,"line_start":66,"line_end":66,"column_start":1,"column_end":10}},{"value":"/    WORD: From<u16>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23654,"byte_end":23677,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/    PIN: Channel<MyAdc, ID=u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23678,"byte_end":23712,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23713,"byte_end":23718,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/    type Error = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23719,"byte_end":23742,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23743,"byte_end":23746,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/    fn try_read(&mut self, _pin: &mut PIN) -> nb::Result<WORD, Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23747,"byte_end":23827,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/        let chan = 1 << PIN::CHANNEL;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23828,"byte_end":23868,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/        self.power_up();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23869,"byte_end":23896,"line_start":74,"line_end":74,"column_start":1,"column_end":28}},{"value":"/        let result = self.do_conversion(chan);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23897,"byte_end":23946,"line_start":75,"line_end":75,"column_start":1,"column_end":50}},{"value":"/        self.power_down();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23947,"byte_end":23976,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/        Ok(result.into())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":23977,"byte_end":24005,"line_start":77,"line_end":77,"column_start":1,"column_end":29}},{"value":"/    }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24006,"byte_end":24014,"line_start":78,"line_end":78,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24015,"byte_end":24020,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24021,"byte_end":24028,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24131,"byte_end":24136,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Error","qualname":"::adc::OneShot::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Error type returned by ADC methods\n","sig":null,"attributes":[{"value":"/ Error type returned by ADC methods","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24083,"byte_end":24121,"line_start":82,"line_end":82,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24366,"byte_end":24374,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"try_read","qualname":"::adc::OneShot::try_read","value":"pub fn try_read(&mut Self, &mut Pin) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Request that the ADC begin a conversion on the specified pin","sig":null,"attributes":[{"value":"/ Request that the ADC begin a conversion on the specified pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24143,"byte_end":24207,"line_start":85,"line_end":85,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24212,"byte_end":24215,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This method takes a `Pin` reference, as it is expected that the ADC will be able to sample","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24220,"byte_end":24314,"line_start":87,"line_end":87,"column_start":5,"column_end":99}},{"value":"/ whatever channel underlies the pin.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/adc.rs","byte_start":24319,"byte_end":24358,"line_start":88,"line_end":88,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blocking","qualname":"::blocking","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":29},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":66}],"decl_id":null,"docs":" Blocking API","sig":null,"attributes":[{"value":"/ Blocking API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24438,"byte_end":24454,"line_start":1,"line_end":1,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24455,"byte_end":24458,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ In some cases it's possible to implement these blocking traits on top of one of the core HAL","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24459,"byte_end":24555,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ traits. To save boilerplate when that's the case a `Default` marker trait may be provided.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24556,"byte_end":24650,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ Implementing that marker trait will opt in your type into a blanket implementation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24651,"byte_end":24738,"line_start":5,"line_end":5,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"delay","qualname":"::blocking::delay","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":25}],"decl_id":null,"docs":" Delays","sig":null,"attributes":[{"value":"/ Delays","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":24811,"byte_end":24821,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":24822,"byte_end":24825,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # What's the difference between these traits and the `timer::CountDown` trait?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":24826,"byte_end":24908,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":24909,"byte_end":24912,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The `Timer` trait provides a *non-blocking* timer abstraction and it's meant to be used to build","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":24913,"byte_end":25013,"line_start":5,"line_end":5,"column_start":1,"column_end":101}},{"value":"/ higher level abstractions like I/O operations with timeouts. OTOH, these delays traits only","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25014,"byte_end":25109,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ provide *blocking* functionality. Note that you can also use the `timer::CountDown` trait to","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25110,"byte_end":25206,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ implement blocking delays.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25207,"byte_end":25237,"line_start":8,"line_end":8,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25431,"byte_end":25438,"line_start":14,"line_end":14,"column_start":11,"column_end":18},"name":"DelayMs","qualname":"::blocking::delay::DelayMs","value":"DelayMs<UXX>","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Millisecond delay","sig":null,"attributes":[{"value":"/ Millisecond delay","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25239,"byte_end":25260,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25261,"byte_end":25264,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ `UXX` denotes the range type of the delay time. `UXX` can be `u8`, `u16`, etc. A single type can","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25265,"byte_end":25365,"line_start":12,"line_end":12,"column_start":1,"column_end":101}},{"value":"/ implement this trait for different types of `UXX`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25366,"byte_end":25420,"line_start":13,"line_end":13,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":23},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25495,"byte_end":25500,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::delay::DelayMs::Error","value":"type Error;","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Enumeration of `DelayMs` errors\n","sig":null,"attributes":[{"value":"/ Enumeration of `DelayMs` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25450,"byte_end":25485,"line_start":15,"line_end":15,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25557,"byte_end":25569,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"try_delay_ms","qualname":"::blocking::delay::DelayMs::try_delay_ms","value":"pub fn try_delay_ms(&mut Self, UXX) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Pauses execution for `ms` milliseconds\n","sig":null,"attributes":[{"value":"/ Pauses execution for `ms` milliseconds","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25507,"byte_end":25549,"line_start":18,"line_end":18,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25813,"byte_end":25820,"line_start":26,"line_end":26,"column_start":11,"column_end":18},"name":"DelayUs","qualname":"::blocking::delay::DelayUs","value":"DelayUs<UXX>","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"decl_id":null,"docs":" Microsecond delay","sig":null,"attributes":[{"value":"/ Microsecond delay","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25621,"byte_end":25642,"line_start":22,"line_end":22,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25643,"byte_end":25646,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `UXX` denotes the range type of the delay time. `UXX` can be `u8`, `u16`, etc. A single type can","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25647,"byte_end":25747,"line_start":24,"line_end":24,"column_start":1,"column_end":101}},{"value":"/ implement this trait for different types of `UXX`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25748,"byte_end":25802,"line_start":25,"line_end":25,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25877,"byte_end":25882,"line_start":28,"line_end":28,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::delay::DelayUs::Error","value":"type Error;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Enumeration of `DelayMs` errors\n","sig":null,"attributes":[{"value":"/ Enumeration of `DelayMs` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25832,"byte_end":25867,"line_start":27,"line_end":27,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25939,"byte_end":25951,"line_start":31,"line_end":31,"column_start":8,"column_end":20},"name":"try_delay_us","qualname":"::blocking::delay::DelayUs::try_delay_us","value":"pub fn try_delay_us(&mut Self, UXX) -> Result<(), Self::Error>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Pauses execution for `us` microseconds\n","sig":null,"attributes":[{"value":"/ Pauses execution for `us` microseconds","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/delay.rs","byte_start":25889,"byte_end":25931,"line_start":30,"line_end":30,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i2c","qualname":"::blocking::i2c","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":43}],"decl_id":null,"docs":" Blocking I2C API","sig":null,"attributes":[{"value":"/ Blocking I2C API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26003,"byte_end":26023,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26024,"byte_end":26027,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Slave addresses used by this API are 7-bit I2C addresses ranging from 0 to 127.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26028,"byte_end":26111,"line_start":3,"line_end":3,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26112,"byte_end":26115,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Operations on 10-bit slave addresses are not supported by the API yet (but applications might","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26116,"byte_end":26213,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ be able to emulate some operations).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26214,"byte_end":26254,"line_start":6,"line_end":6,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26284,"byte_end":26288,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::i2c::Read","value":"Read","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Blocking read\n","sig":null,"attributes":[{"value":"/ Blocking read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26256,"byte_end":26273,"line_start":8,"line_end":8,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26319,"byte_end":26324,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Read::Error","value":"type Error;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26295,"byte_end":26309,"line_start":10,"line_end":10,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26904,"byte_end":26912,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"try_read","qualname":"::blocking::i2c::Read::try_read","value":"pub fn try_read(&mut Self, u8, &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Reads enough bytes from slave with `address` to fill `buffer`","sig":null,"attributes":[{"value":"/ Reads enough bytes from slave with `address` to fill `buffer`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26331,"byte_end":26396,"line_start":13,"line_end":13,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26401,"byte_end":26404,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26409,"byte_end":26436,"line_start":15,"line_end":15,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26441,"byte_end":26444,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26449,"byte_end":26461,"line_start":17,"line_end":17,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+R        MAK    MAK ...    NMAK SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26466,"byte_end":26519,"line_start":18,"line_end":18,"column_start":5,"column_end":58}},{"value":"/ Slave:           SAK B0     B1     ... BN","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26524,"byte_end":26569,"line_start":19,"line_end":19,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26574,"byte_end":26581,"line_start":20,"line_end":20,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26586,"byte_end":26589,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26594,"byte_end":26603,"line_start":22,"line_end":22,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26608,"byte_end":26611,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26616,"byte_end":26644,"line_start":24,"line_end":24,"column_start":5,"column_end":33}},{"value":"/ - `SAD+R` = slave address followed by bit 1 to indicate reading","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26649,"byte_end":26716,"line_start":25,"line_end":25,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26721,"byte_end":26752,"line_start":26,"line_end":26,"column_start":5,"column_end":36}},{"value":"/ - `Bi` = ith byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26757,"byte_end":26786,"line_start":27,"line_end":27,"column_start":5,"column_end":34}},{"value":"/ - `MAK` = master acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26791,"byte_end":26823,"line_start":28,"line_end":28,"column_start":5,"column_end":37}},{"value":"/ - `NMAK` = master no acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26828,"byte_end":26864,"line_start":29,"line_end":29,"column_start":5,"column_end":41}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26869,"byte_end":26896,"line_start":30,"line_end":30,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27016,"byte_end":27021,"line_start":35,"line_end":35,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::i2c::Write","value":"Write","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":26987,"byte_end":27005,"line_start":34,"line_end":34,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27052,"byte_end":27057,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Write::Error","value":"type Error;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27028,"byte_end":27042,"line_start":36,"line_end":36,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27541,"byte_end":27550,"line_start":55,"line_end":55,"column_start":8,"column_end":17},"name":"try_write","qualname":"::blocking::i2c::Write::try_write","value":"pub fn try_write(&mut Self, u8, &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr`","sig":null,"attributes":[{"value":"/ Sends bytes to slave with address `addr`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27064,"byte_end":27108,"line_start":39,"line_end":39,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27113,"byte_end":27116,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27121,"byte_end":27148,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27153,"byte_end":27156,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27161,"byte_end":27173,"line_start":43,"line_end":43,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+W     B0     B1     ... BN     SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27178,"byte_end":27230,"line_start":44,"line_end":44,"column_start":5,"column_end":57}},{"value":"/ Slave:           SAK    SAK    SAK ...    SAK","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27235,"byte_end":27284,"line_start":45,"line_end":45,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27289,"byte_end":27296,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27301,"byte_end":27304,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27309,"byte_end":27318,"line_start":48,"line_end":48,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27323,"byte_end":27326,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27331,"byte_end":27359,"line_start":50,"line_end":50,"column_start":5,"column_end":33}},{"value":"/ - `SAD+W` = slave address followed by bit 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27364,"byte_end":27431,"line_start":51,"line_end":51,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27436,"byte_end":27467,"line_start":52,"line_end":52,"column_start":5,"column_end":36}},{"value":"/ - `Bi` = ith byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27472,"byte_end":27501,"line_start":53,"line_end":53,"column_start":5,"column_end":34}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27506,"byte_end":27533,"line_start":54,"line_end":54,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27665,"byte_end":27674,"line_start":59,"line_end":59,"column_start":11,"column_end":20},"name":"WriteIter","qualname":"::blocking::i2c::WriteIter","value":"WriteIter","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27617,"byte_end":27654,"line_start":58,"line_end":58,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27705,"byte_end":27710,"line_start":61,"line_end":61,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIter::Error","value":"type Error;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27681,"byte_end":27695,"line_start":60,"line_end":60,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27841,"byte_end":27850,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"try_write","qualname":"::blocking::i2c::WriteIter::try_write","value":"pub fn try_write<B>(&mut Self, u8, B) -> Result<(), Self::Error> where\nB: IntoIterator<Item = u8>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr`","sig":null,"attributes":[{"value":"/ Sends bytes to slave with address `addr`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27717,"byte_end":27761,"line_start":63,"line_end":63,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27766,"byte_end":27769,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27774,"byte_end":27801,"line_start":65,"line_end":65,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27806,"byte_end":27809,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Same as `Write`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27814,"byte_end":27833,"line_start":67,"line_end":67,"column_start":5,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27997,"byte_end":28006,"line_start":74,"line_end":74,"column_start":11,"column_end":20},"name":"WriteRead","qualname":"::blocking::i2c::WriteRead","value":"WriteRead","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"decl_id":null,"docs":" Blocking write + read\n","sig":null,"attributes":[{"value":"/ Blocking write + read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":27961,"byte_end":27986,"line_start":73,"line_end":73,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28037,"byte_end":28042,"line_start":76,"line_end":76,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteRead::Error","value":"type Error;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28013,"byte_end":28027,"line_start":75,"line_end":75,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28922,"byte_end":28936,"line_start":100,"line_end":100,"column_start":8,"column_end":22},"name":"try_write_read","qualname":"::blocking::i2c::WriteRead::try_write_read","value":"pub fn try_write_read(&mut Self, u8, &[u8], &mut [u8])\n-> Result<(), Self::Error>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[{"value":"/ Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28049,"byte_end":28144,"line_start":78,"line_end":78,"column_start":5,"column_end":100}},{"value":"/ single transaction*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28149,"byte_end":28172,"line_start":79,"line_end":79,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28177,"byte_end":28180,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28185,"byte_end":28212,"line_start":81,"line_end":81,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28217,"byte_end":28220,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28225,"byte_end":28237,"line_start":83,"line_end":83,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+W     O0     O1     ... OM     SR SAD+R        MAK    MAK ...    NMAK SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28242,"byte_end":28333,"line_start":84,"line_end":84,"column_start":5,"column_end":96}},{"value":"/ Slave:           SAK    SAK    SAK ...    SAK          SAK I0     I1     ... IN","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28338,"byte_end":28421,"line_start":85,"line_end":85,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28426,"byte_end":28433,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28438,"byte_end":28441,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28446,"byte_end":28455,"line_start":88,"line_end":88,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28460,"byte_end":28463,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28468,"byte_end":28496,"line_start":90,"line_end":90,"column_start":5,"column_end":33}},{"value":"/ - `SAD+W` = slave address followed by bit 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28501,"byte_end":28568,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28573,"byte_end":28604,"line_start":92,"line_end":92,"column_start":5,"column_end":36}},{"value":"/ - `Oi` = ith outgoing byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28609,"byte_end":28647,"line_start":93,"line_end":93,"column_start":5,"column_end":43}},{"value":"/ - `SR` = repeated start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28652,"byte_end":28689,"line_start":94,"line_end":94,"column_start":5,"column_end":42}},{"value":"/ - `SAD+R` = slave address followed by bit 1 to indicate reading","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28694,"byte_end":28761,"line_start":95,"line_end":95,"column_start":5,"column_end":72}},{"value":"/ - `Ii` = ith incoming byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28766,"byte_end":28804,"line_start":96,"line_end":96,"column_start":5,"column_end":43}},{"value":"/ - `MAK` = master acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28809,"byte_end":28841,"line_start":97,"line_end":97,"column_start":5,"column_end":37}},{"value":"/ - `NMAK` = master no acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28846,"byte_end":28882,"line_start":98,"line_end":98,"column_start":5,"column_end":41}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":28887,"byte_end":28914,"line_start":99,"line_end":99,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29119,"byte_end":29132,"line_start":109,"line_end":109,"column_start":11,"column_end":24},"name":"WriteIterRead","qualname":"::blocking::i2c::WriteIterRead","value":"WriteIterRead","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"decl_id":null,"docs":" Blocking write (iterator version) + read\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version) + read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29064,"byte_end":29108,"line_start":108,"line_end":108,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29163,"byte_end":29168,"line_start":111,"line_end":111,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIterRead::Error","value":"type Error;","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29139,"byte_end":29153,"line_start":110,"line_end":110,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29392,"byte_end":29411,"line_start":119,"line_end":119,"column_start":8,"column_end":27},"name":"try_write_iter_read","qualname":"::blocking::i2c::WriteIterRead::try_write_iter_read","value":"pub fn try_write_iter_read<B>(&mut Self, u8, B, &mut [u8])\n-> Result<(), Self::Error> where B: IntoIterator<Item = u8>","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[{"value":"/ Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29175,"byte_end":29270,"line_start":113,"line_end":113,"column_start":5,"column_end":100}},{"value":"/ single transaction*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29275,"byte_end":29298,"line_start":114,"line_end":114,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29303,"byte_end":29306,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29311,"byte_end":29338,"line_start":116,"line_end":116,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29343,"byte_end":29346,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Same as the `WriteRead` trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/i2c.rs","byte_start":29351,"byte_end":29384,"line_start":118,"line_end":118,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rng","qualname":"::blocking::rng","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","parent":null,"children":[{"krate":0,"index":48}],"decl_id":null,"docs":" Blocking hardware random number generator\n","sig":null,"attributes":[{"value":"/ Blocking hardware random number generator","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29583,"byte_end":29628,"line_start":1,"line_end":1,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":48},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29658,"byte_end":29662,"line_start":4,"line_end":4,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::rng::Read","value":"Read","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Blocking read\n","sig":null,"attributes":[{"value":"/ Blocking read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29630,"byte_end":29647,"line_start":3,"line_end":3,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29693,"byte_end":29698,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::rng::Read::Error","value":"type Error;","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29669,"byte_end":29683,"line_start":5,"line_end":5,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":30120,"byte_end":30128,"line_start":15,"line_end":15,"column_start":8,"column_end":16},"name":"try_read","qualname":"::blocking::rng::Read::try_read","value":"pub fn try_read(&mut Self, &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Reads enough bytes from hardware random number generator to fill `buffer`","sig":null,"attributes":[{"value":"/ Reads enough bytes from hardware random number generator to fill `buffer`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29705,"byte_end":29782,"line_start":8,"line_end":8,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29787,"byte_end":29790,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ If any error is encountered then this function immediately returns. The contents of buf are","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29795,"byte_end":29890,"line_start":10,"line_end":10,"column_start":5,"column_end":100}},{"value":"/ unspecified in this case.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29895,"byte_end":29924,"line_start":11,"line_end":11,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29929,"byte_end":29932,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ If this function returns an error, it is unspecified how many bytes it has read, but it","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":29937,"byte_end":30028,"line_start":13,"line_end":13,"column_start":5,"column_end":96}},{"value":"/ will never read more than would be necessary to completely fill the buffer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/rng.rs","byte_start":30033,"byte_end":30112,"line_start":14,"line_end":14,"column_start":5,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::blocking::serial","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":57}],"decl_id":null,"docs":" Blocking serial API\n","sig":null,"attributes":[{"value":"/ Blocking serial API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30190,"byte_end":30213,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30281,"byte_end":30286,"line_start":4,"line_end":4,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" Write half of a serial interface (blocking variant)\n","sig":null,"attributes":[{"value":"/ Write half of a serial interface (blocking variant)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30215,"byte_end":30270,"line_start":3,"line_end":3,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":54},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30358,"byte_end":30363,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The type of error that can occur when writing\n","sig":null,"attributes":[{"value":"/ The type of error that can occur when writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30299,"byte_end":30348,"line_start":5,"line_end":5,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30808,"byte_end":30822,"line_start":16,"line_end":16,"column_start":8,"column_end":22},"name":"try_bwrite_all","qualname":"::blocking::serial::Write::try_bwrite_all","value":"pub fn try_bwrite_all(&mut Self, &[Word]) -> Result<(), Self::Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Writes a slice, blocking until everything has been written","sig":null,"attributes":[{"value":"/ Writes a slice, blocking until everything has been written","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30370,"byte_end":30432,"line_start":8,"line_end":8,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30437,"byte_end":30440,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ An implementation can choose to buffer the write, returning `Ok(())`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30445,"byte_end":30517,"line_start":10,"line_end":10,"column_start":5,"column_end":77}},{"value":"/ after the complete slice has been written to a buffer, but before all","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30522,"byte_end":30595,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ words have been sent via the serial interface. To make sure that","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30600,"byte_end":30668,"line_start":12,"line_end":12,"column_start":5,"column_end":73}},{"value":"/ everything has been sent, call [`try_bflush`] after this function returns.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30673,"byte_end":30751,"line_start":13,"line_end":13,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30756,"byte_end":30759,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ [`try_bflush`]: #tymethod.bflush","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30764,"byte_end":30800,"line_start":15,"line_end":15,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30956,"byte_end":30966,"line_start":19,"line_end":19,"column_start":8,"column_end":18},"name":"try_bflush","qualname":"::blocking::serial::Write::try_bflush","value":"pub fn try_bflush(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Block until the serial interface has sent all buffered words\n","sig":null,"attributes":[{"value":"/ Block until the serial interface has sent all buffered words","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":30884,"byte_end":30948,"line_start":18,"line_end":18,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31043,"byte_end":31048,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::serial::write","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" Blocking serial write\n","sig":null,"attributes":[{"value":"/ Blocking serial write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31009,"byte_end":31034,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31480,"byte_end":31487,"line_start":32,"line_end":32,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::serial::write::Default","value":"Default<Word>: crate::serial::Write<Word>","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to opt into default blocking write implementation","sig":null,"attributes":[{"value":"/ Marker trait to opt into default blocking write implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31055,"byte_end":31121,"line_start":24,"line_end":24,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31126,"byte_end":31129,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Implementers of [`serial::Write`] can implement this marker trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31134,"byte_end":31203,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ for their type. Doing so will automatically provide the default","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31208,"byte_end":31275,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ implementation of [`blocking::serial::Write`] for the type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31280,"byte_end":31343,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31348,"byte_end":31351,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ [`serial::Write`]: ../../serial/trait.Write.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31356,"byte_end":31408,"line_start":30,"line_end":30,"column_start":5,"column_end":57}},{"value":"/ [`blocking::serial::Write`]: ../trait.Write.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31413,"byte_end":31465,"line_start":31,"line_end":31,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::blocking::spi","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":81},{"krate":0,"index":90},{"krate":0,"index":98}],"decl_id":null,"docs":" Blocking SPI API\n","sig":null,"attributes":[{"value":"/ Blocking SPI API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32037,"byte_end":32057,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32091,"byte_end":32099,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::blocking::spi::Transfer","value":"Transfer<W>","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[{"value":"/ Blocking transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32059,"byte_end":32080,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32133,"byte_end":32138,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Transfer::Error","value":"type Error;","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32109,"byte_end":32123,"line_start":5,"line_end":5,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32228,"byte_end":32240,"line_start":9,"line_end":9,"column_start":8,"column_end":20},"name":"try_transfer","qualname":"::blocking::spi::Transfer::try_transfer","value":"pub fn try_transfer<'w>(&mut Self, &'w mut [W])\n-> Result<&'w [W], Self::Error>","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Sends `words` to the slave. Returns the `words` received from the slave\n","sig":null,"attributes":[{"value":"/ Sends `words` to the slave. Returns the `words` received from the slave","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32145,"byte_end":32220,"line_start":8,"line_end":8,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32341,"byte_end":32346,"line_start":13,"line_end":13,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::spi::Write","value":"Write<W>","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32312,"byte_end":32330,"line_start":12,"line_end":12,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":74},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32380,"byte_end":32385,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Write::Error","value":"type Error;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32356,"byte_end":32370,"line_start":14,"line_end":14,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32463,"byte_end":32472,"line_start":18,"line_end":18,"column_start":8,"column_end":17},"name":"try_write","qualname":"::blocking::spi::Write::try_write","value":"pub fn try_write(&mut Self, &[W]) -> Result<(), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[{"value":"/ Sends `words` to the slave, ignoring all the incoming words","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32392,"byte_end":32455,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32576,"byte_end":32585,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"WriteIter","qualname":"::blocking::spi::WriteIter","value":"WriteIter<W>","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32528,"byte_end":32565,"line_start":21,"line_end":21,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":78},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32619,"byte_end":32624,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::WriteIter::Error","value":"type Error;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32595,"byte_end":32609,"line_start":23,"line_end":23,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32702,"byte_end":32716,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"try_write_iter","qualname":"::blocking::spi::WriteIter::try_write_iter","value":"pub fn try_write_iter<WI>(&mut Self, WI) -> Result<(), Self::Error> where\nWI: IntoIterator<Item = W>","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[{"value":"/ Sends `words` to the slave, ignoring all the incoming words","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32631,"byte_end":32694,"line_start":26,"line_end":26,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":81},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32849,"byte_end":32857,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"name":"transfer","qualname":"::blocking::spi::transfer","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[{"value":"/ Blocking transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32819,"byte_end":32840,"line_start":32,"line_end":32,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32986,"byte_end":32993,"line_start":36,"line_end":36,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::transfer::Default","value":"Default<W>: crate::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Transfer<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[{"value":"/ Default implementation of `blocking::spi::Transfer<W>` for implementers of","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32864,"byte_end":32942,"line_start":34,"line_end":34,"column_start":5,"column_end":83}},{"value":"/ `spi::FullDuplex<W>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":32947,"byte_end":32971,"line_start":35,"line_end":35,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33492,"byte_end":33497,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::spi::write","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33465,"byte_end":33483,"line_start":56,"line_end":56,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33615,"byte_end":33622,"line_start":59,"line_end":59,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write::Default","value":"Default<W>: crate::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`\n","sig":null,"attributes":[{"value":"/ Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33504,"byte_end":33600,"line_start":58,"line_end":58,"column_start":5,"column_end":101}}]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34096,"byte_end":34106,"line_start":80,"line_end":80,"column_start":9,"column_end":19},"name":"write_iter","qualname":"::blocking::spi::write_iter","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34050,"byte_end":34087,"line_start":79,"line_end":79,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34236,"byte_end":34243,"line_start":83,"line_end":83,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write_iter::Default","value":"Default<W>: crate::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::WriteIter<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[{"value":"/ Default implementation of `blocking::spi::WriteIter<W>` for implementers of","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34113,"byte_end":34192,"line_start":81,"line_end":81,"column_start":5,"column_end":84}},{"value":"/ `spi::FullDuplex<W>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34197,"byte_end":34221,"line_start":82,"line_end":82,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"capture","qualname":"::capture","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":111}],"decl_id":null,"docs":" Input capture\n","sig":null,"attributes":[{"value":"/ Input capture","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34756,"byte_end":34773,"line_start":1,"line_end":1,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":111},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36541,"byte_end":36548,"line_start":55,"line_end":55,"column_start":11,"column_end":18},"name":"Capture","qualname":"::capture::Capture","value":"Capture","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" Input capture","sig":null,"attributes":[{"value":"/ Input capture","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34784,"byte_end":34801,"line_start":5,"line_end":5,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34802,"byte_end":34805,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34806,"byte_end":34820,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34821,"byte_end":34824,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ You can use this interface to measure the period of (quasi) periodic signals","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34825,"byte_end":34905,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ / events","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34906,"byte_end":34918,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34919,"byte_end":34922,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34923,"byte_end":34930,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34931,"byte_end":34968,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34969,"byte_end":34992,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":34993,"byte_end":35013,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35014,"byte_end":35017,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35018,"byte_end":35042,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35043,"byte_end":35046,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35047,"byte_end":35062,"line_start":19,"line_end":19,"column_start":1,"column_end":16}},{"value":"/     let mut capture: Capture1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35063,"byte_end":35100,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35101,"byte_end":35118,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ #       Capture1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35119,"byte_end":35139,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35140,"byte_end":35150,"line_start":23,"line_end":23,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35151,"byte_end":35154,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/     capture.try_set_resolution(1.ms()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35155,"byte_end":35207,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35208,"byte_end":35211,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     let before = block!(capture.try_capture(Channel::_1)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35212,"byte_end":35283,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/     let after = block!(capture.try_capture(Channel::_1)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35284,"byte_end":35354,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35355,"byte_end":35358,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/     let period = after.wrapping_sub(before);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35359,"byte_end":35407,"line_start":30,"line_end":30,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35408,"byte_end":35411,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     println!(\"Period: {} ms\", period);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35412,"byte_end":35454,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35455,"byte_end":35460,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35461,"byte_end":35464,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35465,"byte_end":35501,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/ # struct MilliSeconds(u32);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35502,"byte_end":35533,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"/ # trait U32Ext { fn ms(self) -> MilliSeconds; }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35534,"byte_end":35585,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/ # impl U32Ext for u32 { fn ms(self) -> MilliSeconds { MilliSeconds(self) } }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35586,"byte_end":35666,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ # struct Capture1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35667,"byte_end":35689,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"/ # enum Channel { _1 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35690,"byte_end":35715,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ # impl hal::capture::Capture for Capture1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35716,"byte_end":35763,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ #     type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35764,"byte_end":35798,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/ #     type Capture = u16;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35799,"byte_end":35828,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/ #     type Channel = Channel;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35829,"byte_end":35862,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ #     type Time = MilliSeconds;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35863,"byte_end":35898,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/ #     fn try_capture(&mut self, _: Channel) -> ::nb::Result<u16, Self::Error> { Ok(0) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35899,"byte_end":35990,"line_start":46,"line_end":46,"column_start":1,"column_end":92}},{"value":"/ #     fn try_disable(&mut self, _: Channel) -> Result<(), Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":35991,"byte_end":36086,"line_start":47,"line_end":47,"column_start":1,"column_end":96}},{"value":"/ #     fn try_enable(&mut self, _: Channel) -> Result<(), Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36087,"byte_end":36181,"line_start":48,"line_end":48,"column_start":1,"column_end":95}},{"value":"/ #     fn try_get_resolution(&self) -> Result<MilliSeconds, Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36182,"byte_end":36278,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/ #     fn try_set_resolution<T>(&mut self, _: T) -> Result<(), Self::Error> where T: Into<MilliSeconds> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36279,"byte_end":36396,"line_start":50,"line_end":50,"column_start":1,"column_end":118}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36397,"byte_end":36404,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36405,"byte_end":36412,"line_start":52,"line_end":52,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36762,"byte_end":36767,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Error","qualname":"::capture::Capture::Error","value":"type Error;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Enumeration of `Capture` errors","sig":null,"attributes":[{"value":"/ Enumeration of `Capture` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36555,"byte_end":36590,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36595,"byte_end":36598,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Possible errors:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36603,"byte_end":36623,"line_start":58,"line_end":58,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36628,"byte_end":36631,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ - *overcapture*, the previous capture value was overwritten because it","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36636,"byte_end":36710,"line_start":60,"line_end":60,"column_start":5,"column_end":79}},{"value":"/   was not read in a timely manner","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36715,"byte_end":36752,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":113},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36957,"byte_end":36964,"line_start":68,"line_end":68,"column_start":10,"column_end":17},"name":"Channel","qualname":"::capture::Capture::Channel","value":"type Channel;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Enumeration of channels that can be used with this `Capture` interface","sig":null,"attributes":[{"value":"/ Enumeration of channels that can be used with this `Capture` interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36774,"byte_end":36848,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36853,"byte_end":36856,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ If your `Capture` interface has no channels you can use the type `()`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36861,"byte_end":36934,"line_start":66,"line_end":66,"column_start":5,"column_end":78}},{"value":"/ here","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36939,"byte_end":36947,"line_start":67,"line_end":67,"column_start":5,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":114},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37056,"byte_end":37060,"line_start":71,"line_end":71,"column_start":10,"column_end":14},"name":"Time","qualname":"::capture::Capture::Time","value":"type Time;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" A time unit that can be converted into a human time unit (e.g. seconds)\n","sig":null,"attributes":[{"value":"/ A time unit that can be converted into a human time unit (e.g. seconds)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":36971,"byte_end":37046,"line_start":70,"line_end":70,"column_start":5,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":115},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37124,"byte_end":37131,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Capture","qualname":"::capture::Capture::Capture","value":"type Capture;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" The type of the value returned by `capture`\n","sig":null,"attributes":[{"value":"/ The type of the value returned by `capture`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37067,"byte_end":37114,"line_start":73,"line_end":73,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37415,"byte_end":37426,"line_start":81,"line_end":81,"column_start":8,"column_end":19},"name":"try_capture","qualname":"::capture::Capture::try_capture","value":"pub fn try_capture(&mut Self, Self::Channel)\n-> nb::Result<Self::Capture, Self::Error>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" \"Waits\" for a transition in the capture `channel` and returns the value\n of counter at that instant","sig":null,"attributes":[{"value":"/ \"Waits\" for a transition in the capture `channel` and returns the value","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37138,"byte_end":37213,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ of counter at that instant","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37218,"byte_end":37248,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37253,"byte_end":37256,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ NOTE that you must multiply the returned value by the *resolution* of","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37261,"byte_end":37334,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ this `Capture` interface to get a human time unit (e.g. seconds)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37339,"byte_end":37407,"line_start":80,"line_end":80,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37550,"byte_end":37561,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"try_disable","qualname":"::capture::Capture::try_disable","value":"pub fn try_disable(&mut Self, Self::Channel) -> Result<(), Self::Error>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Disables a capture `channel`\n","sig":null,"attributes":[{"value":"/ Disables a capture `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37510,"byte_end":37542,"line_start":83,"line_end":83,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37669,"byte_end":37679,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"try_enable","qualname":"::capture::Capture::try_enable","value":"pub fn try_enable(&mut Self, Self::Channel) -> Result<(), Self::Error>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Enables a capture `channel`\n","sig":null,"attributes":[{"value":"/ Enables a capture `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37630,"byte_end":37661,"line_start":86,"line_end":86,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37790,"byte_end":37808,"line_start":90,"line_end":90,"column_start":8,"column_end":26},"name":"try_get_resolution","qualname":"::capture::Capture::try_get_resolution","value":"pub fn try_get_resolution(&Self) -> Result<Self::Time, Self::Error>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Returns the current resolution\n","sig":null,"attributes":[{"value":"/ Returns the current resolution","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37748,"byte_end":37782,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37909,"byte_end":37927,"line_start":93,"line_end":93,"column_start":8,"column_end":26},"name":"try_set_resolution","qualname":"::capture::Capture::try_set_resolution","value":"pub fn try_set_resolution<R>(&mut Self, R) -> Result<(), Self::Error> where\nR: Into<Self::Time>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Sets the resolution of the capture timer\n","sig":null,"attributes":[{"value":"/ Sets the resolution of the capture timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/capture.rs","byte_start":37857,"byte_end":37901,"line_start":92,"line_end":92,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"digital","qualname":"::digital","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":149}],"decl_id":null,"docs":" Digital I/O\n","sig":null,"attributes":[{"value":"/ Digital I/O","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38026,"byte_end":38041,"line_start":1,"line_end":1,"column_start":1,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38093,"byte_end":38102,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" Single digital push-pull output pin\n","sig":null,"attributes":[{"value":"/ Single digital push-pull output pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38043,"byte_end":38082,"line_start":3,"line_end":3,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":124},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38133,"byte_end":38138,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::OutputPin::Error","value":"type Error;","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38109,"byte_end":38123,"line_start":5,"line_end":5,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38310,"byte_end":38321,"line_start":12,"line_end":12,"column_start":8,"column_end":19},"name":"try_set_low","qualname":"::digital::OutputPin::try_set_low","value":"pub fn try_set_low(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[{"value":"/ Drives the pin low","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38145,"byte_end":38167,"line_start":8,"line_end":8,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38172,"byte_end":38175,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be low, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38180,"byte_end":38275,"line_start":10,"line_end":10,"column_start":5,"column_end":100}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38280,"byte_end":38302,"line_start":11,"line_end":11,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38533,"byte_end":38545,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"try_set_high","qualname":"::digital::OutputPin::try_set_high","value":"pub fn try_set_high(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[{"value":"/ Drives the pin high","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38366,"byte_end":38389,"line_start":14,"line_end":14,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38394,"byte_end":38397,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be high, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38402,"byte_end":38498,"line_start":16,"line_end":16,"column_start":5,"column_end":101}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38503,"byte_end":38525,"line_start":17,"line_end":17,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":127},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38654,"byte_end":38671,"line_start":22,"line_end":22,"column_start":11,"column_end":28},"name":"StatefulOutputPin","qualname":"::digital::StatefulOutputPin","value":"StatefulOutputPin: OutputPin","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"decl_id":null,"docs":" Push-pull output pin that can read its output state\n","sig":null,"attributes":[{"value":"/ Push-pull output pin that can read its output state","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38588,"byte_end":38643,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38807,"byte_end":38822,"line_start":26,"line_end":26,"column_start":8,"column_end":23},"name":"try_is_set_high","qualname":"::digital::StatefulOutputPin::try_is_set_high","value":"pub fn try_is_set_high(&Self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Is the pin in drive high mode?","sig":null,"attributes":[{"value":"/ Is the pin in drive high mode?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38689,"byte_end":38723,"line_start":23,"line_end":23,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38728,"byte_end":38731,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ *NOTE* this does *not* read the electrical state of the pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38736,"byte_end":38799,"line_start":25,"line_end":25,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38982,"byte_end":38996,"line_start":31,"line_end":31,"column_start":8,"column_end":22},"name":"try_is_set_low","qualname":"::digital::StatefulOutputPin::try_is_set_low","value":"pub fn try_is_set_low(&Self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Is the pin in drive low mode?","sig":null,"attributes":[{"value":"/ Is the pin in drive low mode?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38865,"byte_end":38898,"line_start":28,"line_end":28,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38903,"byte_end":38906,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ *NOTE* this does *not* read the electrical state of the pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38911,"byte_end":38974,"line_start":30,"line_end":30,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":130},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39330,"byte_end":39349,"line_start":40,"line_end":40,"column_start":11,"column_end":30},"name":"ToggleableOutputPin","qualname":"::digital::ToggleableOutputPin","value":"ToggleableOutputPin","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" Output pin that can be toggled","sig":null,"attributes":[{"value":"/ Output pin that can be toggled","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39037,"byte_end":39071,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39072,"byte_end":39075,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See [toggleable](toggleable) to use a software implementation if","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39076,"byte_end":39144,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/ both [OutputPin](trait.OutputPin.html) and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39145,"byte_end":39191,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ [StatefulOutputPin](trait.StatefulOutputPin.html) are","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39192,"byte_end":39249,"line_start":38,"line_end":38,"column_start":1,"column_end":58}},{"value":"/ implemented. Otherwise, implement this using hardware mechanisms.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39250,"byte_end":39319,"line_start":39,"line_end":39,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":131},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39380,"byte_end":39385,"line_start":42,"line_end":42,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::ToggleableOutputPin::Error","value":"type Error;","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39356,"byte_end":39370,"line_start":41,"line_end":41,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39422,"byte_end":39432,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"try_toggle","qualname":"::digital::ToggleableOutputPin::try_toggle","value":"pub fn try_toggle(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" Toggle pin output.\n","sig":null,"attributes":[{"value":"/ Toggle pin output.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39392,"byte_end":39414,"line_start":44,"line_end":44,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40717,"byte_end":40727,"line_start":92,"line_end":92,"column_start":9,"column_end":19},"name":"toggleable","qualname":"::digital::toggleable","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":145}],"decl_id":null,"docs":" If you can read **and** write the output state, a pin is\n toggleable by software.","sig":null,"attributes":[{"value":"/ If you can read **and** write the output state, a pin is","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39475,"byte_end":39535,"line_start":48,"line_end":48,"column_start":1,"column_end":61}},{"value":"/ toggleable by software.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39536,"byte_end":39563,"line_start":49,"line_end":49,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39564,"byte_end":39567,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39568,"byte_end":39575,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use embedded_hal::digital::{OutputPin, StatefulOutputPin, ToggleableOutputPin};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39576,"byte_end":39659,"line_start":52,"line_end":52,"column_start":1,"column_end":84}},{"value":"/ use embedded_hal::digital::toggleable;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39660,"byte_end":39702,"line_start":53,"line_end":53,"column_start":1,"column_end":43}},{"value":"/ use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39703,"byte_end":39737,"line_start":54,"line_end":54,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39738,"byte_end":39741,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ /// A virtual output pin that exists purely in software","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39742,"byte_end":39801,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ struct MyPin {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39802,"byte_end":39820,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/     state: bool","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39821,"byte_end":39840,"line_start":58,"line_end":58,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39841,"byte_end":39846,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39847,"byte_end":39850,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ impl OutputPin for MyPin {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39851,"byte_end":39881,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/    type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39882,"byte_end":39913,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39914,"byte_end":39917,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/    fn try_set_low(&mut self) -> Result<(), Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39918,"byte_end":39979,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/        self.state = false;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":39980,"byte_end":40010,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/        Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40011,"byte_end":40028,"line_start":66,"line_end":66,"column_start":1,"column_end":18}},{"value":"/    }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40029,"byte_end":40037,"line_start":67,"line_end":67,"column_start":1,"column_end":9}},{"value":"/    fn try_set_high(&mut self) -> Result<(), Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40038,"byte_end":40100,"line_start":68,"line_end":68,"column_start":1,"column_end":63}},{"value":"/        self.state = true;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40101,"byte_end":40130,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/        Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40131,"byte_end":40148,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"/    }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40149,"byte_end":40157,"line_start":71,"line_end":71,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40158,"byte_end":40163,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40164,"byte_end":40167,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ impl StatefulOutputPin for MyPin {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40168,"byte_end":40206,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/    fn try_is_set_low(&self) -> Result<bool, Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40207,"byte_end":40269,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/        Ok(!self.state)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40270,"byte_end":40296,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/    }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40297,"byte_end":40305,"line_start":77,"line_end":77,"column_start":1,"column_end":9}},{"value":"/    fn try_is_set_high(&self) -> Result<bool, Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40306,"byte_end":40369,"line_start":78,"line_end":78,"column_start":1,"column_end":64}},{"value":"/        Ok(self.state)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40370,"byte_end":40395,"line_start":79,"line_end":79,"column_start":1,"column_end":26}},{"value":"/    }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40396,"byte_end":40404,"line_start":80,"line_end":80,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40405,"byte_end":40410,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40411,"byte_end":40414,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ /// Opt-in to the software implementation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40415,"byte_end":40461,"line_start":83,"line_end":83,"column_start":1,"column_end":47}},{"value":"/ impl toggleable::Default for MyPin {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40462,"byte_end":40503,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40504,"byte_end":40507,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut pin = MyPin { state: false };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40508,"byte_end":40549,"line_start":86,"line_end":86,"column_start":1,"column_end":42}},{"value":"/ pin.try_toggle().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40550,"byte_end":40580,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ assert!(pin.try_is_set_high().unwrap());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40581,"byte_end":40625,"line_start":88,"line_end":88,"column_start":1,"column_end":45}},{"value":"/ pin.try_toggle().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40626,"byte_end":40656,"line_start":89,"line_end":89,"column_start":1,"column_end":31}},{"value":"/ assert!(pin.try_is_set_low().unwrap());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40657,"byte_end":40700,"line_start":90,"line_end":90,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40701,"byte_end":40708,"line_start":91,"line_end":91,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40864,"byte_end":40871,"line_start":96,"line_end":96,"column_start":15,"column_end":22},"name":"Default","qualname":"::digital::toggleable::Default","value":"Default: OutputPin + StatefulOutputPin","parent":null,"children":[],"decl_id":null,"docs":" Software-driven `toggle()` implementation.\n","sig":null,"attributes":[{"value":"/ Software-driven `toggle()` implementation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40803,"byte_end":40849,"line_start":95,"line_end":95,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41309,"byte_end":41317,"line_start":116,"line_end":116,"column_start":11,"column_end":19},"name":"InputPin","qualname":"::digital::InputPin","value":"InputPin","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Single digital input pin\n","sig":null,"attributes":[{"value":"/ Single digital input pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41270,"byte_end":41298,"line_start":115,"line_end":115,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":150},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41348,"byte_end":41353,"line_start":118,"line_end":118,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::InputPin::Error","value":"type Error;","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41324,"byte_end":41338,"line_start":117,"line_end":117,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41394,"byte_end":41405,"line_start":121,"line_end":121,"column_start":8,"column_end":19},"name":"try_is_high","qualname":"::digital::InputPin::try_is_high","value":"pub fn try_is_high(&Self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Is the input pin high?\n","sig":null,"attributes":[{"value":"/ Is the input pin high?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41360,"byte_end":41386,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41481,"byte_end":41491,"line_start":124,"line_end":124,"column_start":8,"column_end":18},"name":"try_is_low","qualname":"::digital::InputPin::try_is_low","value":"pub fn try_is_low(&Self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Is the input pin low?\n","sig":null,"attributes":[{"value":"/ Is the input pin low?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":41448,"byte_end":41473,"line_start":123,"line_end":123,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":153},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/fmt.rs","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161}],"decl_id":null,"docs":" Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","sig":null,"attributes":[{"value":"/ Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/fmt.rs","byte_start":41532,"byte_end":41603,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/fmt.rs","byte_start":41604,"byte_end":41607,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ TODO write example of usage","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/fmt.rs","byte_start":41608,"byte_end":41639,"line_start":3,"line_end":3,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":166},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241}],"decl_id":null,"docs":" The prelude is a collection of all the traits in this crate","sig":null,"attributes":[{"value":"/ The prelude is a collection of all the traits in this crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":41999,"byte_end":42062,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42063,"byte_end":42066,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The traits have been renamed to avoid collisions with other items when","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42067,"byte_end":42141,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ performing a glob import.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/prelude.rs","byte_start":42142,"byte_end":42171,"line_start":4,"line_end":4,"column_start":1,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":244},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pwm","qualname":"::pwm","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":258}],"decl_id":null,"docs":" Pulse Width Modulation\n","sig":null,"attributes":[{"value":"/ Pulse Width Modulation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43819,"byte_end":43845,"line_start":1,"line_end":1,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":245},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45722,"byte_end":45725,"line_start":53,"line_end":53,"column_start":11,"column_end":14},"name":"Pwm","qualname":"::pwm::Pwm","value":"Pwm","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256}],"decl_id":null,"docs":" Pulse Width Modulation","sig":null,"attributes":[{"value":"/ Pulse Width Modulation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43847,"byte_end":43873,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43874,"byte_end":43877,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43878,"byte_end":43892,"line_start":5,"line_end":5,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43893,"byte_end":43896,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Use this interface to control the power output of some actuator","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43897,"byte_end":43964,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43965,"byte_end":43968,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43969,"byte_end":43976,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":43977,"byte_end":44014,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44015,"byte_end":44018,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44019,"byte_end":44043,"line_start":12,"line_end":12,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44044,"byte_end":44047,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44048,"byte_end":44063,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/     let mut pwm: Pwm1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44064,"byte_end":44093,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44094,"byte_end":44111,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"/ #       Pwm1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44112,"byte_end":44128,"line_start":17,"line_end":17,"column_start":1,"column_end":17}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44129,"byte_end":44139,"line_start":18,"line_end":18,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44140,"byte_end":44143,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/     pwm.try_set_period(1.khz()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44144,"byte_end":44189,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44190,"byte_end":44193,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/     let max_duty = pwm.try_get_max_duty().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44194,"byte_end":44249,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44250,"byte_end":44253,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/     // brightest LED","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44254,"byte_end":44278,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/     pwm.try_set_duty(Channel::_1, max_duty).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44279,"byte_end":44336,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44337,"byte_end":44340,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     // dimmer LED","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44341,"byte_end":44362,"line_start":27,"line_end":27,"column_start":1,"column_end":22}},{"value":"/     pwm.try_set_duty(Channel::_2, max_duty / 4).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44363,"byte_end":44424,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44425,"byte_end":44430,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44431,"byte_end":44434,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44435,"byte_end":44471,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/ # struct KiloHertz(u32);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44472,"byte_end":44500,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ # trait U32Ext { fn khz(self) -> KiloHertz; }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44501,"byte_end":44550,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ # impl U32Ext for u32 { fn khz(self) -> KiloHertz { KiloHertz(self) } }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44551,"byte_end":44626,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ # enum Channel { _1, _2 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44627,"byte_end":44656,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/ # struct Pwm1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44657,"byte_end":44675,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ # impl hal::pwm::Pwm for Pwm1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44676,"byte_end":44711,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/ #     type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44712,"byte_end":44746,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ #     type Channel = Channel;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44747,"byte_end":44780,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/ #     type Time = KiloHertz;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44781,"byte_end":44813,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/ #     type Duty = u16;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44814,"byte_end":44840,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/ #     fn try_disable(&mut self, _: Channel) -> Result<(), Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44841,"byte_end":44936,"line_start":42,"line_end":42,"column_start":1,"column_end":96}},{"value":"/ #     fn try_enable(&mut self, _: Channel) -> Result<(), Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":44937,"byte_end":45031,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ #     fn try_get_duty(&self, _: Channel) -> Result<u16, Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45032,"byte_end":45125,"line_start":44,"line_end":44,"column_start":1,"column_end":94}},{"value":"/ #     fn try_get_max_duty(&self) -> Result<u16, Self::Error> { Ok(0) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45126,"byte_end":45200,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ #     fn try_set_duty(&mut self, _: Channel, _: u16) -> Result<(), Self::Error> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45201,"byte_end":45295,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ #     fn try_get_period(&self) -> Result<KiloHertz, Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45296,"byte_end":45385,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"/ #     fn try_set_period<T>(&mut self, _: T) -> Result<(), Self::Error> where T: Into<KiloHertz> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45386,"byte_end":45496,"line_start":48,"line_end":48,"column_start":1,"column_end":111}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45497,"byte_end":45504,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45505,"byte_end":45512,"line_start":50,"line_end":50,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45773,"byte_end":45778,"line_start":55,"line_end":55,"column_start":10,"column_end":15},"name":"Error","qualname":"::pwm::Pwm::Error","value":"type Error;","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Enumeration of `Pwm` errors\n","sig":null,"attributes":[{"value":"/ Enumeration of `Pwm` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45732,"byte_end":45763,"line_start":54,"line_end":54,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":247},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45960,"byte_end":45967,"line_start":61,"line_end":61,"column_start":10,"column_end":17},"name":"Channel","qualname":"::pwm::Pwm::Channel","value":"type Channel;","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Enumeration of channels that can be used with this `Pwm` interface","sig":null,"attributes":[{"value":"/ Enumeration of channels that can be used with this `Pwm` interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45785,"byte_end":45855,"line_start":57,"line_end":57,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45860,"byte_end":45863,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ If your `Pwm` interface has no channels you can use the type `()`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45868,"byte_end":45937,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/ here","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45942,"byte_end":45950,"line_start":60,"line_end":60,"column_start":5,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":248},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46059,"byte_end":46063,"line_start":64,"line_end":64,"column_start":10,"column_end":14},"name":"Time","qualname":"::pwm::Pwm::Time","value":"type Time;","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" A time unit that can be converted into a human time unit (e.g. seconds)\n","sig":null,"attributes":[{"value":"/ A time unit that can be converted into a human time unit (e.g. seconds)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":45974,"byte_end":46049,"line_start":63,"line_end":63,"column_start":5,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":249},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46274,"byte_end":46278,"line_start":70,"line_end":70,"column_start":10,"column_end":14},"name":"Duty","qualname":"::pwm::Pwm::Duty","value":"type Duty;","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[{"value":"/ Type for the `duty` methods","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46070,"byte_end":46101,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46106,"byte_end":46109,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The implementer is free to choose a float / percentage representation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46114,"byte_end":46187,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/ (e.g. `0.0 .. 1.0`) or an integer representation (e.g. `0 .. 65535`)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46192,"byte_end":46264,"line_start":69,"line_end":69,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46321,"byte_end":46332,"line_start":73,"line_end":73,"column_start":8,"column_end":19},"name":"try_disable","qualname":"::pwm::Pwm::try_disable","value":"pub fn try_disable(&mut Self, Self::Channel) -> Result<(), Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Disables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46285,"byte_end":46313,"line_start":72,"line_end":72,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46436,"byte_end":46446,"line_start":76,"line_end":76,"column_start":8,"column_end":18},"name":"try_enable","qualname":"::pwm::Pwm::try_enable","value":"pub fn try_enable(&mut Self, Self::Channel) -> Result<(), Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Enables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46401,"byte_end":46428,"line_start":75,"line_end":75,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46557,"byte_end":46571,"line_start":79,"line_end":79,"column_start":8,"column_end":22},"name":"try_get_period","qualname":"::pwm::Pwm::try_get_period","value":"pub fn try_get_period(&Self) -> Result<Self::Time, Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Returns the current PWM period\n","sig":null,"attributes":[{"value":"/ Returns the current PWM period","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46515,"byte_end":46549,"line_start":78,"line_end":78,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46662,"byte_end":46674,"line_start":82,"line_end":82,"column_start":8,"column_end":20},"name":"try_get_duty","qualname":"::pwm::Pwm::try_get_duty","value":"pub fn try_get_duty(&Self, Self::Channel) -> Result<Self::Duty, Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[{"value":"/ Returns the current duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46620,"byte_end":46654,"line_start":81,"line_end":81,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46795,"byte_end":46811,"line_start":85,"line_end":85,"column_start":8,"column_end":24},"name":"try_get_max_duty","qualname":"::pwm::Pwm::try_get_max_duty","value":"pub fn try_get_max_duty(&Self) -> Result<Self::Duty, Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[{"value":"/ Returns the maximum duty cycle value","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46747,"byte_end":46787,"line_start":84,"line_end":84,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46893,"byte_end":46905,"line_start":88,"line_end":88,"column_start":8,"column_end":20},"name":"try_set_duty","qualname":"::pwm::Pwm::try_set_duty","value":"pub fn try_set_duty(&mut Self, Self::Channel, Self::Duty)\n-> Result<(), Self::Error>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[{"value":"/ Sets a new duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":46860,"byte_end":46885,"line_start":87,"line_end":87,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47033,"byte_end":47047,"line_start":92,"line_end":92,"column_start":8,"column_end":22},"name":"try_set_period","qualname":"::pwm::Pwm::try_set_period","value":"pub fn try_set_period<P>(&mut Self, P) -> Result<(), Self::Error> where\nP: Into<Self::Time>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Sets a new PWM period\n","sig":null,"attributes":[{"value":"/ Sets a new PWM period","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47000,"byte_end":47025,"line_start":91,"line_end":91,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47213,"byte_end":47219,"line_start":100,"line_end":100,"column_start":11,"column_end":17},"name":"PwmPin","qualname":"::pwm::PwmPin","value":"PwmPin","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" A single PWM channel / pin","sig":null,"attributes":[{"value":"/ A single PWM channel / pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47142,"byte_end":47172,"line_start":97,"line_end":97,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47173,"byte_end":47176,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ See `Pwm` for details","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47177,"byte_end":47202,"line_start":99,"line_end":99,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":259},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47270,"byte_end":47275,"line_start":102,"line_end":102,"column_start":10,"column_end":15},"name":"Error","qualname":"::pwm::PwmPin::Error","value":"type Error;","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Enumeration of `PwmPin` errors\n","sig":null,"attributes":[{"value":"/ Enumeration of `PwmPin` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47226,"byte_end":47260,"line_start":101,"line_end":101,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47486,"byte_end":47490,"line_start":108,"line_end":108,"column_start":10,"column_end":14},"name":"Duty","qualname":"::pwm::PwmPin::Duty","value":"type Duty;","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[{"value":"/ Type for the `duty` methods","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47282,"byte_end":47313,"line_start":104,"line_end":104,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47318,"byte_end":47321,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ The implementer is free to choose a float / percentage representation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47326,"byte_end":47399,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ (e.g. `0.0 .. 1.0`) or an integer representation (e.g. `0 .. 65535`)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47404,"byte_end":47476,"line_start":107,"line_end":107,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47533,"byte_end":47544,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"try_disable","qualname":"::pwm::PwmPin::try_disable","value":"pub fn try_disable(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Disables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47497,"byte_end":47525,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47624,"byte_end":47634,"line_start":114,"line_end":114,"column_start":8,"column_end":18},"name":"try_enable","qualname":"::pwm::PwmPin::try_enable","value":"pub fn try_enable(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Enables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47589,"byte_end":47616,"line_start":113,"line_end":113,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47721,"byte_end":47733,"line_start":117,"line_end":117,"column_start":8,"column_end":20},"name":"try_get_duty","qualname":"::pwm::PwmPin::try_get_duty","value":"pub fn try_get_duty(&Self) -> Result<Self::Duty, Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[{"value":"/ Returns the current duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47679,"byte_end":47713,"line_start":116,"line_end":116,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47830,"byte_end":47846,"line_start":120,"line_end":120,"column_start":8,"column_end":24},"name":"try_get_max_duty","qualname":"::pwm::PwmPin::try_get_max_duty","value":"pub fn try_get_max_duty(&Self) -> Result<Self::Duty, Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[{"value":"/ Returns the maximum duty cycle value","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47782,"byte_end":47822,"line_start":119,"line_end":119,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47928,"byte_end":47940,"line_start":123,"line_end":123,"column_start":8,"column_end":20},"name":"try_set_duty","qualname":"::pwm::PwmPin::try_set_duty","value":"pub fn try_set_duty(&mut Self, Self::Duty) -> Result<(), Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[{"value":"/ Sets a new duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/pwm.rs","byte_start":47895,"byte_end":47920,"line_start":122,"line_end":122,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":266},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"qei","qualname":"::qei","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":344}],"decl_id":null,"docs":" Quadrature encoder interface\n","sig":null,"attributes":[{"value":"/ Quadrature encoder interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48001,"byte_end":48033,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":267},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49696,"byte_end":49699,"line_start":57,"line_end":57,"column_start":11,"column_end":14},"name":"Qei","qualname":"::qei::Qei","value":"Qei","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" Quadrature encoder interface","sig":null,"attributes":[{"value":"/ Quadrature encoder interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48035,"byte_end":48067,"line_start":3,"line_end":3,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48068,"byte_end":48071,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48072,"byte_end":48086,"line_start":5,"line_end":5,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48087,"byte_end":48090,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ You can use this interface to measure the speed of a motor","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48091,"byte_end":48153,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48154,"byte_end":48157,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48158,"byte_end":48165,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48166,"byte_end":48203,"line_start":10,"line_end":10,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48204,"byte_end":48227,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48228,"byte_end":48248,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48249,"byte_end":48252,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48253,"byte_end":48277,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48278,"byte_end":48281,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48282,"byte_end":48297,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/     let mut qei: Qei1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48298,"byte_end":48327,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48328,"byte_end":48345,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/ #       Qei1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48346,"byte_end":48362,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48363,"byte_end":48373,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"/     let mut timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48374,"byte_end":48407,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48408,"byte_end":48425,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48426,"byte_end":48444,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48445,"byte_end":48455,"line_start":24,"line_end":24,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48456,"byte_end":48459,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48460,"byte_end":48463,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     let before = qei.try_count().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48464,"byte_end":48510,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/     timer.try_start(1.s()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48511,"byte_end":48551,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/     block!(timer.try_wait());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48552,"byte_end":48585,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/     let after = qei.try_count().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48586,"byte_end":48631,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48632,"byte_end":48635,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let speed = after.wrapping_sub(before);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48636,"byte_end":48683,"line_start":32,"line_end":32,"column_start":1,"column_end":48}},{"value":"/     println!(\"Speed: {} pulses per second\", speed);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48684,"byte_end":48739,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48740,"byte_end":48745,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48746,"byte_end":48749,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48750,"byte_end":48786,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ # struct Seconds(u32);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48787,"byte_end":48813,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ # trait U32Ext { fn s(self) -> Seconds; }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48814,"byte_end":48859,"line_start":38,"line_end":38,"column_start":1,"column_end":46}},{"value":"/ # impl U32Ext for u32 { fn s(self) -> Seconds { Seconds(self) } }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48860,"byte_end":48929,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ # struct Qei1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48930,"byte_end":48948,"line_start":40,"line_end":40,"column_start":1,"column_end":19}},{"value":"/ # impl hal::qei::Qei for Qei1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48949,"byte_end":48984,"line_start":41,"line_end":41,"column_start":1,"column_end":36}},{"value":"/ #     type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":48985,"byte_end":49019,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/ #     type Count = u16;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49020,"byte_end":49047,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ #     fn try_count(&self) -> Result<u16, Self::Error> { Ok(0) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49048,"byte_end":49115,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/ #     fn try_direction(&self) -> Result<::hal::qei::Direction, Self::Error> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49116,"byte_end":49216,"line_start":45,"line_end":45,"column_start":1,"column_end":101}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49217,"byte_end":49224,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49225,"byte_end":49245,"line_start":47,"line_end":47,"column_start":1,"column_end":21}},{"value":"/ # impl hal::timer::CountDown for Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49246,"byte_end":49291,"line_start":48,"line_end":48,"column_start":1,"column_end":46}},{"value":"/ #     type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49292,"byte_end":49326,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"/ #     type Time = Seconds;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49327,"byte_end":49357,"line_start":50,"line_end":50,"column_start":1,"column_end":31}},{"value":"/ #     fn try_start<T>(&mut self, _: T) -> Result<(), Infallible> where T: Into<Seconds> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49358,"byte_end":49460,"line_start":51,"line_end":51,"column_start":1,"column_end":103}},{"value":"/ #     fn try_wait(&mut self) -> ::nb::Result<(), Infallible> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49461,"byte_end":49536,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49537,"byte_end":49544,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49545,"byte_end":49552,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":268},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49747,"byte_end":49752,"line_start":59,"line_end":59,"column_start":10,"column_end":15},"name":"Error","qualname":"::qei::Qei::Error","value":"type Error;","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Enumeration of `Qei` errors\n","sig":null,"attributes":[{"value":"/ Enumeration of `Qei` errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49706,"byte_end":49737,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":269},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49814,"byte_end":49819,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Count","qualname":"::qei::Qei::Count","value":"type Count;","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" The type of the value returned by `count`\n","sig":null,"attributes":[{"value":"/ The type of the value returned by `count`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49759,"byte_end":49804,"line_start":61,"line_end":61,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49884,"byte_end":49893,"line_start":65,"line_end":65,"column_start":8,"column_end":17},"name":"try_count","qualname":"::qei::Qei::try_count","value":"pub fn try_count(&Self) -> Result<Self::Count, Self::Error>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Returns the current pulse count of the encoder\n","sig":null,"attributes":[{"value":"/ Returns the current pulse count of the encoder","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49826,"byte_end":49876,"line_start":64,"line_end":64,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49982,"byte_end":49995,"line_start":68,"line_end":68,"column_start":8,"column_end":21},"name":"try_direction","qualname":"::qei::Qei::try_direction","value":"pub fn try_direction(&Self) -> Result<Direction, Self::Error>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Returns the count direction\n","sig":null,"attributes":[{"value":"/ Returns the count direction","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":49943,"byte_end":49974,"line_start":67,"line_end":67,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50147,"byte_end":50159,"line_start":75,"line_end":75,"column_start":5,"column_end":17},"name":"Downcounting","qualname":"::qei::Direction::Downcounting","value":"Direction::Downcounting","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" 3, 2, 1\n","sig":null,"attributes":[{"value":"/ 3, 2, 1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50131,"byte_end":50142,"line_start":74,"line_end":74,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":333},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50181,"byte_end":50191,"line_start":77,"line_end":77,"column_start":5,"column_end":15},"name":"Upcounting","qualname":"::qei::Direction::Upcounting","value":"Direction::Upcounting","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" 1, 2, 3\n","sig":null,"attributes":[{"value":"/ 1, 2, 3","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50165,"byte_end":50176,"line_start":76,"line_end":76,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":330},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50115,"byte_end":50124,"line_start":73,"line_end":73,"column_start":10,"column_end":19},"name":"Direction","qualname":"::qei::Direction","value":"pub enum Direction { Downcounting, Upcounting, }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333}],"decl_id":null,"docs":" Count direction\n","sig":null,"attributes":[{"value":"/ Count direction","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/qei.rs","byte_start":50041,"byte_end":50060,"line_start":71,"line_end":71,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":272},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rng","qualname":"::rng","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":276}],"decl_id":null,"docs":" Random Number Generator Interface\n","sig":null,"attributes":[{"value":"/ Random Number Generator Interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50196,"byte_end":50233,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":276},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50294,"byte_end":50298,"line_start":6,"line_end":6,"column_start":11,"column_end":15},"name":"Read","qualname":"::rng::Read","value":"Read","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"decl_id":null,"docs":" Nonblocking stream of random bytes.\n","sig":null,"attributes":[{"value":"/ Nonblocking stream of random bytes.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50244,"byte_end":50283,"line_start":5,"line_end":5,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50417,"byte_end":50422,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::rng::Read::Error","value":"type Error;","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" An enumeration of RNG errors.","sig":null,"attributes":[{"value":"/ An enumeration of RNG errors.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50305,"byte_end":50338,"line_start":7,"line_end":7,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50343,"byte_end":50346,"line_start":8,"line_end":8,"column_start":5,"column_end":8}},{"value":"/ For infallible implementations, will be `Infallible`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50351,"byte_end":50407,"line_start":9,"line_end":9,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50476,"byte_end":50484,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"try_read","qualname":"::rng::Read::try_read","value":"pub fn try_read(&mut Self, &mut [u8]) -> nb::Result<usize, Self::Error>","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Get a number of bytes from the RNG.\n","sig":null,"attributes":[{"value":"/ Get a number of bytes from the RNG.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/rng.rs","byte_start":50429,"byte_end":50468,"line_start":12,"line_end":12,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":279},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::serial","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":287}],"decl_id":null,"docs":" Serial interface\n","sig":null,"attributes":[{"value":"/ Serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50550,"byte_end":50570,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":283},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50780,"byte_end":50784,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::serial::Read","value":"Read<Word>","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"decl_id":null,"docs":" Read half of a serial interface","sig":null,"attributes":[{"value":"/ Read half of a serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50581,"byte_end":50616,"line_start":5,"line_end":5,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50617,"byte_end":50620,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Some serial interfaces support different data sizes (8 bits, 9 bits, etc.);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50621,"byte_end":50700,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This can be encoded in this trait via the `Word` type parameter.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50701,"byte_end":50769,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50821,"byte_end":50826,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Read::Error","value":"type Error;","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Read error\n","sig":null,"attributes":[{"value":"/ Read error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50797,"byte_end":50811,"line_start":10,"line_end":10,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50890,"byte_end":50898,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"try_read","qualname":"::serial::Read::try_read","value":"pub fn try_read(&mut Self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Reads a single word from the serial interface\n","sig":null,"attributes":[{"value":"/ Reads a single word from the serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50833,"byte_end":50882,"line_start":13,"line_end":13,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":287},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50994,"byte_end":50999,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Write","qualname":"::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"decl_id":null,"docs":" Write half of a serial interface\n","sig":null,"attributes":[{"value":"/ Write half of a serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":50947,"byte_end":50983,"line_start":17,"line_end":17,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":289},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51037,"byte_end":51042,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[{"value":"/ Write error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51012,"byte_end":51027,"line_start":19,"line_end":19,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51105,"byte_end":51114,"line_start":23,"line_end":23,"column_start":8,"column_end":17},"name":"try_write","qualname":"::serial::Write::try_write","value":"pub fn try_write(&mut Self, Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Writes a single word to the serial interface\n","sig":null,"attributes":[{"value":"/ Writes a single word to the serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51049,"byte_end":51097,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51255,"byte_end":51264,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"try_flush","qualname":"::serial::Write::try_flush","value":"pub fn try_flush(&mut Self) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Ensures that none of the previously written words are still buffered\n","sig":null,"attributes":[{"value":"/ Ensures that none of the previously written words are still buffered","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/serial.rs","byte_start":51175,"byte_end":51247,"line_start":25,"line_end":25,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":292},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::spi","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":346},{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" Serial Peripheral Interface\n","sig":null,"attributes":[{"value":"/ Serial Peripheral Interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51311,"byte_end":51342,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":296},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51745,"byte_end":51755,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"FullDuplex","qualname":"::spi::FullDuplex","value":"FullDuplex<Word>","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" Full duplex (master mode)","sig":null,"attributes":[{"value":"/ Full duplex (master mode)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51353,"byte_end":51382,"line_start":5,"line_end":5,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51383,"byte_end":51386,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51387,"byte_end":51398,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51399,"byte_end":51402,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - It's the task of the user of this interface to manage the slave select lines","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51403,"byte_end":51485,"line_start":9,"line_end":9,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51486,"byte_end":51489,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - Due to how full duplex SPI works each `read` call must be preceded by a `send` call.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51490,"byte_end":51580,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51581,"byte_end":51584,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ - Some SPIs can work with 8-bit *and* 16-bit words. You can overload this trait with different","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51585,"byte_end":51683,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ `Word` types to allow operation in both modes.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51684,"byte_end":51734,"line_start":14,"line_end":14,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":298},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51810,"byte_end":51815,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::spi::FullDuplex::Error","value":"type Error;","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" An enumeration of SPI errors\n","sig":null,"attributes":[{"value":"/ An enumeration of SPI errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51768,"byte_end":51800,"line_start":16,"line_end":16,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51982,"byte_end":51990,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"try_read","qualname":"::spi::FullDuplex::try_read","value":"pub fn try_read(&mut Self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Reads the word stored in the shift register","sig":null,"attributes":[{"value":"/ Reads the word stored in the shift register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51822,"byte_end":51869,"line_start":19,"line_end":19,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51874,"byte_end":51877,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ **NOTE** A word must be sent to the slave before attempting to call this","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51882,"byte_end":51958,"line_start":21,"line_end":21,"column_start":5,"column_end":81}},{"value":"/ method.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":51963,"byte_end":51974,"line_start":22,"line_end":22,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52078,"byte_end":52086,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"try_send","qualname":"::spi::FullDuplex::try_send","value":"pub fn try_send(&mut Self, Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Sends a word to the slave\n","sig":null,"attributes":[{"value":"/ Sends a word to the slave","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52041,"byte_end":52070,"line_start":25,"line_end":25,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":347},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52261,"byte_end":52268,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"IdleLow","qualname":"::spi::Polarity::IdleLow","value":"Polarity::IdleLow","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" Clock signal low when idle\n","sig":null,"attributes":[{"value":"/ Clock signal low when idle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52226,"byte_end":52256,"line_start":32,"line_end":32,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52310,"byte_end":52318,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"IdleHigh","qualname":"::spi::Polarity::IdleHigh","value":"Polarity::IdleHigh","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" Clock signal high when idle\n","sig":null,"attributes":[{"value":"/ Clock signal high when idle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52274,"byte_end":52305,"line_start":34,"line_end":34,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":346},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52211,"byte_end":52219,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::spi::Polarity","value":"pub enum Polarity { IdleLow, IdleHigh, }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":349}],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[{"value":"/ Clock polarity","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52145,"byte_end":52163,"line_start":29,"line_end":29,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":361},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52455,"byte_end":52479,"line_start":42,"line_end":42,"column_start":5,"column_end":29},"name":"CaptureOnFirstTransition","qualname":"::spi::Phase::CaptureOnFirstTransition","value":"Phase::CaptureOnFirstTransition","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the first clock transition\n","sig":null,"attributes":[{"value":"/ Data in \"captured\" on the first clock transition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52398,"byte_end":52450,"line_start":41,"line_end":41,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":363},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52543,"byte_end":52568,"line_start":44,"line_end":44,"column_start":5,"column_end":30},"name":"CaptureOnSecondTransition","qualname":"::spi::Phase::CaptureOnSecondTransition","value":"Phase::CaptureOnSecondTransition","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the second clock transition\n","sig":null,"attributes":[{"value":"/ Data in \"captured\" on the second clock transition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52485,"byte_end":52538,"line_start":43,"line_end":43,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":360},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52386,"byte_end":52391,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Phase","qualname":"::spi::Phase","value":"pub enum Phase { CaptureOnFirstTransition, CaptureOnSecondTransition, }","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":363}],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[{"value":"/ Clock phase","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52323,"byte_end":52338,"line_start":38,"line_end":38,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":374},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52635,"byte_end":52639,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Mode","qualname":"::spi::Mode","value":"Mode { polarity, phase }","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" SPI mode\n","sig":null,"attributes":[{"value":"/ SPI mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52573,"byte_end":52585,"line_start":47,"line_end":47,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":375},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52673,"byte_end":52681,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"polarity","qualname":"::spi::Mode::polarity","value":"spi::Polarity","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[{"value":"/ Clock polarity","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52646,"byte_end":52664,"line_start":50,"line_end":50,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":376},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52721,"byte_end":52726,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"phase","qualname":"::spi::Mode::phase","value":"spi::Phase","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[{"value":"/ Clock phase","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52697,"byte_end":52712,"line_start":52,"line_end":52,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52782,"byte_end":52788,"line_start":57,"line_end":57,"column_start":11,"column_end":17},"name":"MODE_0","qualname":"::spi::MODE_0","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 0\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 0, CPHA = 0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52738,"byte_end":52771,"line_start":56,"line_end":56,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52929,"byte_end":52935,"line_start":63,"line_end":63,"column_start":11,"column_end":17},"name":"MODE_1","qualname":"::spi::MODE_1","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 1\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 0, CPHA = 1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":52885,"byte_end":52918,"line_start":62,"line_end":62,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":53077,"byte_end":53083,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"MODE_2","qualname":"::spi::MODE_2","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 0\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 1, CPHA = 0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":53033,"byte_end":53066,"line_start":68,"line_end":68,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":304},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":53225,"byte_end":53231,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"name":"MODE_3","qualname":"::spi::MODE_3","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 1\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 1, CPHA = 1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/spi.rs","byte_start":53181,"byte_end":53214,"line_start":74,"line_end":74,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":305},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timer","qualname":"::timer","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" Timers\n","sig":null,"attributes":[{"value":"/ Timers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53330,"byte_end":53340,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":309},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54830,"byte_end":54839,"line_start":59,"line_end":59,"column_start":11,"column_end":20},"name":"CountDown","qualname":"::timer::CountDown","value":"CountDown","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314}],"decl_id":null,"docs":" A count down timer","sig":null,"attributes":[{"value":"/ A count down timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53351,"byte_end":53373,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53374,"byte_end":53377,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53378,"byte_end":53392,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53393,"byte_end":53396,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - `self.start(count); block!(self.try_wait());` MUST block for AT LEAST the time specified by","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53397,"byte_end":53494,"line_start":9,"line_end":9,"column_start":1,"column_end":98}},{"value":"/ `count`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53495,"byte_end":53507,"line_start":10,"line_end":10,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53508,"byte_end":53511,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ *Note* that the implementer doesn't necessarily have to be a *downcounting* timer; it could also","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53512,"byte_end":53612,"line_start":12,"line_end":12,"column_start":1,"column_end":101}},{"value":"/ be an *upcounting* timer as long as the above contract is upheld.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53613,"byte_end":53682,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53683,"byte_end":53686,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53687,"byte_end":53701,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53702,"byte_end":53705,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ You can use this timer to create delays","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53706,"byte_end":53749,"line_start":17,"line_end":17,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53750,"byte_end":53753,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53754,"byte_end":53761,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53762,"byte_end":53799,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53800,"byte_end":53823,"line_start":21,"line_end":21,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53824,"byte_end":53844,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53845,"byte_end":53848,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53849,"byte_end":53873,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53874,"byte_end":53877,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53878,"byte_end":53893,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/     let mut led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53894,"byte_end":53922,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53923,"byte_end":53940,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53941,"byte_end":53956,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53957,"byte_end":53967,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/     let mut timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":53968,"byte_end":54001,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54002,"byte_end":54019,"line_start":32,"line_end":32,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54020,"byte_end":54038,"line_start":33,"line_end":33,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54039,"byte_end":54049,"line_start":34,"line_end":34,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54050,"byte_end":54053,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/     Led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54054,"byte_end":54071,"line_start":36,"line_end":36,"column_start":1,"column_end":18}},{"value":"/     timer.try_start(1.s()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54072,"byte_end":54112,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/     block!(timer.try_wait()); // blocks for 1 second","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54113,"byte_end":54169,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/     Led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54170,"byte_end":54188,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54189,"byte_end":54194,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54195,"byte_end":54198,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # use core::convert::Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54199,"byte_end":54235,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/ # struct Seconds(u32);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54236,"byte_end":54262,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"/ # trait U32Ext { fn s(self) -> Seconds; }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54263,"byte_end":54308,"line_start":44,"line_end":44,"column_start":1,"column_end":46}},{"value":"/ # impl U32Ext for u32 { fn s(self) -> Seconds { Seconds(self) } }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54309,"byte_end":54378,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/ # struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54379,"byte_end":54396,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ # impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54397,"byte_end":54413,"line_start":47,"line_end":47,"column_start":1,"column_end":17}},{"value":"/ #     pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54414,"byte_end":54448,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/ #     pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54449,"byte_end":54482,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54483,"byte_end":54490,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ # struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54491,"byte_end":54511,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/ # impl hal::timer::CountDown for Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54512,"byte_end":54557,"line_start":52,"line_end":52,"column_start":1,"column_end":46}},{"value":"/ #     type Error = Infallible;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54558,"byte_end":54592,"line_start":53,"line_end":53,"column_start":1,"column_end":35}},{"value":"/ #     type Time = Seconds;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54593,"byte_end":54623,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ #     fn try_start<T>(&mut self, _: T) -> Result<(), Self::Error> where T: Into<Seconds> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54624,"byte_end":54727,"line_start":55,"line_end":55,"column_start":1,"column_end":104}},{"value":"/ #     fn try_wait(&mut self) -> ::nb::Result<(), Infallible> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54728,"byte_end":54803,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54804,"byte_end":54811,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54812,"byte_end":54819,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":310},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54966,"byte_end":54971,"line_start":63,"line_end":63,"column_start":10,"column_end":15},"name":"Error","qualname":"::timer::CountDown::Error","value":"type Error;","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":" An enumeration of `CountDown` errors.","sig":null,"attributes":[{"value":"/ An enumeration of `CountDown` errors.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54846,"byte_end":54887,"line_start":60,"line_end":60,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54892,"byte_end":54895,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ For infallible implementations, will be `Infallible`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54900,"byte_end":54956,"line_start":62,"line_end":62,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":311},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55027,"byte_end":55031,"line_start":66,"line_end":66,"column_start":10,"column_end":14},"name":"Time","qualname":"::timer::CountDown::Time","value":"type Time;","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":" The unit of time used by this timer\n","sig":null,"attributes":[{"value":"/ The unit of time used by this timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":54978,"byte_end":55017,"line_start":65,"line_end":65,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55073,"byte_end":55082,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"try_start","qualname":"::timer::CountDown::try_start","value":"pub fn try_start<T>(&mut Self, T) -> Result<(), Self::Error> where\nT: Into<Self::Time>","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":" Starts a new count down\n","sig":null,"attributes":[{"value":"/ Starts a new count down","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55038,"byte_end":55065,"line_start":68,"line_end":68,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55585,"byte_end":55593,"line_start":81,"line_end":81,"column_start":8,"column_end":16},"name":"try_wait","qualname":"::timer::CountDown::try_wait","value":"pub fn try_wait(&mut Self) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":" Non-blockingly \"waits\" until the count down finishes","sig":null,"attributes":[{"value":"/ Non-blockingly \"waits\" until the count down finishes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55178,"byte_end":55234,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55239,"byte_end":55242,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Contract","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55247,"byte_end":55261,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55266,"byte_end":55269,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ - If `Self: Periodic`, the timer will start a new count down right after the last one","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55274,"byte_end":55363,"line_start":77,"line_end":77,"column_start":5,"column_end":94}},{"value":"/ finishes.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55368,"byte_end":55381,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/ - Otherwise the behavior of calling `try_wait` after the last call returned `Ok` is UNSPECIFIED.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55386,"byte_end":55486,"line_start":79,"line_end":79,"column_start":5,"column_end":105}},{"value":"/ Implementers are suggested to panic on this scenario to signal a programmer error.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55491,"byte_end":55577,"line_start":80,"line_end":80,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":315},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55707,"byte_end":55715,"line_start":85,"line_end":85,"column_start":11,"column_end":19},"name":"Periodic","qualname":"::timer::Periodic","value":"Periodic","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that indicates that a timer is periodic\n","sig":null,"attributes":[{"value":"/ Marker trait that indicates that a timer is periodic","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55640,"byte_end":55696,"line_start":84,"line_end":84,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":316},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55767,"byte_end":55773,"line_start":88,"line_end":88,"column_start":11,"column_end":17},"name":"Cancel","qualname":"::timer::Cancel","value":"Cancel: CountDown","parent":null,"children":[{"krate":0,"index":317}],"decl_id":null,"docs":" Trait for cancelable countdowns.\n","sig":null,"attributes":[{"value":"/ Trait for cancelable countdowns.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55720,"byte_end":55756,"line_start":87,"line_end":87,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":56060,"byte_end":56070,"line_start":95,"line_end":95,"column_start":8,"column_end":18},"name":"try_cancel","qualname":"::timer::Cancel::try_cancel","value":"pub fn try_cancel(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" Tries to cancel this countdown.","sig":null,"attributes":[{"value":"/ Tries to cancel this countdown.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55791,"byte_end":55826,"line_start":89,"line_end":89,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55831,"byte_end":55834,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55839,"byte_end":55851,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55856,"byte_end":55859,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the countdown has already been canceled or was never started.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55864,"byte_end":55958,"line_start":93,"line_end":93,"column_start":5,"column_end":99}},{"value":"/ An error is also returned if the countdown is not `Periodic` and has already expired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55963,"byte_end":56052,"line_start":94,"line_end":94,"column_start":5,"column_end":94}}]},{"kind":"Mod","id":{"krate":0,"index":318},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"watchdog","qualname":"::watchdog","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":327}],"decl_id":null,"docs":" Traits for interactions with a processors watchdog timer.\n","sig":null,"attributes":[{"value":"/ Traits for interactions with a processors watchdog timer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56113,"byte_end":56174,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":319},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56319,"byte_end":56327,"line_start":5,"line_end":5,"column_start":11,"column_end":19},"name":"Watchdog","qualname":"::watchdog::Watchdog","value":"Watchdog","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" Feeds an existing watchdog to ensure the processor isn't reset. Sometimes\n commonly referred to as \"kicking\" or \"refreshing\".\n","sig":null,"attributes":[{"value":"/ Feeds an existing watchdog to ensure the processor isn't reset. Sometimes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56176,"byte_end":56253,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ commonly referred to as \"kicking\" or \"refreshing\".","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56254,"byte_end":56308,"line_start":4,"line_end":4,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":320},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56453,"byte_end":56458,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::watchdog::Watchdog::Error","value":"type Error;","parent":{"krate":0,"index":319},"children":[],"decl_id":null,"docs":" An enumeration of `Watchdog` errors.","sig":null,"attributes":[{"value":"/ An enumeration of `Watchdog` errors.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56334,"byte_end":56374,"line_start":6,"line_end":6,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56379,"byte_end":56382,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ For infallible implementations, will be `Infallible`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56387,"byte_end":56443,"line_start":8,"line_end":8,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56592,"byte_end":56600,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"try_feed","qualname":"::watchdog::Watchdog::try_feed","value":"pub fn try_feed(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":319},"children":[],"decl_id":null,"docs":" Triggers the watchdog. This must be done once the watchdog is started\n to prevent the processor being reset.\n","sig":null,"attributes":[{"value":"/ Triggers the watchdog. This must be done once the watchdog is started","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56465,"byte_end":56538,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ to prevent the processor being reset.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56543,"byte_end":56584,"line_start":12,"line_end":12,"column_start":5,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56743,"byte_end":56757,"line_start":18,"line_end":18,"column_start":11,"column_end":25},"name":"WatchdogEnable","qualname":"::watchdog::WatchdogEnable","value":"WatchdogEnable","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"decl_id":null,"docs":" Enables A watchdog timer to reset the processor if software is frozen or\n stalled.\n","sig":null,"attributes":[{"value":"/ Enables A watchdog timer to reset the processor if software is frozen or","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56643,"byte_end":56719,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ stalled.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56720,"byte_end":56732,"line_start":17,"line_end":17,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":323},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56889,"byte_end":56894,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Error","qualname":"::watchdog::WatchdogEnable::Error","value":"type Error;","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" An enumeration of `WatchdogEnable` errors.","sig":null,"attributes":[{"value":"/ An enumeration of `WatchdogEnable` errors.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56764,"byte_end":56810,"line_start":19,"line_end":19,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56815,"byte_end":56818,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ For infallible implementations, will be `Infallible`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56823,"byte_end":56879,"line_start":21,"line_end":21,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":324},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56948,"byte_end":56952,"line_start":25,"line_end":25,"column_start":10,"column_end":14},"name":"Time","qualname":"::watchdog::WatchdogEnable::Time","value":"type Time;","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Unit of time used by the watchdog\n","sig":null,"attributes":[{"value":"/ Unit of time used by the watchdog","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56901,"byte_end":56938,"line_start":24,"line_end":24,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57119,"byte_end":57128,"line_start":29,"line_end":29,"column_start":8,"column_end":17},"name":"try_start","qualname":"::watchdog::WatchdogEnable::try_start","value":"pub fn try_start<T>(&mut Self, T) -> Result<(), Self::Error> where\nT: Into<Self::Time>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Starts the watchdog with a given period, typically once this is done\n the watchdog needs to be kicked periodically or the processor is reset.\n","sig":null,"attributes":[{"value":"/ Starts the watchdog with a given period, typically once this is done","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":56959,"byte_end":57031,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/ the watchdog needs to be kicked periodically or the processor is reset.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57036,"byte_end":57111,"line_start":28,"line_end":28,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":327},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57304,"byte_end":57319,"line_start":35,"line_end":35,"column_start":11,"column_end":26},"name":"WatchdogDisable","qualname":"::watchdog::WatchdogDisable","value":"WatchdogDisable","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"decl_id":null,"docs":" Disables a running watchdog timer so the processor won't be reset.\n","sig":null,"attributes":[{"value":"/ Disables a running watchdog timer so the processor won't be reset.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57223,"byte_end":57293,"line_start":34,"line_end":34,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":328},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57452,"byte_end":57457,"line_start":39,"line_end":39,"column_start":10,"column_end":15},"name":"Error","qualname":"::watchdog::WatchdogDisable::Error","value":"type Error;","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" An enumeration of `WatchdogDisable` errors.","sig":null,"attributes":[{"value":"/ An enumeration of `WatchdogDisable` errors.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57326,"byte_end":57373,"line_start":36,"line_end":36,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57378,"byte_end":57381,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ For infallible implementations, will be `Infallible`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57386,"byte_end":57442,"line_start":38,"line_end":38,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57497,"byte_end":57508,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"try_disable","qualname":"::watchdog::WatchdogDisable::try_disable","value":"pub fn try_disable(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Disables the watchdog\n","sig":null,"attributes":[{"value":"/ Disables the watchdog","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/watchdog.rs","byte_start":57464,"byte_end":57489,"line_start":41,"line_end":41,"column_start":5,"column_end":30}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31585,"byte_end":31586,"line_start":34,"line_end":34,"column_start":60,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33081,"byte_end":33082,"line_start":38,"line_end":38,"column_start":54,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33707,"byte_end":33708,"line_start":61,"line_end":61,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34332,"byte_end":34333,"line_start":85,"line_end":85,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40943,"byte_end":40944,"line_start":98,"line_end":98,"column_start":37,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20889,"byte_end":20892,"line_start":689,"line_end":689,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20902,"byte_end":20910,"line_start":690,"line_end":690,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":19}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24748,"byte_end":24753,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":20}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24763,"byte_end":24766,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":29}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24776,"byte_end":24779,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24789,"byte_end":24795,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/mod.rs","byte_start":24805,"byte_end":24808,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20920,"byte_end":20927,"line_start":691,"line_end":691,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":107}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20937,"byte_end":20944,"line_start":692,"line_end":692,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20954,"byte_end":20957,"line_start":693,"line_end":693,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":153}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20967,"byte_end":20974,"line_start":694,"line_end":694,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":166}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20984,"byte_end":20987,"line_start":695,"line_end":695,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":244}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":20997,"byte_end":21000,"line_start":696,"line_end":696,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":266}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":21010,"byte_end":21013,"line_start":697,"line_end":697,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":272}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":21023,"byte_end":21029,"line_start":698,"line_end":698,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":279}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":21039,"byte_end":21042,"line_start":699,"line_end":699,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":292}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":21052,"byte_end":21057,"line_start":700,"line_end":700,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":305}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/lib.rs","byte_start":21067,"byte_end":21075,"line_start":701,"line_end":701,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":318}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31510,"byte_end":31515,"line_start":32,"line_end":32,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":287},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/serial.rs","byte_start":31585,"byte_end":31586,"line_start":34,"line_end":34,"column_start":60,"column_end":61},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":52}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33010,"byte_end":33020,"line_start":36,"line_end":36,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":296},"to":{"krate":0,"index":82}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33081,"byte_end":33082,"line_start":38,"line_end":38,"column_start":54,"column_end":55},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":86},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33639,"byte_end":33649,"line_start":59,"line_end":59,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":296},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":33707,"byte_end":33708,"line_start":61,"line_end":61,"column_start":51,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34260,"byte_end":34270,"line_start":83,"line_end":83,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":296},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/blocking/spi.rs","byte_start":34332,"byte_end":34333,"line_start":85,"line_end":85,"column_start":55,"column_end":56},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":103},"to":{"krate":0,"index":76}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":38673,"byte_end":38682,"line_start":22,"line_end":22,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":123},"to":{"krate":0,"index":127}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40873,"byte_end":40882,"line_start":96,"line_end":96,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":123},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40885,"byte_end":40902,"line_start":96,"line_end":96,"column_start":36,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/digital.rs","byte_start":40943,"byte_end":40944,"line_start":98,"line_end":98,"column_start":37,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":146},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-1.0.0-alpha.1/src/timer.rs","byte_start":55775,"byte_end":55784,"line_start":88,"line_end":88,"column_start":19,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":309},"to":{"krate":0,"index":316}}]}