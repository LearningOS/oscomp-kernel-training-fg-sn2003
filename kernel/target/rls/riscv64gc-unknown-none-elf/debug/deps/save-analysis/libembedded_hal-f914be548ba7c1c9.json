{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7","program":"/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","embedded_hal","/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f914be548ba7c1c9","-C","extra-filename=-f914be548ba7c1c9","--out-dir","/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","--target","riscv64gc-unknown-none-elf","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/debug/deps","--extern","nb=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libnb-cc10053d6d92c049.rmeta","--extern","void=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libvoid-d66825342a80d79f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libembedded_hal-f914be548ba7c1c9.rmeta"},"prelude":{"crate_id":{"name":"embedded_hal","disambiguator":[8918899971492387411,0]},"crate_root":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src","external_crates":[{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16824974774548153985,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[18062996579175346233,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1534907499907218240,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":4,"id":{"name":"nb","disambiguator":[7659022394780168621,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":5,"id":{"name":"nb","disambiguator":[9952267402709107539,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","num":6,"id":{"name":"void","disambiguator":[1434615281835199676,0]}}],"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":0,"byte_end":29436,"line_start":1,"line_end":999,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50623,"byte_end":50624,"line_start":7,"line_end":7,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Id","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50644,"byte_end":50645,"line_start":8,"line_end":8,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":60324,"byte_end":60325,"line_start":27,"line_end":27,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"OutputPin","parent":{"krate":0,"index":158}},{"kind":"Use","ref_id":{"krate":0,"index":15},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":83929,"byte_end":83936,"line_start":8,"line_end":8,"column_start":26,"column_end":33},"alias_span":null,"name":"_embedded_hal_blocking_delay_DelayMs","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84003,"byte_end":84010,"line_start":9,"line_end":9,"column_start":26,"column_end":33},"alias_span":null,"name":"_embedded_hal_blocking_delay_DelayUs","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84081,"byte_end":84085,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"alias_span":null,"name":"_embedded_hal_blocking_i2c_Read","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84122,"byte_end":84127,"line_start":11,"line_end":11,"column_start":46,"column_end":51},"alias_span":null,"name":"_embedded_hal_blocking_i2c_Write","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84169,"byte_end":84178,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"alias_span":null,"name":"_embedded_hal_blocking_i2c_WriteRead","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84342,"byte_end":84347,"line_start":16,"line_end":16,"column_start":27,"column_end":32},"alias_span":null,"name":"_embedded_hal_blocking_serial_Write","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84417,"byte_end":84425,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"_embedded_hal_blocking_spi_Transfer","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84466,"byte_end":84471,"line_start":18,"line_end":18,"column_start":54,"column_end":59},"alias_span":null,"name":"_embedded_hal_blocking_spi_Write","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84661,"byte_end":84670,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"alias_span":null,"name":"_embedded_hal_digital_OutputPin","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84856,"byte_end":84860,"line_start":28,"line_end":28,"column_start":17,"column_end":21},"alias_span":null,"name":"_embedded_hal_serial_Read","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84907,"byte_end":84912,"line_start":29,"line_end":29,"column_start":17,"column_end":22},"alias_span":null,"name":"_embedded_hal_serial_Write","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":84957,"byte_end":84967,"line_start":30,"line_end":30,"column_start":14,"column_end":24},"alias_span":null,"name":"_embedded_hal_spi_FullDuplex","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":85016,"byte_end":85025,"line_start":31,"line_end":31,"column_start":16,"column_end":25},"alias_span":null,"name":"_embedded_hal_timer_CountDown","value":"","parent":{"krate":0,"index":230}},{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":85504,"byte_end":85510,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"alias_span":null,"name":"_embedded_hal_PwmPin","value":"","parent":{"krate":0,"index":230}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":0,"byte_end":29436,"line_start":1,"line_end":999,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":113},{"krate":0,"index":158},{"krate":0,"index":217},{"krate":0,"index":230},{"krate":0,"index":275},{"krate":0,"index":288},{"krate":0,"index":301},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":325}],"decl_id":null,"docs":" A Hardware Abstraction Layer (HAL) for embedded systems","sig":null,"attributes":[{"value":"/ A Hardware Abstraction Layer (HAL) for embedded systems","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":0,"byte_end":59,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":60,"byte_end":63,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ **NOTE** This HAL is still is active development. Expect the traits presented here to be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":64,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ tweaked, split or be replaced wholesale before being stabilized, i.e. before hitting the 1.0.0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":157,"byte_end":255,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ release. That being said there's a part of the HAL that's currently considered unproven and is","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":256,"byte_end":354,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ hidden behind an \"unproven\" Cargo feature. This API is even more volatile and it's exempt from","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":355,"byte_end":453,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ semver rules: it can change in a non-backward compatible fashion or even disappear in between","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":454,"byte_end":551,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ patch releases.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":552,"byte_end":571,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":572,"byte_end":575,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Design goals","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":576,"byte_end":594,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":595,"byte_end":598,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The HAL","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":599,"byte_end":610,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":611,"byte_end":614,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ - Must *erase* device specific details. Neither register, register blocks or magic values should","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":615,"byte_end":715,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ appear in the API.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":716,"byte_end":738,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":739,"byte_end":742,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - Must be generic *within* a device and *across* devices. The API to use a serial interface must","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":743,"byte_end":843,"line_start":17,"line_end":17,"column_start":1,"column_end":101}},{"value":"/ be the same regardless of whether the implementation uses the USART1 or UART4 peripheral of a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":844,"byte_end":941,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ device or the UART0 peripheral of another device.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":942,"byte_end":995,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":996,"byte_end":999,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ - Where possible must *not* be tied to a specific asynchronous model. The API should be usable","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1000,"byte_end":1098,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ in blocking mode, with the `futures` model, with an async/await model or with a callback model.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1099,"byte_end":1198,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ (cf. the [`nb`] crate)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1199,"byte_end":1225,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1226,"byte_end":1229,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Must be minimal, and thus easy to implement and zero cost, yet highly composable. People that","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1230,"byte_end":1329,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ want higher level abstraction should *prefer to use this HAL* rather than *re-implement*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1330,"byte_end":1422,"line_start":26,"line_end":26,"column_start":1,"column_end":93}},{"value":"/ register manipulation code.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1423,"byte_end":1454,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1455,"byte_end":1458,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - Serve as a foundation for building an ecosystem of platform agnostic drivers. Here driver","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1459,"byte_end":1554,"line_start":29,"line_end":29,"column_start":1,"column_end":96}},{"value":"/ means a library crate that lets a target platform interface an external device like a digital","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1555,"byte_end":1652,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ sensor or a wireless transceiver. The advantage of this system is that by writing the driver as","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1653,"byte_end":1752,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ a generic library on top of `embedded-hal` driver authors can support any number of target","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1753,"byte_end":1847,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ platforms (e.g. Cortex-M microcontrollers, AVR microcontrollers, embedded Linux, etc.). The","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1848,"byte_end":1943,"line_start":33,"line_end":33,"column_start":1,"column_end":96}},{"value":"/ advantage for application developers is that by adopting `embedded-hal` they can unlock all","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":1944,"byte_end":2039,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ these drivers for their platform.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2040,"byte_end":2077,"line_start":35,"line_end":35,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2078,"byte_end":2081,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Out of scope","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2082,"byte_end":2100,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2101,"byte_end":2104,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Initialization and configuration stuff like \"ensure this serial interface and that SPI","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2105,"byte_end":2197,"line_start":39,"line_end":39,"column_start":1,"column_end":93}},{"value":"/ interface are not using the same pins\". The HAL will focus on *doing I/O*.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2198,"byte_end":2276,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2277,"byte_end":2280,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Reference implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2281,"byte_end":2311,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2312,"byte_end":2315,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The [`stm32f30x-hal`] crate contains a reference implementation of this HAL.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2316,"byte_end":2396,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2397,"byte_end":2400,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`stm32f30x-hal`]: https://crates.io/crates/stm32f30x-hal/0.1.0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2401,"byte_end":2468,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2469,"byte_end":2472,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Platform agnostic drivers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2473,"byte_end":2504,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2505,"byte_end":2508,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ You can find platform agnostic drivers built on top of `embedded-hal` on crates.io by [searching","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2509,"byte_end":2609,"line_start":50,"line_end":50,"column_start":1,"column_end":101}},{"value":"/ for the *embedded-hal* keyword](https://crates.io/keywords/embedded-hal).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2610,"byte_end":2687,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2688,"byte_end":2691,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ If you writing a platform agnostic driver yourself you are highly encouraged to [add the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2692,"byte_end":2784,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/ embedded-hal keyword](https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2785,"byte_end":2884,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ to your crate before publishing it!","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2885,"byte_end":2924,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2925,"byte_end":2928,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Detailed design","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2929,"byte_end":2950,"line_start":57,"line_end":57,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2951,"byte_end":2954,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ## Traits","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2955,"byte_end":2968,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2969,"byte_end":2972,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ The HAL is specified as traits to allow generic programming. These traits make use of the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":2973,"byte_end":3066,"line_start":61,"line_end":61,"column_start":1,"column_end":94}},{"value":"/ [`nb`][] crate (*please go read that crate documentation before continuing*) to abstract over","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3067,"byte_end":3164,"line_start":62,"line_end":62,"column_start":1,"column_end":98}},{"value":"/ the asynchronous model and to also provide a blocking operation mode.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3165,"byte_end":3238,"line_start":63,"line_end":63,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3239,"byte_end":3242,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`nb`]: https://crates.io/crates/nb","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3243,"byte_end":3282,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3283,"byte_end":3286,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Here's how a HAL trait may look like:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3287,"byte_end":3328,"line_start":67,"line_end":67,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3329,"byte_end":3332,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3333,"byte_end":3340,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3341,"byte_end":3361,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3362,"byte_end":3365,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ /// A serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3366,"byte_end":3392,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/ pub trait Serial {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3393,"byte_end":3415,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/     /// Error type associated to this serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3416,"byte_end":3474,"line_start":74,"line_end":74,"column_start":1,"column_end":59}},{"value":"/     type Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3475,"byte_end":3494,"line_start":75,"line_end":75,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3495,"byte_end":3498,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/     /// Reads a single byte","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3499,"byte_end":3530,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/     fn read(&mut self) -> nb::Result<u8, Self::Error>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3531,"byte_end":3589,"line_start":78,"line_end":78,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3590,"byte_end":3593,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/     /// Writes a single byte","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3594,"byte_end":3626,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/     fn write(&mut self, byte: u8) -> nb::Result<(), Self::Error>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3627,"byte_end":3696,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3697,"byte_end":3702,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3703,"byte_end":3710,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3711,"byte_end":3714,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The `nb::Result` enum is used to add a [`WouldBlock`] variant to the errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3715,"byte_end":3794,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/ of the serial interface. As explained in the documentation of the `nb` crate this single API,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3795,"byte_end":3892,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ when paired with the macros in the `nb` crate, can operate in a blocking manner, or in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3893,"byte_end":3985,"line_start":87,"line_end":87,"column_start":1,"column_end":93}},{"value":"/ non-blocking manner compatible with `futures` and with the `await!` operator.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":3986,"byte_end":4067,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4068,"byte_end":4071,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ [`WouldBlock`]: https://docs.rs/nb/0.1.0/nb/enum.Error.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4072,"byte_end":4135,"line_start":90,"line_end":90,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4136,"byte_end":4139,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Some traits, like the one shown below, may expose possibly blocking APIs that can't fail. In","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4140,"byte_end":4236,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ those cases `nb::Result<_, Void>` is used.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4237,"byte_end":4283,"line_start":93,"line_end":93,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4284,"byte_end":4287,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4288,"byte_end":4295,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4296,"byte_end":4316,"line_start":96,"line_end":96,"column_start":1,"column_end":21}},{"value":"/ extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4317,"byte_end":4339,"line_start":97,"line_end":97,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4340,"byte_end":4343,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ use void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4344,"byte_end":4363,"line_start":99,"line_end":99,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4364,"byte_end":4367,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ /// A count down timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4368,"byte_end":4394,"line_start":101,"line_end":101,"column_start":1,"column_end":27}},{"value":"/ pub trait CountDown {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4395,"byte_end":4420,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4421,"byte_end":4434,"line_start":103,"line_end":103,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4435,"byte_end":4438,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/     /// \"waits\" until the count down is over","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4439,"byte_end":4487,"line_start":105,"line_end":105,"column_start":1,"column_end":49}},{"value":"/     fn wait(&mut self) -> nb::Result<(), Void>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4488,"byte_end":4539,"line_start":106,"line_end":106,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4540,"byte_end":4545,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4546,"byte_end":4549,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4550,"byte_end":4568,"line_start":109,"line_end":109,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4569,"byte_end":4576,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4577,"byte_end":4580,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ## Suggested implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4581,"byte_end":4612,"line_start":112,"line_end":112,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4613,"byte_end":4616,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ The HAL traits should be implemented for device crates generated via [`svd2rust`] to maximize","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4617,"byte_end":4714,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"/ code reuse.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4715,"byte_end":4730,"line_start":115,"line_end":115,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4731,"byte_end":4734,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`svd2rust`]: https://crates.io/crates/svd2rust","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4735,"byte_end":4786,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4787,"byte_end":4790,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ Shown below is an implementation of some of the HAL traits for the [`stm32f30x`] crate. This","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4791,"byte_end":4887,"line_start":119,"line_end":119,"column_start":1,"column_end":97}},{"value":"/ single implementation will work for *any* microcontroller in the STM32F30x family.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4888,"byte_end":4974,"line_start":120,"line_end":120,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4975,"byte_end":4978,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [`stm32f30x`]: https://crates.io/crates/stm32f30x","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":4979,"byte_end":5032,"line_start":122,"line_end":122,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5033,"byte_end":5036,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5037,"byte_end":5044,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ // crate: stm32f30x-hal","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5045,"byte_end":5072,"line_start":125,"line_end":125,"column_start":1,"column_end":28}},{"value":"/ // An implementation of the `embedded-hal` traits for STM32F30x microcontrollers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5073,"byte_end":5157,"line_start":126,"line_end":126,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5158,"byte_end":5161,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5162,"byte_end":5199,"line_start":128,"line_end":128,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5200,"byte_end":5220,"line_start":129,"line_end":129,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5221,"byte_end":5224,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // device crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5225,"byte_end":5244,"line_start":131,"line_end":131,"column_start":1,"column_end":20}},{"value":"/ extern crate stm32f30x;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5245,"byte_end":5272,"line_start":132,"line_end":132,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5273,"byte_end":5276,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ use stm32f30x::USART1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5277,"byte_end":5303,"line_start":134,"line_end":134,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5304,"byte_end":5307,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ /// A serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5308,"byte_end":5334,"line_start":136,"line_end":136,"column_start":1,"column_end":27}},{"value":"/ // NOTE generic over the USART peripheral","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5335,"byte_end":5380,"line_start":137,"line_end":137,"column_start":1,"column_end":46}},{"value":"/ pub struct Serial<USART> { usart: USART }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5381,"byte_end":5426,"line_start":138,"line_end":138,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5427,"byte_end":5430,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ // convenience type alias","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5431,"byte_end":5460,"line_start":140,"line_end":140,"column_start":1,"column_end":30}},{"value":"/ pub type Serial1 = Serial<USART1>;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5461,"byte_end":5499,"line_start":141,"line_end":141,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5500,"byte_end":5503,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ /// Serial interface error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5504,"byte_end":5534,"line_start":143,"line_end":143,"column_start":1,"column_end":31}},{"value":"/ pub enum Error {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5535,"byte_end":5555,"line_start":144,"line_end":144,"column_start":1,"column_end":21}},{"value":"/     /// Buffer overrun","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5556,"byte_end":5582,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"/     Overrun,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5583,"byte_end":5599,"line_start":146,"line_end":146,"column_start":1,"column_end":17}},{"value":"/     // omitted: other error variants","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5600,"byte_end":5640,"line_start":147,"line_end":147,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5641,"byte_end":5646,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5647,"byte_end":5650,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ impl hal::serial::Read<u8> for Serial<USART1> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5651,"byte_end":5702,"line_start":150,"line_end":150,"column_start":1,"column_end":52}},{"value":"/     type Error = Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5703,"byte_end":5730,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5731,"byte_end":5734,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/     fn read(&mut self) -> nb::Result<u8, Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5735,"byte_end":5788,"line_start":153,"line_end":153,"column_start":1,"column_end":54}},{"value":"/         // read the status register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5789,"byte_end":5828,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/         let isr = self.usart.isr.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5829,"byte_end":5873,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5874,"byte_end":5877,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/         if isr.ore().bit_is_set() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5878,"byte_end":5917,"line_start":157,"line_end":157,"column_start":1,"column_end":40}},{"value":"/             // Error: Buffer overrun","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5918,"byte_end":5958,"line_start":158,"line_end":158,"column_start":1,"column_end":41}},{"value":"/             Err(nb::Error::Other(Error::Overrun))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":5959,"byte_end":6012,"line_start":159,"line_end":159,"column_start":1,"column_end":54}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6013,"byte_end":6026,"line_start":160,"line_end":160,"column_start":1,"column_end":14}},{"value":"/         // omitted: checks for other errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6027,"byte_end":6074,"line_start":161,"line_end":161,"column_start":1,"column_end":48}},{"value":"/         else if isr.rxne().bit_is_set() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6075,"byte_end":6120,"line_start":162,"line_end":162,"column_start":1,"column_end":46}},{"value":"/             // Data available: read the data register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6121,"byte_end":6178,"line_start":163,"line_end":163,"column_start":1,"column_end":58}},{"value":"/             Ok(self.usart.rdr.read().bits() as u8)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6179,"byte_end":6233,"line_start":164,"line_end":164,"column_start":1,"column_end":55}},{"value":"/         } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6234,"byte_end":6254,"line_start":165,"line_end":165,"column_start":1,"column_end":21}},{"value":"/             // No data available yet","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6255,"byte_end":6295,"line_start":166,"line_end":166,"column_start":1,"column_end":41}},{"value":"/             Err(nb::Error::WouldBlock)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6296,"byte_end":6338,"line_start":167,"line_end":167,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6339,"byte_end":6352,"line_start":168,"line_end":168,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6353,"byte_end":6362,"line_start":169,"line_end":169,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6363,"byte_end":6368,"line_start":170,"line_end":170,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6369,"byte_end":6372,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ impl hal::serial::Write<u8> for Serial<USART1> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6373,"byte_end":6425,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/     type Error = Error;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6426,"byte_end":6453,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6454,"byte_end":6457,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/     fn write(&mut self, byte: u8) -> nb::Result<(), Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6458,"byte_end":6522,"line_start":175,"line_end":175,"column_start":1,"column_end":65}},{"value":"/         // Similar to the `read` implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6523,"byte_end":6574,"line_start":176,"line_end":176,"column_start":1,"column_end":52}},{"value":"/         # Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6575,"byte_end":6595,"line_start":177,"line_end":177,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6596,"byte_end":6605,"line_start":178,"line_end":178,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6606,"byte_end":6609,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/     fn flush(&mut self) -> nb::Result<(), Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6610,"byte_end":6664,"line_start":180,"line_end":180,"column_start":1,"column_end":55}},{"value":"/         // Similar to the `read` implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6665,"byte_end":6716,"line_start":181,"line_end":181,"column_start":1,"column_end":52}},{"value":"/         # Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6717,"byte_end":6737,"line_start":182,"line_end":182,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6738,"byte_end":6747,"line_start":183,"line_end":183,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6748,"byte_end":6753,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6754,"byte_end":6757,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6758,"byte_end":6776,"line_start":186,"line_end":186,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6777,"byte_end":6784,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6785,"byte_end":6788,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ## Intended usage","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6789,"byte_end":6810,"line_start":189,"line_end":189,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6811,"byte_end":6814,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ Thanks to the [`nb`] crate the HAL API can be used in a blocking manner,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6815,"byte_end":6891,"line_start":191,"line_end":191,"column_start":1,"column_end":77}},{"value":"/ with `futures` or with the `await` operator using the [`block!`],","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6892,"byte_end":6961,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"/ [`try_nb!`] and [`await!`] macros respectively.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":6962,"byte_end":7013,"line_start":193,"line_end":193,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7014,"byte_end":7017,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ [`block!`]: https://docs.rs/nb/0.1.0/nb/macro.block.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7018,"byte_end":7078,"line_start":195,"line_end":195,"column_start":1,"column_end":61}},{"value":"/ [`try_nb!`]: https://docs.rs/nb/0.1.0/nb/index.html#how-to-use-this-crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7079,"byte_end":7156,"line_start":196,"line_end":196,"column_start":1,"column_end":78}},{"value":"/ [`await!`]: https://docs.rs/nb/0.1.0/nb/index.html#how-to-use-this-crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7157,"byte_end":7233,"line_start":197,"line_end":197,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7234,"byte_end":7237,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ ### Blocking mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7238,"byte_end":7259,"line_start":199,"line_end":199,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7260,"byte_end":7263,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ An example of sending a string over the serial interface in a blocking","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7264,"byte_end":7338,"line_start":201,"line_end":201,"column_start":1,"column_end":75}},{"value":"/ fashion:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7339,"byte_end":7351,"line_start":202,"line_end":202,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7352,"byte_end":7355,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7356,"byte_end":7363,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7364,"byte_end":7394,"line_start":205,"line_end":205,"column_start":1,"column_end":31}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7395,"byte_end":7418,"line_start":206,"line_end":206,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7419,"byte_end":7439,"line_start":207,"line_end":207,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7440,"byte_end":7443,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ use stm32f30x_hal::Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7444,"byte_end":7475,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/ use embedded_hal::serial::Write;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7476,"byte_end":7512,"line_start":210,"line_end":210,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7513,"byte_end":7516,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7517,"byte_end":7534,"line_start":212,"line_end":212,"column_start":1,"column_end":18}},{"value":"/ let mut serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7535,"byte_end":7566,"line_start":213,"line_end":213,"column_start":1,"column_end":32}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7567,"byte_end":7580,"line_start":214,"line_end":214,"column_start":1,"column_end":14}},{"value":"/ #   Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7581,"byte_end":7596,"line_start":215,"line_end":215,"column_start":1,"column_end":16}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7597,"byte_end":7603,"line_start":216,"line_end":216,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7604,"byte_end":7607,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ for byte in b\"Hello, world!\" {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7608,"byte_end":7642,"line_start":218,"line_end":218,"column_start":1,"column_end":35}},{"value":"/     // NOTE `block!` blocks until `serial.write()` completes and returns","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7643,"byte_end":7719,"line_start":219,"line_end":219,"column_start":1,"column_end":77}},{"value":"/     // `Result<(), Error>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7720,"byte_end":7750,"line_start":220,"line_end":220,"column_start":1,"column_end":31}},{"value":"/     block!(serial.write(*byte)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7751,"byte_end":7796,"line_start":221,"line_end":221,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7797,"byte_end":7802,"line_start":222,"line_end":222,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7803,"byte_end":7810,"line_start":223,"line_end":223,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7811,"byte_end":7814,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7815,"byte_end":7840,"line_start":225,"line_end":225,"column_start":1,"column_end":26}},{"value":"/ #     extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7841,"byte_end":7869,"line_start":226,"line_end":226,"column_start":1,"column_end":29}},{"value":"/ #     use self::void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7870,"byte_end":7901,"line_start":227,"line_end":227,"column_start":1,"column_end":32}},{"value":"/ #     pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7902,"byte_end":7931,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ #     impl Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7932,"byte_end":7956,"line_start":229,"line_end":229,"column_start":1,"column_end":25}},{"value":"/ #         pub fn write(&mut self, _: u8) -> ::nb::Result<(), Void> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":7957,"byte_end":8029,"line_start":230,"line_end":230,"column_start":1,"column_end":73}},{"value":"/ #             Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8030,"byte_end":8054,"line_start":231,"line_end":231,"column_start":1,"column_end":25}},{"value":"/ #         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8055,"byte_end":8070,"line_start":232,"line_end":232,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8071,"byte_end":8082,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8083,"byte_end":8090,"line_start":234,"line_end":234,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8091,"byte_end":8098,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8099,"byte_end":8102,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ### `futures`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8103,"byte_end":8120,"line_start":237,"line_end":237,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8121,"byte_end":8124,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ An example of running two tasks concurrently. First task: blink an LED every","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8125,"byte_end":8205,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"/ second. Second task: loop back data over the serial interface.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8206,"byte_end":8272,"line_start":240,"line_end":240,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8273,"byte_end":8276,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8277,"byte_end":8284,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8285,"byte_end":8322,"line_start":243,"line_end":243,"column_start":1,"column_end":38}},{"value":"/ extern crate futures;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8323,"byte_end":8348,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/ extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8349,"byte_end":8371,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8372,"byte_end":8375,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ #[macro_use(try_nb)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8376,"byte_end":8400,"line_start":247,"line_end":247,"column_start":1,"column_end":25}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8401,"byte_end":8421,"line_start":248,"line_end":248,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8422,"byte_end":8425,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8426,"byte_end":8450,"line_start":250,"line_end":250,"column_start":1,"column_end":25}},{"value":"/ use futures::{","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8451,"byte_end":8469,"line_start":251,"line_end":251,"column_start":1,"column_end":19}},{"value":"/     future,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8470,"byte_end":8485,"line_start":252,"line_end":252,"column_start":1,"column_end":16}},{"value":"/     Async,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8486,"byte_end":8500,"line_start":253,"line_end":253,"column_start":1,"column_end":15}},{"value":"/     Future,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8501,"byte_end":8516,"line_start":254,"line_end":254,"column_start":1,"column_end":16}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8517,"byte_end":8523,"line_start":255,"line_end":255,"column_start":1,"column_end":7}},{"value":"/ use futures::future::Loop;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8524,"byte_end":8554,"line_start":256,"line_end":256,"column_start":1,"column_end":31}},{"value":"/ use stm32f30x_hal::{Led, Serial1, Timer6};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8555,"byte_end":8601,"line_start":257,"line_end":257,"column_start":1,"column_end":47}},{"value":"/ use void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8602,"byte_end":8621,"line_start":258,"line_end":258,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8622,"byte_end":8625,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `CountDown.wait`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8626,"byte_end":8671,"line_start":260,"line_end":260,"column_start":1,"column_end":46}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8672,"byte_end":8679,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8680,"byte_end":8743,"line_start":262,"line_end":262,"column_start":1,"column_end":64}},{"value":"/ fn wait<T>(mut timer: T) -> impl Future<Item = T, Error = Void>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8744,"byte_end":8811,"line_start":263,"line_end":263,"column_start":1,"column_end":68}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8812,"byte_end":8821,"line_start":264,"line_end":264,"column_start":1,"column_end":10}},{"value":"/     T: hal::timer::CountDown,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8822,"byte_end":8855,"line_start":265,"line_end":265,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8856,"byte_end":8861,"line_start":266,"line_end":266,"column_start":1,"column_end":6}},{"value":"/     let mut timer = Some(timer);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8862,"byte_end":8898,"line_start":267,"line_end":267,"column_start":1,"column_end":37}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8899,"byte_end":8932,"line_start":268,"line_end":268,"column_start":1,"column_end":34}},{"value":"/         try_nb!(timer.as_mut().unwrap().wait());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8933,"byte_end":8985,"line_start":269,"line_end":269,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8986,"byte_end":8989,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready(timer.take().unwrap()))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":8990,"byte_end":9041,"line_start":271,"line_end":271,"column_start":1,"column_end":52}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9042,"byte_end":9052,"line_start":272,"line_end":272,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9053,"byte_end":9058,"line_start":273,"line_end":273,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9059,"byte_end":9062,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `Serial.read`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9063,"byte_end":9105,"line_start":275,"line_end":275,"column_start":1,"column_end":43}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9106,"byte_end":9113,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9114,"byte_end":9177,"line_start":277,"line_end":277,"column_start":1,"column_end":64}},{"value":"/ fn read<S>(mut serial: S) -> impl Future<Item = (S, u8), Error = S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9178,"byte_end":9256,"line_start":278,"line_end":278,"column_start":1,"column_end":79}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9257,"byte_end":9266,"line_start":279,"line_end":279,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Read<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9267,"byte_end":9300,"line_start":280,"line_end":280,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9301,"byte_end":9306,"line_start":281,"line_end":281,"column_start":1,"column_end":6}},{"value":"/     let mut serial = Some(serial);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9307,"byte_end":9345,"line_start":282,"line_end":282,"column_start":1,"column_end":39}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9346,"byte_end":9379,"line_start":283,"line_end":283,"column_start":1,"column_end":34}},{"value":"/         let byte = try_nb!(serial.as_mut().unwrap().read());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9380,"byte_end":9444,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9445,"byte_end":9448,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready((serial.take().unwrap(), byte)))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9449,"byte_end":9509,"line_start":286,"line_end":286,"column_start":1,"column_end":61}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9510,"byte_end":9520,"line_start":287,"line_end":287,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9521,"byte_end":9526,"line_start":288,"line_end":288,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9527,"byte_end":9530,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ /// `futures` version of `Serial.write`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9531,"byte_end":9574,"line_start":290,"line_end":290,"column_start":1,"column_end":44}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9575,"byte_end":9582,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ /// This returns a future that must be polled to completion","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9583,"byte_end":9646,"line_start":292,"line_end":292,"column_start":1,"column_end":64}},{"value":"/ fn write<S>(mut serial: S, byte: u8) -> impl Future<Item = S, Error = S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9647,"byte_end":9730,"line_start":293,"line_end":293,"column_start":1,"column_end":84}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9731,"byte_end":9740,"line_start":294,"line_end":294,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9741,"byte_end":9775,"line_start":295,"line_end":295,"column_start":1,"column_end":35}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9776,"byte_end":9781,"line_start":296,"line_end":296,"column_start":1,"column_end":6}},{"value":"/     let mut serial = Some(serial);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9782,"byte_end":9820,"line_start":297,"line_end":297,"column_start":1,"column_end":39}},{"value":"/     future::poll_fn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9821,"byte_end":9854,"line_start":298,"line_end":298,"column_start":1,"column_end":34}},{"value":"/         try_nb!(serial.as_mut().unwrap().write(byte));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9855,"byte_end":9913,"line_start":299,"line_end":299,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9914,"byte_end":9917,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/         Ok(Async::Ready(serial.take().unwrap()))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9918,"byte_end":9970,"line_start":301,"line_end":301,"column_start":1,"column_end":53}},{"value":"/     })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9971,"byte_end":9981,"line_start":302,"line_end":302,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9982,"byte_end":9987,"line_start":303,"line_end":303,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9988,"byte_end":9991,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":9992,"byte_end":10007,"line_start":305,"line_end":305,"column_start":1,"column_end":16}},{"value":"/     // HAL implementers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10008,"byte_end":10035,"line_start":306,"line_end":306,"column_start":1,"column_end":28}},{"value":"/     let timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10036,"byte_end":10065,"line_start":307,"line_end":307,"column_start":1,"column_end":30}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10066,"byte_end":10083,"line_start":308,"line_end":308,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10084,"byte_end":10102,"line_start":309,"line_end":309,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10103,"byte_end":10113,"line_start":310,"line_end":310,"column_start":1,"column_end":11}},{"value":"/     let serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10114,"byte_end":10145,"line_start":311,"line_end":311,"column_start":1,"column_end":32}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10146,"byte_end":10163,"line_start":312,"line_end":312,"column_start":1,"column_end":18}},{"value":"/ #       Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10164,"byte_end":10183,"line_start":313,"line_end":313,"column_start":1,"column_end":20}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10184,"byte_end":10194,"line_start":314,"line_end":314,"column_start":1,"column_end":11}},{"value":"/     let led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10195,"byte_end":10219,"line_start":315,"line_end":315,"column_start":1,"column_end":25}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10220,"byte_end":10237,"line_start":316,"line_end":316,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10238,"byte_end":10253,"line_start":317,"line_end":317,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10254,"byte_end":10264,"line_start":318,"line_end":318,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10265,"byte_end":10268,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/     // Tasks","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10269,"byte_end":10285,"line_start":320,"line_end":320,"column_start":1,"column_end":17}},{"value":"/     let mut blinky = future::loop_fn::<_, (), _, _>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10286,"byte_end":10342,"line_start":321,"line_end":321,"column_start":1,"column_end":57}},{"value":"/         (led, timer, true),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10343,"byte_end":10374,"line_start":322,"line_end":322,"column_start":1,"column_end":32}},{"value":"/         |(mut led, mut timer, state)| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10375,"byte_end":10418,"line_start":323,"line_end":323,"column_start":1,"column_end":44}},{"value":"/             wait(timer).map(move |timer| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10419,"byte_end":10465,"line_start":324,"line_end":324,"column_start":1,"column_end":47}},{"value":"/                 if state {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10466,"byte_end":10496,"line_start":325,"line_end":325,"column_start":1,"column_end":31}},{"value":"/                     led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10497,"byte_end":10530,"line_start":326,"line_end":326,"column_start":1,"column_end":34}},{"value":"/                 } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10531,"byte_end":10559,"line_start":327,"line_end":327,"column_start":1,"column_end":29}},{"value":"/                     led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10560,"byte_end":10594,"line_start":328,"line_end":328,"column_start":1,"column_end":35}},{"value":"/                 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10595,"byte_end":10616,"line_start":329,"line_end":329,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10617,"byte_end":10620,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/                 Loop::Continue((led, timer, !state))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10621,"byte_end":10677,"line_start":331,"line_end":331,"column_start":1,"column_end":57}},{"value":"/             })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10678,"byte_end":10696,"line_start":332,"line_end":332,"column_start":1,"column_end":19}},{"value":"/         });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10697,"byte_end":10712,"line_start":333,"line_end":333,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10713,"byte_end":10716,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/     let mut loopback = future::loop_fn::<_, (), _, _>(serial, |mut serial| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10717,"byte_end":10797,"line_start":335,"line_end":335,"column_start":1,"column_end":81}},{"value":"/         read(serial).and_then(|(serial, byte)| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10798,"byte_end":10850,"line_start":336,"line_end":336,"column_start":1,"column_end":53}},{"value":"/             write(serial, byte)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10851,"byte_end":10886,"line_start":337,"line_end":337,"column_start":1,"column_end":36}},{"value":"/         }).map(|serial| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10887,"byte_end":10916,"line_start":338,"line_end":338,"column_start":1,"column_end":30}},{"value":"/             Loop::Continue(serial)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10917,"byte_end":10955,"line_start":339,"line_end":339,"column_start":1,"column_end":39}},{"value":"/         })","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10956,"byte_end":10970,"line_start":340,"line_end":340,"column_start":1,"column_end":15}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10971,"byte_end":10982,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10983,"byte_end":10986,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/     // Event loop","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":10987,"byte_end":11008,"line_start":343,"line_end":343,"column_start":1,"column_end":22}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11009,"byte_end":11023,"line_start":344,"line_end":344,"column_start":1,"column_end":15}},{"value":"/         blinky.poll().unwrap(); // NOTE(unwrap) E = Void","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11024,"byte_end":11084,"line_start":345,"line_end":345,"column_start":1,"column_end":61}},{"value":"/         loopback.poll().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11085,"byte_end":11122,"line_start":346,"line_end":346,"column_start":1,"column_end":38}},{"value":"/ #       break;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11123,"byte_end":11141,"line_start":347,"line_end":347,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11142,"byte_end":11151,"line_start":348,"line_end":348,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11152,"byte_end":11157,"line_start":349,"line_end":349,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11158,"byte_end":11161,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11162,"byte_end":11187,"line_start":351,"line_end":351,"column_start":1,"column_end":26}},{"value":"/ #     extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11188,"byte_end":11216,"line_start":352,"line_end":352,"column_start":1,"column_end":29}},{"value":"/ #     use self::void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11217,"byte_end":11248,"line_start":353,"line_end":353,"column_start":1,"column_end":32}},{"value":"/ #     pub struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11249,"byte_end":11277,"line_start":354,"line_end":354,"column_start":1,"column_end":29}},{"value":"/ #     impl ::hal::timer::CountDown for Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11278,"byte_end":11329,"line_start":355,"line_end":355,"column_start":1,"column_end":52}},{"value":"/ #         type Time = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11330,"byte_end":11359,"line_start":356,"line_end":356,"column_start":1,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11360,"byte_end":11365,"line_start":357,"line_end":357,"column_start":1,"column_end":6}},{"value":"/ #         fn start<T>(&mut self, _: T) where T: Into<()> {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11366,"byte_end":11429,"line_start":358,"line_end":358,"column_start":1,"column_end":64}},{"value":"/ #         fn wait(&mut self) -> ::nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11430,"byte_end":11521,"line_start":359,"line_end":359,"column_start":1,"column_end":92}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11522,"byte_end":11533,"line_start":360,"line_end":360,"column_start":1,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11534,"byte_end":11539,"line_start":361,"line_end":361,"column_start":1,"column_end":6}},{"value":"/ #     pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11540,"byte_end":11569,"line_start":362,"line_end":362,"column_start":1,"column_end":30}},{"value":"/ #     impl ::hal::serial::Read<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11570,"byte_end":11622,"line_start":363,"line_end":363,"column_start":1,"column_end":53}},{"value":"/ #         type Error = Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11623,"byte_end":11655,"line_start":364,"line_end":364,"column_start":1,"column_end":33}},{"value":"/ #         fn read(&mut self) -> ::nb::Result<u8, Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11656,"byte_end":11747,"line_start":365,"line_end":365,"column_start":1,"column_end":92}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11748,"byte_end":11759,"line_start":366,"line_end":366,"column_start":1,"column_end":12}},{"value":"/ #     impl ::hal::serial::Write<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11760,"byte_end":11813,"line_start":367,"line_end":367,"column_start":1,"column_end":54}},{"value":"/ #         type Error = Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11814,"byte_end":11846,"line_start":368,"line_end":368,"column_start":1,"column_end":33}},{"value":"/ #         fn flush(&mut self) -> ::nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11847,"byte_end":11939,"line_start":369,"line_end":369,"column_start":1,"column_end":93}},{"value":"/ #         fn write(&mut self, _: u8) -> ::nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":11940,"byte_end":12039,"line_start":370,"line_end":370,"column_start":1,"column_end":100}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12040,"byte_end":12051,"line_start":371,"line_end":371,"column_start":1,"column_end":12}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12052,"byte_end":12057,"line_start":372,"line_end":372,"column_start":1,"column_end":6}},{"value":"/ #     pub struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12058,"byte_end":12083,"line_start":373,"line_end":373,"column_start":1,"column_end":26}},{"value":"/ #     impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12084,"byte_end":12104,"line_start":374,"line_end":374,"column_start":1,"column_end":21}},{"value":"/ #         pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12105,"byte_end":12143,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ #         pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12144,"byte_end":12181,"line_start":376,"line_end":376,"column_start":1,"column_end":38}},{"value":"/ #     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12182,"byte_end":12193,"line_start":377,"line_end":377,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12194,"byte_end":12201,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12202,"byte_end":12209,"line_start":379,"line_end":379,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12210,"byte_end":12213,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ ### `await`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12214,"byte_end":12229,"line_start":381,"line_end":381,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12230,"byte_end":12233,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Same example as above but using `await!` instead of `futures`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12234,"byte_end":12300,"line_start":383,"line_end":383,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12301,"byte_end":12304,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12305,"byte_end":12312,"line_start":385,"line_end":385,"column_start":1,"column_end":8}},{"value":"/ #![feature(generator_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12313,"byte_end":12345,"line_start":386,"line_end":386,"column_start":1,"column_end":33}},{"value":"/ #![feature(generators)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12346,"byte_end":12373,"line_start":387,"line_end":387,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12374,"byte_end":12377,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12378,"byte_end":12415,"line_start":389,"line_end":389,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12416,"byte_end":12419,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ #[macro_use(await)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12420,"byte_end":12443,"line_start":391,"line_end":391,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12444,"byte_end":12464,"line_start":392,"line_end":392,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12465,"byte_end":12468,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ use std::ops::Generator;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12469,"byte_end":12497,"line_start":394,"line_end":394,"column_start":1,"column_end":29}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12498,"byte_end":12520,"line_start":395,"line_end":395,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12521,"byte_end":12524,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12525,"byte_end":12549,"line_start":397,"line_end":397,"column_start":1,"column_end":25}},{"value":"/ use stm32f30x_hal::{Led, Serial1, Timer6};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12550,"byte_end":12596,"line_start":398,"line_end":398,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12597,"byte_end":12600,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12601,"byte_end":12616,"line_start":400,"line_end":400,"column_start":1,"column_end":16}},{"value":"/     // HAL implementers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12617,"byte_end":12644,"line_start":401,"line_end":401,"column_start":1,"column_end":28}},{"value":"/     let mut timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12645,"byte_end":12678,"line_start":402,"line_end":402,"column_start":1,"column_end":34}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12679,"byte_end":12696,"line_start":403,"line_end":403,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12697,"byte_end":12715,"line_start":404,"line_end":404,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12716,"byte_end":12726,"line_start":405,"line_end":405,"column_start":1,"column_end":11}},{"value":"/     let mut serial: Serial1 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12727,"byte_end":12762,"line_start":406,"line_end":406,"column_start":1,"column_end":36}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12763,"byte_end":12780,"line_start":407,"line_end":407,"column_start":1,"column_end":18}},{"value":"/ #       Serial1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12781,"byte_end":12800,"line_start":408,"line_end":408,"column_start":1,"column_end":20}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12801,"byte_end":12811,"line_start":409,"line_end":409,"column_start":1,"column_end":11}},{"value":"/     let mut led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12812,"byte_end":12840,"line_start":410,"line_end":410,"column_start":1,"column_end":29}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12841,"byte_end":12858,"line_start":411,"line_end":411,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12859,"byte_end":12874,"line_start":412,"line_end":412,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12875,"byte_end":12885,"line_start":413,"line_end":413,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12886,"byte_end":12889,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/     // Tasks","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12890,"byte_end":12906,"line_start":415,"line_end":415,"column_start":1,"column_end":17}},{"value":"/     let mut blinky = (move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12907,"byte_end":12942,"line_start":416,"line_end":416,"column_start":1,"column_end":36}},{"value":"/         let mut state = false;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12943,"byte_end":12977,"line_start":417,"line_end":417,"column_start":1,"column_end":35}},{"value":"/         loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12978,"byte_end":12996,"line_start":418,"line_end":418,"column_start":1,"column_end":19}},{"value":"/             // `await!` means \"suspend / yield here\" instead of \"block until","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":12997,"byte_end":13077,"line_start":419,"line_end":419,"column_start":1,"column_end":81}},{"value":"/             // completion\"","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13078,"byte_end":13108,"line_start":420,"line_end":420,"column_start":1,"column_end":31}},{"value":"/             await!(timer.wait()).unwrap(); // NOTE(unwrap) E = Void","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13109,"byte_end":13180,"line_start":421,"line_end":421,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13181,"byte_end":13184,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/             state = !state;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13185,"byte_end":13216,"line_start":423,"line_end":423,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13217,"byte_end":13220,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/             if state {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13221,"byte_end":13247,"line_start":425,"line_end":425,"column_start":1,"column_end":27}},{"value":"/                 led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13248,"byte_end":13277,"line_start":426,"line_end":426,"column_start":1,"column_end":30}},{"value":"/             } else {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13278,"byte_end":13302,"line_start":427,"line_end":427,"column_start":1,"column_end":25}},{"value":"/                 led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13303,"byte_end":13333,"line_start":428,"line_end":428,"column_start":1,"column_end":31}},{"value":"/             }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13334,"byte_end":13351,"line_start":429,"line_end":429,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13352,"byte_end":13365,"line_start":430,"line_end":430,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13366,"byte_end":13377,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13378,"byte_end":13381,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/     let mut loopback = (move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13382,"byte_end":13419,"line_start":433,"line_end":433,"column_start":1,"column_end":38}},{"value":"/         loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13420,"byte_end":13438,"line_start":434,"line_end":434,"column_start":1,"column_end":19}},{"value":"/             let byte = await!(serial.read()).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13439,"byte_end":13497,"line_start":435,"line_end":435,"column_start":1,"column_end":59}},{"value":"/             await!(serial.write(byte)).unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13498,"byte_end":13550,"line_start":436,"line_end":436,"column_start":1,"column_end":53}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13551,"byte_end":13564,"line_start":437,"line_end":437,"column_start":1,"column_end":14}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13565,"byte_end":13576,"line_start":438,"line_end":438,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13577,"byte_end":13580,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/     // Event loop","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13581,"byte_end":13602,"line_start":440,"line_end":440,"column_start":1,"column_end":22}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13603,"byte_end":13617,"line_start":441,"line_end":441,"column_start":1,"column_end":15}},{"value":"/         Pin::new(&mut blinky).resume(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13618,"byte_end":13663,"line_start":442,"line_end":442,"column_start":1,"column_end":46}},{"value":"/         Pin::new(&mut loopback).resume(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13664,"byte_end":13711,"line_start":443,"line_end":443,"column_start":1,"column_end":48}},{"value":"/         # break;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13712,"byte_end":13732,"line_start":444,"line_end":444,"column_start":1,"column_end":21}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13733,"byte_end":13742,"line_start":445,"line_end":445,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13743,"byte_end":13748,"line_start":446,"line_end":446,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13749,"byte_end":13752,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ # mod stm32f30x_hal {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13753,"byte_end":13778,"line_start":448,"line_end":448,"column_start":1,"column_end":26}},{"value":"/ #   extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13779,"byte_end":13805,"line_start":449,"line_end":449,"column_start":1,"column_end":27}},{"value":"/ #   use self::void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13806,"byte_end":13835,"line_start":450,"line_end":450,"column_start":1,"column_end":30}},{"value":"/ #   pub struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13836,"byte_end":13863,"line_start":451,"line_end":451,"column_start":1,"column_end":28}},{"value":"/ #   impl Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13864,"byte_end":13886,"line_start":452,"line_end":452,"column_start":1,"column_end":23}},{"value":"/ #       pub fn read(&mut self) -> ::nb::Result<u8, Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13887,"byte_end":13980,"line_start":453,"line_end":453,"column_start":1,"column_end":94}},{"value":"/ #       pub fn write(&mut self, _: u8) -> ::nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":13981,"byte_end":14082,"line_start":454,"line_end":454,"column_start":1,"column_end":102}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14083,"byte_end":14092,"line_start":455,"line_end":455,"column_start":1,"column_end":10}},{"value":"/ #   pub struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14093,"byte_end":14119,"line_start":456,"line_end":456,"column_start":1,"column_end":27}},{"value":"/ #   impl Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14120,"byte_end":14141,"line_start":457,"line_end":457,"column_start":1,"column_end":22}},{"value":"/ #       pub fn wait(&mut self) -> ::nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14142,"byte_end":14235,"line_start":458,"line_end":458,"column_start":1,"column_end":94}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14236,"byte_end":14245,"line_start":459,"line_end":459,"column_start":1,"column_end":10}},{"value":"/ #   pub struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14246,"byte_end":14269,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ #   impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14270,"byte_end":14288,"line_start":461,"line_end":461,"column_start":1,"column_end":19}},{"value":"/ #       pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14289,"byte_end":14325,"line_start":462,"line_end":462,"column_start":1,"column_end":37}},{"value":"/ #       pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14326,"byte_end":14361,"line_start":463,"line_end":463,"column_start":1,"column_end":36}},{"value":"/ #   }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14362,"byte_end":14371,"line_start":464,"line_end":464,"column_start":1,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14372,"byte_end":14379,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14380,"byte_end":14387,"line_start":466,"line_end":466,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14388,"byte_end":14391,"line_start":467,"line_end":467,"column_start":1,"column_end":4}},{"value":"/ ## Generic programming and higher level abstractions","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14392,"byte_end":14448,"line_start":468,"line_end":468,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14449,"byte_end":14452,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ The core of the HAL has been kept minimal on purpose to encourage building **generic** higher","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14453,"byte_end":14550,"line_start":470,"line_end":470,"column_start":1,"column_end":98}},{"value":"/ level abstractions on top of it. Some higher level abstractions that pick an asynchronous model","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14551,"byte_end":14650,"line_start":471,"line_end":471,"column_start":1,"column_end":100}},{"value":"/ or that have blocking behavior and that are deemed useful to build other abstractions can be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14651,"byte_end":14747,"line_start":472,"line_end":472,"column_start":1,"column_end":97}},{"value":"/ found in the `blocking` module and, in the future, in the `futures` and `async` modules.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14748,"byte_end":14840,"line_start":473,"line_end":473,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14841,"byte_end":14844,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ Some examples:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14845,"byte_end":14863,"line_start":475,"line_end":475,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14864,"byte_end":14867,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ **NOTE** All the functions shown below could have been written as trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14868,"byte_end":14943,"line_start":477,"line_end":477,"column_start":1,"column_end":76}},{"value":"/ methods with default implementation to allow specialization, but they have","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":14944,"byte_end":15022,"line_start":478,"line_end":478,"column_start":1,"column_end":79}},{"value":"/ been written as functions to keep things simple.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15023,"byte_end":15075,"line_start":479,"line_end":479,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15076,"byte_end":15079,"line_start":480,"line_end":480,"column_start":1,"column_end":4}},{"value":"/ - Write a whole buffer to a serial device in blocking a fashion.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15080,"byte_end":15148,"line_start":481,"line_end":481,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15149,"byte_end":15152,"line_start":482,"line_end":482,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15153,"byte_end":15160,"line_start":483,"line_end":483,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15161,"byte_end":15198,"line_start":484,"line_end":484,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15199,"byte_end":15222,"line_start":485,"line_end":485,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15223,"byte_end":15243,"line_start":486,"line_end":486,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15244,"byte_end":15247,"line_start":487,"line_end":487,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15248,"byte_end":15272,"line_start":488,"line_end":488,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15273,"byte_end":15276,"line_start":489,"line_end":489,"column_start":1,"column_end":4}},{"value":"/ fn write_all<S>(serial: &mut S, buffer: &[u8]) -> Result<(), S::Error>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15277,"byte_end":15351,"line_start":490,"line_end":490,"column_start":1,"column_end":75}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15352,"byte_end":15361,"line_start":491,"line_end":491,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15362,"byte_end":15395,"line_start":492,"line_end":492,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15396,"byte_end":15401,"line_start":493,"line_end":493,"column_start":1,"column_end":6}},{"value":"/     for &byte in buffer {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15402,"byte_end":15431,"line_start":494,"line_end":494,"column_start":1,"column_end":30}},{"value":"/         block!(serial.write(byte))?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15432,"byte_end":15472,"line_start":495,"line_end":495,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15473,"byte_end":15482,"line_start":496,"line_end":496,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15483,"byte_end":15486,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/     Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15487,"byte_end":15501,"line_start":498,"line_end":498,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15502,"byte_end":15507,"line_start":499,"line_end":499,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15508,"byte_end":15511,"line_start":500,"line_end":500,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15512,"byte_end":15530,"line_start":501,"line_end":501,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15531,"byte_end":15538,"line_start":502,"line_end":502,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15539,"byte_end":15542,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ - Blocking serial read with timeout","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15543,"byte_end":15582,"line_start":504,"line_end":504,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15583,"byte_end":15586,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15587,"byte_end":15594,"line_start":506,"line_end":506,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15595,"byte_end":15632,"line_start":507,"line_end":507,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15633,"byte_end":15653,"line_start":508,"line_end":508,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15654,"byte_end":15657,"line_start":509,"line_end":509,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15658,"byte_end":15682,"line_start":510,"line_end":510,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15683,"byte_end":15686,"line_start":511,"line_end":511,"column_start":1,"column_end":4}},{"value":"/ enum Error<E> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15687,"byte_end":15706,"line_start":512,"line_end":512,"column_start":1,"column_end":20}},{"value":"/     /// Serial interface error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15707,"byte_end":15741,"line_start":513,"line_end":513,"column_start":1,"column_end":35}},{"value":"/     Serial(E),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15742,"byte_end":15760,"line_start":514,"line_end":514,"column_start":1,"column_end":19}},{"value":"/     TimedOut,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15761,"byte_end":15778,"line_start":515,"line_end":515,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15779,"byte_end":15784,"line_start":516,"line_end":516,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15785,"byte_end":15788,"line_start":517,"line_end":517,"column_start":1,"column_end":4}},{"value":"/ fn read_with_timeout<S, T>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15789,"byte_end":15820,"line_start":518,"line_end":518,"column_start":1,"column_end":32}},{"value":"/     serial: &mut S,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15821,"byte_end":15844,"line_start":519,"line_end":519,"column_start":1,"column_end":24}},{"value":"/     timer: &mut T,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15845,"byte_end":15867,"line_start":520,"line_end":520,"column_start":1,"column_end":23}},{"value":"/     timeout: T::Time,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15868,"byte_end":15893,"line_start":521,"line_end":521,"column_start":1,"column_end":26}},{"value":"/ ) -> Result<u8, Error<S::Error>>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15894,"byte_end":15930,"line_start":522,"line_end":522,"column_start":1,"column_end":37}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15931,"byte_end":15940,"line_start":523,"line_end":523,"column_start":1,"column_end":10}},{"value":"/     T: hal::timer::CountDown,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15941,"byte_end":15974,"line_start":524,"line_end":524,"column_start":1,"column_end":34}},{"value":"/     S: hal::serial::Read<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":15975,"byte_end":16008,"line_start":525,"line_end":525,"column_start":1,"column_end":34}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16009,"byte_end":16014,"line_start":526,"line_end":526,"column_start":1,"column_end":6}},{"value":"/     timer.start(timeout);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16015,"byte_end":16044,"line_start":527,"line_end":527,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16045,"byte_end":16048,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16049,"byte_end":16063,"line_start":529,"line_end":529,"column_start":1,"column_end":15}},{"value":"/         match serial.read() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16064,"byte_end":16097,"line_start":530,"line_end":530,"column_start":1,"column_end":34}},{"value":"/             // raise error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16098,"byte_end":16128,"line_start":531,"line_end":531,"column_start":1,"column_end":31}},{"value":"/             Err(nb::Error::Other(e)) => return Err(Error::Serial(e)),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16129,"byte_end":16202,"line_start":532,"line_end":532,"column_start":1,"column_end":74}},{"value":"/             Err(nb::Error::WouldBlock) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16203,"byte_end":16250,"line_start":533,"line_end":533,"column_start":1,"column_end":48}},{"value":"/                 // no data available yet, check the timer below","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16251,"byte_end":16318,"line_start":534,"line_end":534,"column_start":1,"column_end":68}},{"value":"/             },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16319,"byte_end":16337,"line_start":535,"line_end":535,"column_start":1,"column_end":19}},{"value":"/             Ok(byte) => return Ok(byte),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16338,"byte_end":16382,"line_start":536,"line_end":536,"column_start":1,"column_end":45}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16383,"byte_end":16396,"line_start":537,"line_end":537,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16397,"byte_end":16400,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/         match timer.wait() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16401,"byte_end":16433,"line_start":539,"line_end":539,"column_start":1,"column_end":33}},{"value":"/             Err(nb::Error::Other(e)) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16434,"byte_end":16479,"line_start":540,"line_end":540,"column_start":1,"column_end":46}},{"value":"/                 // The error type specified by `timer.wait()` is `!`, which","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16480,"byte_end":16559,"line_start":541,"line_end":541,"column_start":1,"column_end":80}},{"value":"/                 // means no error can actually occur. The Rust compiler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16560,"byte_end":16635,"line_start":542,"line_end":542,"column_start":1,"column_end":76}},{"value":"/                 // still forces us to provide this match arm, though.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16636,"byte_end":16709,"line_start":543,"line_end":543,"column_start":1,"column_end":74}},{"value":"/                 unreachable!()","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16710,"byte_end":16744,"line_start":544,"line_end":544,"column_start":1,"column_end":35}},{"value":"/             },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16745,"byte_end":16763,"line_start":545,"line_end":545,"column_start":1,"column_end":19}},{"value":"/             // no timeout yet, try again","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16764,"byte_end":16808,"line_start":546,"line_end":546,"column_start":1,"column_end":45}},{"value":"/             Err(nb::Error::WouldBlock) => continue,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16809,"byte_end":16864,"line_start":547,"line_end":547,"column_start":1,"column_end":56}},{"value":"/             Ok(()) => return Err(Error::TimedOut),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16865,"byte_end":16919,"line_start":548,"line_end":548,"column_start":1,"column_end":55}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16920,"byte_end":16933,"line_start":549,"line_end":549,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16934,"byte_end":16943,"line_start":550,"line_end":550,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16944,"byte_end":16949,"line_start":551,"line_end":551,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16950,"byte_end":16953,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16954,"byte_end":16972,"line_start":553,"line_end":553,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16973,"byte_end":16980,"line_start":554,"line_end":554,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16981,"byte_end":16984,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ - Asynchronous SPI transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":16985,"byte_end":17016,"line_start":556,"line_end":556,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17017,"byte_end":17020,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17021,"byte_end":17028,"line_start":558,"line_end":558,"column_start":1,"column_end":8}},{"value":"/ #![feature(conservative_impl_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17029,"byte_end":17069,"line_start":559,"line_end":559,"column_start":1,"column_end":41}},{"value":"/ #![feature(generators)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17070,"byte_end":17097,"line_start":560,"line_end":560,"column_start":1,"column_end":28}},{"value":"/ #![feature(generator_trait)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17098,"byte_end":17130,"line_start":561,"line_end":561,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17131,"byte_end":17134,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17135,"byte_end":17172,"line_start":563,"line_end":563,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(await)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17173,"byte_end":17196,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17197,"byte_end":17217,"line_start":565,"line_end":565,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17218,"byte_end":17221,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ use std::ops::Generator;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17222,"byte_end":17250,"line_start":567,"line_end":567,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17251,"byte_end":17254,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ /// Transfers a byte buffer of size N","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17255,"byte_end":17296,"line_start":569,"line_end":569,"column_start":1,"column_end":42}},{"value":"/ ///","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17297,"byte_end":17304,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ /// Returns the same byte buffer but filled with the data received from the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17305,"byte_end":17384,"line_start":571,"line_end":571,"column_start":1,"column_end":80}},{"value":"/ /// slave device","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17385,"byte_end":17405,"line_start":572,"line_end":572,"column_start":1,"column_end":21}},{"value":"/ fn transfer<S, B>(","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17406,"byte_end":17428,"line_start":573,"line_end":573,"column_start":1,"column_end":23}},{"value":"/     mut spi: S,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17429,"byte_end":17448,"line_start":574,"line_end":574,"column_start":1,"column_end":20}},{"value":"/     mut buffer: [u8; 16], // NOTE this should be generic over the size of the array","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17449,"byte_end":17536,"line_start":575,"line_end":575,"column_start":1,"column_end":88}},{"value":"/ ) -> impl Generator<Return = Result<(S, [u8; 16]), S::Error>, Yield = ()>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17537,"byte_end":17614,"line_start":576,"line_end":576,"column_start":1,"column_end":78}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17615,"byte_end":17624,"line_start":577,"line_end":577,"column_start":1,"column_end":10}},{"value":"/     S: hal::spi::FullDuplex<u8>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17625,"byte_end":17661,"line_start":578,"line_end":578,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17662,"byte_end":17667,"line_start":579,"line_end":579,"column_start":1,"column_end":6}},{"value":"/     move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17668,"byte_end":17685,"line_start":580,"line_end":580,"column_start":1,"column_end":18}},{"value":"/         let n = buffer.len();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17686,"byte_end":17719,"line_start":581,"line_end":581,"column_start":1,"column_end":34}},{"value":"/         for i in 0..n {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17720,"byte_end":17747,"line_start":582,"line_end":582,"column_start":1,"column_end":28}},{"value":"/             await!(spi.send(buffer[i]))?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17748,"byte_end":17793,"line_start":583,"line_end":583,"column_start":1,"column_end":46}},{"value":"/             buffer[i] = await!(spi.read())?;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17794,"byte_end":17842,"line_start":584,"line_end":584,"column_start":1,"column_end":49}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17843,"byte_end":17856,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17857,"byte_end":17860,"line_start":586,"line_end":586,"column_start":1,"column_end":4}},{"value":"/         Ok((spi, buffer))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17861,"byte_end":17890,"line_start":587,"line_end":587,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17891,"byte_end":17900,"line_start":588,"line_end":588,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17901,"byte_end":17906,"line_start":589,"line_end":589,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17907,"byte_end":17910,"line_start":590,"line_end":590,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17911,"byte_end":17929,"line_start":591,"line_end":591,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17930,"byte_end":17937,"line_start":592,"line_end":592,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17938,"byte_end":17941,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ - Buffered serial interface with periodic flushing in interrupt handler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":17942,"byte_end":18017,"line_start":594,"line_end":594,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18018,"byte_end":18021,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18022,"byte_end":18029,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18030,"byte_end":18067,"line_start":597,"line_end":597,"column_start":1,"column_end":38}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18068,"byte_end":18088,"line_start":598,"line_end":598,"column_start":1,"column_end":21}},{"value":"/ extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18089,"byte_end":18111,"line_start":599,"line_end":599,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18112,"byte_end":18115,"line_start":600,"line_end":600,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18116,"byte_end":18140,"line_start":601,"line_end":601,"column_start":1,"column_end":25}},{"value":"/ use void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18141,"byte_end":18160,"line_start":602,"line_end":602,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18161,"byte_end":18164,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ fn flush<S>(serial: &mut S, cb: &mut CircularBuffer)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18165,"byte_end":18221,"line_start":604,"line_end":604,"column_start":1,"column_end":57}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18222,"byte_end":18231,"line_start":605,"line_end":605,"column_start":1,"column_end":10}},{"value":"/     S: hal::serial::Write<u8, Error = Void>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18232,"byte_end":18280,"line_start":606,"line_end":606,"column_start":1,"column_end":49}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18281,"byte_end":18286,"line_start":607,"line_end":607,"column_start":1,"column_end":6}},{"value":"/     loop {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18287,"byte_end":18301,"line_start":608,"line_end":608,"column_start":1,"column_end":15}},{"value":"/         if let Some(byte) = cb.peek() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18302,"byte_end":18345,"line_start":609,"line_end":609,"column_start":1,"column_end":44}},{"value":"/             match serial.write(*byte) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18346,"byte_end":18389,"line_start":610,"line_end":610,"column_start":1,"column_end":44}},{"value":"/                 Err(nb::Error::Other(_)) => unreachable!(),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18390,"byte_end":18453,"line_start":611,"line_end":611,"column_start":1,"column_end":64}},{"value":"/                 Err(nb::Error::WouldBlock) => return,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18454,"byte_end":18511,"line_start":612,"line_end":612,"column_start":1,"column_end":58}},{"value":"/                 Ok(()) => {}, // keep flushing data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18512,"byte_end":18567,"line_start":613,"line_end":613,"column_start":1,"column_end":56}},{"value":"/             }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18568,"byte_end":18585,"line_start":614,"line_end":614,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18586,"byte_end":18599,"line_start":615,"line_end":615,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18600,"byte_end":18603,"line_start":616,"line_end":616,"column_start":1,"column_end":4}},{"value":"/         cb.pop();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18604,"byte_end":18625,"line_start":617,"line_end":617,"column_start":1,"column_end":22}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18626,"byte_end":18635,"line_start":618,"line_end":618,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18636,"byte_end":18641,"line_start":619,"line_end":619,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18642,"byte_end":18645,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ // The stuff below could be in some other crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18646,"byte_end":18697,"line_start":621,"line_end":621,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18698,"byte_end":18701,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ /// Global singleton","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18702,"byte_end":18726,"line_start":623,"line_end":623,"column_start":1,"column_end":25}},{"value":"/ pub struct BufferedSerial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18727,"byte_end":18758,"line_start":624,"line_end":624,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18759,"byte_end":18762,"line_start":625,"line_end":625,"column_start":1,"column_end":4}},{"value":"/ // NOTE private","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18763,"byte_end":18782,"line_start":626,"line_end":626,"column_start":1,"column_end":20}},{"value":"/ static BUFFER1: Mutex<CircularBuffer> = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18783,"byte_end":18828,"line_start":627,"line_end":627,"column_start":1,"column_end":46}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18829,"byte_end":18842,"line_start":628,"line_end":628,"column_start":1,"column_end":14}},{"value":"/ #   Mutex(CircularBuffer)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18843,"byte_end":18872,"line_start":629,"line_end":629,"column_start":1,"column_end":30}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18873,"byte_end":18879,"line_start":630,"line_end":630,"column_start":1,"column_end":7}},{"value":"/ static SERIAL1: Mutex<Serial1> = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18880,"byte_end":18918,"line_start":631,"line_end":631,"column_start":1,"column_end":39}},{"value":"/     // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18919,"byte_end":18932,"line_start":632,"line_end":632,"column_start":1,"column_end":14}},{"value":"/ #   Mutex(Serial1)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18933,"byte_end":18955,"line_start":633,"line_end":633,"column_start":1,"column_end":23}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18956,"byte_end":18962,"line_start":634,"line_end":634,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18963,"byte_end":18966,"line_start":635,"line_end":635,"column_start":1,"column_end":4}},{"value":"/ impl BufferedSerial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18967,"byte_end":18993,"line_start":636,"line_end":636,"column_start":1,"column_end":27}},{"value":"/     pub fn write(&self, byte: u8) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":18994,"byte_end":19033,"line_start":637,"line_end":637,"column_start":1,"column_end":40}},{"value":"/         self.write_all(&[byte])","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19034,"byte_end":19069,"line_start":638,"line_end":638,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19070,"byte_end":19079,"line_start":639,"line_end":639,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19080,"byte_end":19083,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/     pub fn write_all(&self, bytes: &[u8]) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19084,"byte_end":19131,"line_start":641,"line_end":641,"column_start":1,"column_end":48}},{"value":"/         let mut buffer = BUFFER1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19132,"byte_end":19176,"line_start":642,"line_end":642,"column_start":1,"column_end":45}},{"value":"/         for byte in bytes {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19177,"byte_end":19208,"line_start":643,"line_end":643,"column_start":1,"column_end":32}},{"value":"/             buffer.push(*byte).expect(\"buffer overrun\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19209,"byte_end":19269,"line_start":644,"line_end":644,"column_start":1,"column_end":61}},{"value":"/         }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19270,"byte_end":19283,"line_start":645,"line_end":645,"column_start":1,"column_end":14}},{"value":"/         // omitted: pend / enable interrupt_handler","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19284,"byte_end":19339,"line_start":646,"line_end":646,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19340,"byte_end":19349,"line_start":647,"line_end":647,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19350,"byte_end":19355,"line_start":648,"line_end":648,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19356,"byte_end":19359,"line_start":649,"line_end":649,"column_start":1,"column_end":4}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19360,"byte_end":19388,"line_start":650,"line_end":650,"column_start":1,"column_end":29}},{"value":"/     let mut serial = SERIAL1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19389,"byte_end":19429,"line_start":651,"line_end":651,"column_start":1,"column_end":41}},{"value":"/     let mut buffer = BUFFER1.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19430,"byte_end":19470,"line_start":652,"line_end":652,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19471,"byte_end":19474,"line_start":653,"line_end":653,"column_start":1,"column_end":4}},{"value":"/     flush(&mut *serial, &mut buffer);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19475,"byte_end":19516,"line_start":654,"line_end":654,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19517,"byte_end":19522,"line_start":655,"line_end":655,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19523,"byte_end":19526,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ # struct Mutex<T>(T);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19527,"byte_end":19552,"line_start":657,"line_end":657,"column_start":1,"column_end":26}},{"value":"/ # impl<T> Mutex<T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19553,"byte_end":19577,"line_start":658,"line_end":658,"column_start":1,"column_end":25}},{"value":"/ #     fn lock(&self) -> RefMut<T> { unimplemented!() }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19578,"byte_end":19636,"line_start":659,"line_end":659,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19637,"byte_end":19644,"line_start":660,"line_end":660,"column_start":1,"column_end":8}},{"value":"/ # struct RefMut<'a, T>(&'a mut T) where T: 'a;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19645,"byte_end":19695,"line_start":661,"line_end":661,"column_start":1,"column_end":51}},{"value":"/ # impl<'a, T> ::std::ops::Deref for RefMut<'a, T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19696,"byte_end":19751,"line_start":662,"line_end":662,"column_start":1,"column_end":56}},{"value":"/ #     type Target = T;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19752,"byte_end":19778,"line_start":663,"line_end":663,"column_start":1,"column_end":27}},{"value":"/ #     fn deref(&self) -> &T { self.0 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19779,"byte_end":19821,"line_start":664,"line_end":664,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19822,"byte_end":19829,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # impl<'a, T> ::std::ops::DerefMut for RefMut<'a, T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19830,"byte_end":19888,"line_start":666,"line_end":666,"column_start":1,"column_end":59}},{"value":"/ #     fn deref_mut(&mut self) -> &mut T { self.0 }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19889,"byte_end":19943,"line_start":667,"line_end":667,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19944,"byte_end":19951,"line_start":668,"line_end":668,"column_start":1,"column_end":8}},{"value":"/ # struct Serial1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19952,"byte_end":19973,"line_start":669,"line_end":669,"column_start":1,"column_end":22}},{"value":"/ # impl ::hal::serial::Write<u8> for Serial1 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":19974,"byte_end":20023,"line_start":670,"line_end":670,"column_start":1,"column_end":50}},{"value":"/ #   type Error = Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20024,"byte_end":20050,"line_start":671,"line_end":671,"column_start":1,"column_end":27}},{"value":"/ #   fn write(&mut self, _: u8) -> nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20051,"byte_end":20142,"line_start":672,"line_end":672,"column_start":1,"column_end":92}},{"value":"/ #   fn flush(&mut self) -> nb::Result<(), Void> { Err(::nb::Error::WouldBlock) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20143,"byte_end":20227,"line_start":673,"line_end":673,"column_start":1,"column_end":85}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20228,"byte_end":20235,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"/ # struct CircularBuffer;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20236,"byte_end":20264,"line_start":675,"line_end":675,"column_start":1,"column_end":29}},{"value":"/ # impl CircularBuffer {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20265,"byte_end":20292,"line_start":676,"line_end":676,"column_start":1,"column_end":28}},{"value":"/ #   pub fn peek(&mut self) -> Option<&u8> { None }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20293,"byte_end":20347,"line_start":677,"line_end":677,"column_start":1,"column_end":55}},{"value":"/ #   pub fn pop(&mut self) -> Option<u8> { None }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20348,"byte_end":20400,"line_start":678,"line_end":678,"column_start":1,"column_end":53}},{"value":"/ #   pub fn push(&mut self, _: u8) -> Result<(), ()> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20401,"byte_end":20467,"line_start":679,"line_end":679,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20468,"byte_end":20475,"line_start":680,"line_end":680,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20476,"byte_end":20479,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20480,"byte_end":20498,"line_start":682,"line_end":682,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20499,"byte_end":20506,"line_start":683,"line_end":683,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20508,"byte_end":20530,"line_start":685,"line_end":685,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20531,"byte_end":20541,"line_start":686,"line_end":686,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/adc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adc","qualname":"::adc","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/adc.rs","parent":null,"children":[],"decl_id":null,"docs":" Analog-digital conversion traits\n","sig":null,"attributes":[{"value":"/ Analog-digital conversion traits","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/adc.rs","byte_start":29438,"byte_end":29474,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blocking","qualname":"::blocking","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":14},{"krate":0,"index":21},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":81}],"decl_id":null,"docs":" Blocking API","sig":null,"attributes":[{"value":"/ Blocking API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33129,"byte_end":33145,"line_start":1,"line_end":1,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33146,"byte_end":33149,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ In some cases it's possible to implement these blocking traits on top of one of the core HAL","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33150,"byte_end":33246,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ traits. To save boilerplate when that's the case a `Default` marker trait may be provided.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33247,"byte_end":33341,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ Implementing that marker trait will opt in your type into a blanket implementation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33342,"byte_end":33429,"line_start":5,"line_end":5,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"can","qualname":"::blocking::can","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","parent":null,"children":[{"krate":0,"index":9}],"decl_id":null,"docs":" Blocking CAN API\n","sig":null,"attributes":[{"value":"/ Blocking CAN API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33515,"byte_end":33535,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33621,"byte_end":33624,"line_start":4,"line_end":4,"column_start":11,"column_end":14},"name":"Can","qualname":"::blocking::can::Can","value":"Can","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13}],"decl_id":null,"docs":" A blocking CAN interface that is able to transmit and receive frames.\n","sig":null,"attributes":[{"value":"/ A blocking CAN interface that is able to transmit and receive frames.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33537,"byte_end":33610,"line_start":3,"line_end":3,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33667,"byte_end":33672,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Frame","qualname":"::blocking::can::Can::Frame","value":"type Frame: crate::can::Frame;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Associated frame type.\n","sig":null,"attributes":[{"value":"/ Associated frame type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33631,"byte_end":33657,"line_start":5,"line_end":5,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33734,"byte_end":33739,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::can::Can::Error","value":"type Error: crate::can::Error;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Associated error type.\n","sig":null,"attributes":[{"value":"/ Associated error type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33698,"byte_end":33724,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33877,"byte_end":33885,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"transmit","qualname":"::blocking::can::Can::transmit","value":"pub fn transmit(&mut Self, &Self::Frame) -> Result<(), Self::Error>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Puts a frame in the transmit buffer. Blocks until space is available in\n the transmit buffer.\n","sig":null,"attributes":[{"value":"/ Puts a frame in the transmit buffer. Blocks until space is available in","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33765,"byte_end":33840,"line_start":11,"line_end":11,"column_start":5,"column_end":80}},{"value":"/ the transmit buffer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33845,"byte_end":33869,"line_start":12,"line_end":12,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":34017,"byte_end":34024,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"receive","qualname":"::blocking::can::Can::receive","value":"pub fn receive(&mut Self) -> Result<Self::Frame, Self::Error>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Blocks until a frame was received or an error occured.\n","sig":null,"attributes":[{"value":"/ Blocks until a frame was received or an error occured.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/can.rs","byte_start":33951,"byte_end":34009,"line_start":15,"line_end":15,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"delay","qualname":"::blocking::delay","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":18}],"decl_id":null,"docs":" Delays","sig":null,"attributes":[{"value":"/ Delays","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34076,"byte_end":34086,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34087,"byte_end":34090,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # What's the difference between these traits and the `timer::CountDown` trait?","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34091,"byte_end":34173,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34174,"byte_end":34177,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The `Timer` trait provides a *non-blocking* timer abstraction and it's meant to be used to build","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34178,"byte_end":34278,"line_start":5,"line_end":5,"column_start":1,"column_end":101}},{"value":"/ higher level abstractions like I/O operations with timeouts. OTOH, these delays traits only","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34279,"byte_end":34374,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ provide *blocking* functionality. Note that you can also use the `timer::CountDown` trait to","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34375,"byte_end":34471,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ implement blocking delays.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34472,"byte_end":34502,"line_start":8,"line_end":8,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34696,"byte_end":34703,"line_start":14,"line_end":14,"column_start":11,"column_end":18},"name":"DelayMs","qualname":"::blocking::delay::DelayMs","value":"DelayMs<UXX>","parent":null,"children":[{"krate":0,"index":17}],"decl_id":null,"docs":" Millisecond delay","sig":null,"attributes":[{"value":"/ Millisecond delay","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34504,"byte_end":34525,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34526,"byte_end":34529,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ `UXX` denotes the range type of the delay time. `UXX` can be `u8`, `u16`, etc. A single type can","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34530,"byte_end":34630,"line_start":12,"line_end":12,"column_start":1,"column_end":101}},{"value":"/ implement this trait for different types of `UXX`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34631,"byte_end":34685,"line_start":13,"line_end":13,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34765,"byte_end":34773,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"delay_ms","qualname":"::blocking::delay::DelayMs::delay_ms","value":"pub fn delay_ms(&mut Self, UXX)","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Pauses execution for `ms` milliseconds\n","sig":null,"attributes":[{"value":"/ Pauses execution for `ms` milliseconds","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34715,"byte_end":34757,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34990,"byte_end":34997,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"DelayUs","qualname":"::blocking::delay::DelayUs","value":"DelayUs<UXX>","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" Microsecond delay","sig":null,"attributes":[{"value":"/ Microsecond delay","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34798,"byte_end":34819,"line_start":19,"line_end":19,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34820,"byte_end":34823,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `UXX` denotes the range type of the delay time. `UXX` can be `u8`, `u16`, etc. A single type can","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34824,"byte_end":34924,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/ implement this trait for different types of `UXX`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":34925,"byte_end":34979,"line_start":22,"line_end":22,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":35059,"byte_end":35067,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"delay_us","qualname":"::blocking::delay::DelayUs::delay_us","value":"pub fn delay_us(&mut Self, UXX)","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Pauses execution for `us` microseconds\n","sig":null,"attributes":[{"value":"/ Pauses execution for `us` microseconds","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/delay.rs","byte_start":35009,"byte_end":35051,"line_start":24,"line_end":24,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i2c","qualname":"::blocking::i2c","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":327},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":54},{"krate":0,"index":59}],"decl_id":null,"docs":" Blocking I2C API","sig":null,"attributes":[{"value":"/ Blocking I2C API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35092,"byte_end":35112,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35113,"byte_end":35116,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This API supports 7-bit and 10-bit addresses. Traits feature an `AddressMode`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35117,"byte_end":35198,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ marker type parameter. Two implementation of the `AddressMode` exist:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35199,"byte_end":35272,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ `SevenBitAddress` and `TenBitAddress`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35273,"byte_end":35315,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35316,"byte_end":35319,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Through this marker types it is possible to implement each address mode for","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35320,"byte_end":35399,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ the traits independently in `embedded-hal` implementations and device drivers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35400,"byte_end":35481,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ can depend only on the mode that they support.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35482,"byte_end":35532,"line_start":9,"line_end":9,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35533,"byte_end":35536,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Additionally, the I2C 10-bit address mode has been developed to be fully","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35537,"byte_end":35613,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ backwards compatible with the 7-bit address mode. This allows for a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35614,"byte_end":35685,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ software-emulated 10-bit addressing implementation if the address mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35686,"byte_end":35760,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ is not supported by the hardware.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35761,"byte_end":35798,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35799,"byte_end":35802,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Since 7-bit addressing is the mode of the majority of I2C devices,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35803,"byte_end":35873,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ `SevenBitAddress` has been set as default mode and thus can be omitted if desired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35874,"byte_end":35960,"line_start":17,"line_end":17,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35961,"byte_end":35964,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35965,"byte_end":35980,"line_start":19,"line_end":19,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35981,"byte_end":35984,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### `embedded-hal` implementation for an MCU","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":35985,"byte_end":36033,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/ Here is an example of an embedded-hal implementation of the `Write` trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36034,"byte_end":36111,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ for both modes:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36112,"byte_end":36131,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36132,"byte_end":36139,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # use embedded_hal::blocking::i2c::{SevenBitAddress, TenBitAddress, Write};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36140,"byte_end":36219,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ /// I2C0 hardware peripheral which supports both 7-bit and 10-bit addressing.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36220,"byte_end":36301,"line_start":26,"line_end":26,"column_start":1,"column_end":82}},{"value":"/ pub struct I2c0;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36302,"byte_end":36322,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36323,"byte_end":36326,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ impl Write<SevenBitAddress> for I2c0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36327,"byte_end":36367,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36368,"byte_end":36373,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ #   type Error = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36374,"byte_end":36398,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36399,"byte_end":36404,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/     fn write(&mut self, addr: u8, output: &[u8]) -> Result<(), Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36405,"byte_end":36486,"line_start":33,"line_end":33,"column_start":1,"column_end":82}},{"value":"/         // ...","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36487,"byte_end":36505,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/ #       Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36506,"byte_end":36524,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36525,"byte_end":36534,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36535,"byte_end":36540,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36541,"byte_end":36544,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ impl Write<TenBitAddress> for I2c0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36545,"byte_end":36583,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36584,"byte_end":36589,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"/ #   type Error = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36590,"byte_end":36614,"line_start":41,"line_end":41,"column_start":1,"column_end":25}},{"value":"/ #","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36615,"byte_end":36620,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/     fn write(&mut self, addr: u16, output: &[u8]) -> Result<(), Self::Error> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36621,"byte_end":36703,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/         // ...","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36704,"byte_end":36722,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/ #       Ok(())","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36723,"byte_end":36741,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36742,"byte_end":36751,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36752,"byte_end":36757,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36758,"byte_end":36765,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36766,"byte_end":36769,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ### Device driver compatible only with 7-bit addresses","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36770,"byte_end":36828,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36829,"byte_end":36832,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ For demonstration purposes the address mode parameter has been omitted in this example.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36833,"byte_end":36924,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36925,"byte_end":36928,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36929,"byte_end":36936,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ # use embedded_hal::blocking::i2c::WriteRead;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36937,"byte_end":36986,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ const ADDR: u8  = 0x15;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":36987,"byte_end":37014,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ # const TEMP_REGISTER: u8 = 0x1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37015,"byte_end":37051,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ pub struct TemperatureSensorDriver<I2C> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37052,"byte_end":37097,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/     i2c: I2C,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37098,"byte_end":37115,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37116,"byte_end":37121,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37122,"byte_end":37125,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ impl<I2C, E> TemperatureSensorDriver<I2C>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37126,"byte_end":37171,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37172,"byte_end":37181,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"/     I2C: WriteRead<Error = E>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37182,"byte_end":37216,"line_start":64,"line_end":64,"column_start":1,"column_end":35}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37217,"byte_end":37222,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/     pub fn read_temperature(&mut self) -> Result<u8, E> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37223,"byte_end":37284,"line_start":66,"line_end":66,"column_start":1,"column_end":62}},{"value":"/         let mut temp = [0];","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37285,"byte_end":37316,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/         self.i2c","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37317,"byte_end":37337,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"/             .write_read(ADDR, &[TEMP_REGISTER], &mut temp)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37338,"byte_end":37400,"line_start":69,"line_end":69,"column_start":1,"column_end":63}},{"value":"/             .and(Ok(temp[0]))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37401,"byte_end":37434,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37435,"byte_end":37444,"line_start":71,"line_end":71,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37445,"byte_end":37450,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37451,"byte_end":37458,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37459,"byte_end":37462,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ### Device driver compatible only with 10-bit addresses","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37463,"byte_end":37522,"line_start":75,"line_end":75,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37523,"byte_end":37526,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37527,"byte_end":37534,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ # use embedded_hal::blocking::i2c::{TenBitAddress, WriteRead};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37535,"byte_end":37601,"line_start":78,"line_end":78,"column_start":1,"column_end":67}},{"value":"/ const ADDR: u16  = 0x158;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37602,"byte_end":37631,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/ # const TEMP_REGISTER: u8 = 0x1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37632,"byte_end":37668,"line_start":80,"line_end":80,"column_start":1,"column_end":37}},{"value":"/ pub struct TemperatureSensorDriver<I2C> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37669,"byte_end":37714,"line_start":81,"line_end":81,"column_start":1,"column_end":46}},{"value":"/     i2c: I2C,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37715,"byte_end":37732,"line_start":82,"line_end":82,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37733,"byte_end":37738,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37739,"byte_end":37742,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ impl<I2C, E> TemperatureSensorDriver<I2C>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37743,"byte_end":37788,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"/ where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37789,"byte_end":37798,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/     I2C: WriteRead<TenBitAddress, Error = E>,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37799,"byte_end":37848,"line_start":87,"line_end":87,"column_start":1,"column_end":50}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37849,"byte_end":37854,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/     pub fn read_temperature(&mut self) -> Result<u8, E> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37855,"byte_end":37916,"line_start":89,"line_end":89,"column_start":1,"column_end":62}},{"value":"/         let mut temp = [0];","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37917,"byte_end":37948,"line_start":90,"line_end":90,"column_start":1,"column_end":32}},{"value":"/         self.i2c","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37949,"byte_end":37969,"line_start":91,"line_end":91,"column_start":1,"column_end":21}},{"value":"/             .write_read(ADDR, &[TEMP_REGISTER], &mut temp)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":37970,"byte_end":38032,"line_start":92,"line_end":92,"column_start":1,"column_end":63}},{"value":"/             .and(Ok(temp[0]))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38033,"byte_end":38066,"line_start":93,"line_end":93,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38067,"byte_end":38076,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38077,"byte_end":38082,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38083,"byte_end":38090,"line_start":96,"line_end":96,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38332,"byte_end":38343,"line_start":106,"line_end":106,"column_start":11,"column_end":22},"name":"AddressMode","qualname":"::blocking::i2c::AddressMode","value":"AddressMode: private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Address mode (7-bit / 10-bit)","sig":null,"attributes":[{"value":"/ Address mode (7-bit / 10-bit)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38200,"byte_end":38233,"line_start":103,"line_end":103,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38234,"byte_end":38237,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Note: This trait is sealed and should not be implemented outside of this crate.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38238,"byte_end":38321,"line_start":105,"line_end":105,"column_start":1,"column_end":84}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38402,"byte_end":38417,"line_start":109,"line_end":109,"column_start":10,"column_end":25},"name":"SevenBitAddress","qualname":"::blocking::i2c::SevenBitAddress","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" 7-bit address mode type\n","sig":null,"attributes":[{"value":"/ 7-bit address mode type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38365,"byte_end":38392,"line_start":108,"line_end":108,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38463,"byte_end":38476,"line_start":112,"line_end":112,"column_start":10,"column_end":23},"name":"TenBitAddress","qualname":"::blocking::i2c::TenBitAddress","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" 10-bit address mode type\n","sig":null,"attributes":[{"value":"/ 10-bit address mode type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38425,"byte_end":38453,"line_start":111,"line_end":111,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38593,"byte_end":38597,"line_start":119,"line_end":119,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::i2c::Read","value":"Read<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" Blocking read\n","sig":null,"attributes":[{"value":"/ Blocking read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38565,"byte_end":38582,"line_start":118,"line_end":118,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38662,"byte_end":38667,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Read::Error","value":"type Error;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38638,"byte_end":38652,"line_start":120,"line_end":120,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39247,"byte_end":39251,"line_start":141,"line_end":141,"column_start":8,"column_end":12},"name":"read","qualname":"::blocking::i2c::Read::read","value":"pub fn read(&mut Self, A, &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Reads enough bytes from slave with `address` to fill `buffer`","sig":null,"attributes":[{"value":"/ Reads enough bytes from slave with `address` to fill `buffer`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38674,"byte_end":38739,"line_start":123,"line_end":123,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38744,"byte_end":38747,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38752,"byte_end":38779,"line_start":125,"line_end":125,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38784,"byte_end":38787,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38792,"byte_end":38804,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+R        MAK    MAK ...    NMAK SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38809,"byte_end":38862,"line_start":128,"line_end":128,"column_start":5,"column_end":58}},{"value":"/ Slave:           SAK B0     B1     ... BN","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38867,"byte_end":38912,"line_start":129,"line_end":129,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38917,"byte_end":38924,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38929,"byte_end":38932,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38937,"byte_end":38946,"line_start":132,"line_end":132,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38951,"byte_end":38954,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38959,"byte_end":38987,"line_start":134,"line_end":134,"column_start":5,"column_end":33}},{"value":"/ - `SAD+R` = slave address followed by bit 1 to indicate reading","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38992,"byte_end":39059,"line_start":135,"line_end":135,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39064,"byte_end":39095,"line_start":136,"line_end":136,"column_start":5,"column_end":36}},{"value":"/ - `Bi` = ith byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39100,"byte_end":39129,"line_start":137,"line_end":137,"column_start":5,"column_end":34}},{"value":"/ - `MAK` = master acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39134,"byte_end":39166,"line_start":138,"line_end":138,"column_start":5,"column_end":37}},{"value":"/ - `NMAK` = master no acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39171,"byte_end":39207,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39212,"byte_end":39239,"line_start":140,"line_end":140,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39354,"byte_end":39359,"line_start":145,"line_end":145,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::i2c::Write","value":"Write<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39325,"byte_end":39343,"line_start":144,"line_end":144,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39424,"byte_end":39429,"line_start":147,"line_end":147,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Write::Error","value":"type Error;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39400,"byte_end":39414,"line_start":146,"line_end":146,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39917,"byte_end":39922,"line_start":165,"line_end":165,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::i2c::Write::write","value":"pub fn write(&mut Self, A, &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes bytes to slave with address `address`","sig":null,"attributes":[{"value":"/ Writes bytes to slave with address `address`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39436,"byte_end":39484,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39489,"byte_end":39492,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39497,"byte_end":39524,"line_start":151,"line_end":151,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39529,"byte_end":39532,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39537,"byte_end":39549,"line_start":153,"line_end":153,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+W     B0     B1     ... BN     SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39554,"byte_end":39606,"line_start":154,"line_end":154,"column_start":5,"column_end":57}},{"value":"/ Slave:           SAK    SAK    SAK ...    SAK","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39611,"byte_end":39660,"line_start":155,"line_end":155,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39665,"byte_end":39672,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39677,"byte_end":39680,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39685,"byte_end":39694,"line_start":158,"line_end":158,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39699,"byte_end":39702,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39707,"byte_end":39735,"line_start":160,"line_end":160,"column_start":5,"column_end":33}},{"value":"/ - `SAD+W` = slave address followed by bit 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39740,"byte_end":39807,"line_start":161,"line_end":161,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39812,"byte_end":39843,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/ - `Bi` = ith byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39848,"byte_end":39877,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39882,"byte_end":39909,"line_start":164,"line_end":164,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40039,"byte_end":40048,"line_start":169,"line_end":169,"column_start":11,"column_end":20},"name":"WriteIter","qualname":"::blocking::i2c::WriteIter","value":"WriteIter<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":39991,"byte_end":40028,"line_start":168,"line_end":168,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40113,"byte_end":40118,"line_start":171,"line_end":171,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIter::Error","value":"type Error;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40089,"byte_end":40103,"line_start":170,"line_end":170,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40253,"byte_end":40258,"line_start":178,"line_end":178,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::i2c::WriteIter::write","value":"pub fn write<B>(&mut Self, A, B) -> Result<(), Self::Error> where\nB: IntoIterator<Item = u8>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Writes bytes to slave with address `address`","sig":null,"attributes":[{"value":"/ Writes bytes to slave with address `address`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40125,"byte_end":40173,"line_start":173,"line_end":173,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40178,"byte_end":40181,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40186,"byte_end":40213,"line_start":175,"line_end":175,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40218,"byte_end":40221,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Same as `Write`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40226,"byte_end":40245,"line_start":177,"line_end":177,"column_start":5,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40407,"byte_end":40416,"line_start":184,"line_end":184,"column_start":11,"column_end":20},"name":"WriteRead","qualname":"::blocking::i2c::WriteRead","value":"WriteRead<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Blocking write + read\n","sig":null,"attributes":[{"value":"/ Blocking write + read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40371,"byte_end":40396,"line_start":183,"line_end":183,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40481,"byte_end":40486,"line_start":186,"line_end":186,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteRead::Error","value":"type Error;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40457,"byte_end":40471,"line_start":185,"line_end":185,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41370,"byte_end":41380,"line_start":210,"line_end":210,"column_start":8,"column_end":18},"name":"write_read","qualname":"::blocking::i2c::WriteRead::write_read","value":"pub fn write_read(&mut Self, A, &[u8], &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Writes bytes to slave with address `address` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[{"value":"/ Writes bytes to slave with address `address` and then reads enough bytes to fill `buffer` *in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40493,"byte_end":40592,"line_start":188,"line_end":188,"column_start":5,"column_end":104}},{"value":"/ single transaction*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40597,"byte_end":40620,"line_start":189,"line_end":189,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40625,"byte_end":40628,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40633,"byte_end":40660,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40665,"byte_end":40668,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ ``` text","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40673,"byte_end":40685,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/ Master: ST SAD+W     O0     O1     ... OM     SR SAD+R        MAK    MAK ...    NMAK SP","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40690,"byte_end":40781,"line_start":194,"line_end":194,"column_start":5,"column_end":96}},{"value":"/ Slave:           SAK    SAK    SAK ...    SAK          SAK I0     I1     ... IN","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40786,"byte_end":40869,"line_start":195,"line_end":195,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40874,"byte_end":40881,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40886,"byte_end":40889,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Where","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40894,"byte_end":40903,"line_start":198,"line_end":198,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40908,"byte_end":40911,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40916,"byte_end":40944,"line_start":200,"line_end":200,"column_start":5,"column_end":33}},{"value":"/ - `SAD+W` = slave address followed by bit 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":40949,"byte_end":41016,"line_start":201,"line_end":201,"column_start":5,"column_end":72}},{"value":"/ - `SAK` = slave acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41021,"byte_end":41052,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ - `Oi` = ith outgoing byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41057,"byte_end":41095,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"/ - `SR` = repeated start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41100,"byte_end":41137,"line_start":204,"line_end":204,"column_start":5,"column_end":42}},{"value":"/ - `SAD+R` = slave address followed by bit 1 to indicate reading","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41142,"byte_end":41209,"line_start":205,"line_end":205,"column_start":5,"column_end":72}},{"value":"/ - `Ii` = ith incoming byte of data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41214,"byte_end":41252,"line_start":206,"line_end":206,"column_start":5,"column_end":43}},{"value":"/ - `MAK` = master acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41257,"byte_end":41289,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/ - `NMAK` = master no acknowledge","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41294,"byte_end":41330,"line_start":208,"line_end":208,"column_start":5,"column_end":41}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41335,"byte_end":41362,"line_start":209,"line_end":209,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41562,"byte_end":41575,"line_start":219,"line_end":219,"column_start":11,"column_end":24},"name":"WriteIterRead","qualname":"::blocking::i2c::WriteIterRead","value":"WriteIterRead<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" Blocking write (iterator version) + read\n","sig":null,"attributes":[{"value":"/ Blocking write (iterator version) + read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41507,"byte_end":41551,"line_start":218,"line_end":218,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41640,"byte_end":41645,"line_start":221,"line_end":221,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIterRead::Error","value":"type Error;","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41616,"byte_end":41630,"line_start":220,"line_end":220,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41873,"byte_end":41888,"line_start":229,"line_end":229,"column_start":8,"column_end":23},"name":"write_iter_read","qualname":"::blocking::i2c::WriteIterRead::write_iter_read","value":"pub fn write_iter_read<B>(&mut Self, A, B, &mut [u8])\n-> Result<(), Self::Error> where B: IntoIterator<Item = u8>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Writes bytes to slave with address `address` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[{"value":"/ Writes bytes to slave with address `address` and then reads enough bytes to fill `buffer` *in a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41652,"byte_end":41751,"line_start":223,"line_end":223,"column_start":5,"column_end":104}},{"value":"/ single transaction*","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41756,"byte_end":41779,"line_start":224,"line_end":224,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41784,"byte_end":41787,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # I2C Events (contract)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41792,"byte_end":41819,"line_start":226,"line_end":226,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41824,"byte_end":41827,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Same as the `WriteRead` trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":41832,"byte_end":41865,"line_start":228,"line_end":228,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42261,"byte_end":42265,"line_start":245,"line_end":245,"column_start":5,"column_end":9},"name":"Read","qualname":"::blocking::i2c::Operation::Read","value":"Operation::Read(&'a mut [u8])","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Read data into the provided buffer\n","sig":null,"attributes":[{"value":"/ Read data into the provided buffer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42218,"byte_end":42256,"line_start":244,"line_end":244,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":332},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42329,"byte_end":42334,"line_start":247,"line_end":247,"column_start":5,"column_end":10},"name":"Write","qualname":"::blocking::i2c::Operation::Write","value":"Operation::Write(&'a [u8])","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Write data from the provided buffer\n","sig":null,"attributes":[{"value":"/ Write data from the provided buffer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42285,"byte_end":42324,"line_start":246,"line_end":246,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":327},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42198,"byte_end":42207,"line_start":243,"line_end":243,"column_start":10,"column_end":19},"name":"Operation","qualname":"::blocking::i2c::Operation","value":"pub enum Operation<'a> { Read(&'a mut [u8]), Write(&'a [u8]), }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":332}],"decl_id":null,"docs":" Transactional I2C operation.","sig":null,"attributes":[{"value":"/ Transactional I2C operation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42059,"byte_end":42091,"line_start":239,"line_end":239,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42092,"byte_end":42095,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ Several operations can be combined as part of a transaction.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42096,"byte_end":42160,"line_start":241,"line_end":241,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42460,"byte_end":42473,"line_start":253,"line_end":253,"column_start":11,"column_end":24},"name":"Transactional","qualname":"::blocking::i2c::Transactional","value":"Transactional<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" Transactional I2C interface.","sig":null,"attributes":[{"value":"/ Transactional I2C interface.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42349,"byte_end":42381,"line_start":250,"line_end":250,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42382,"byte_end":42385,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ This allows combining operations within an I2C transaction.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42386,"byte_end":42449,"line_start":252,"line_end":252,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":56},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42538,"byte_end":42543,"line_start":255,"line_end":255,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Transactional::Error","value":"type Error;","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42514,"byte_end":42528,"line_start":254,"line_end":254,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43347,"byte_end":43351,"line_start":270,"line_end":270,"column_start":8,"column_end":12},"name":"exec","qualname":"::blocking::i2c::Transactional::exec","value":"pub fn exec<'a>(&mut Self, A, &mut [Operation]) -> Result<(), Self::Error>","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Execute the provided operations on the I2C bus.","sig":null,"attributes":[{"value":"/ Execute the provided operations on the I2C bus.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42550,"byte_end":42601,"line_start":257,"line_end":257,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42606,"byte_end":42609,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Transaction contract:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42614,"byte_end":42639,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/ - Before executing the first operation an ST is sent automatically. This is followed by SAD+R/W as appropriate.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42644,"byte_end":42759,"line_start":260,"line_end":260,"column_start":5,"column_end":120}},{"value":"/ - Data from adjacent operations of the same type are sent after each other without an SP or SR.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42764,"byte_end":42863,"line_start":261,"line_end":261,"column_start":5,"column_end":104}},{"value":"/ - Between adjacent operations of a different type an SR and SAD+R/W is sent.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42868,"byte_end":42948,"line_start":262,"line_end":262,"column_start":5,"column_end":85}},{"value":"/ - After executing the last operation an SP is sent automatically.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":42953,"byte_end":43022,"line_start":263,"line_end":263,"column_start":5,"column_end":74}},{"value":"/ - If the last operation is a `Read` the master does not send an acknowledge for the last byte.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43027,"byte_end":43125,"line_start":264,"line_end":264,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43130,"byte_end":43133,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43138,"byte_end":43166,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ - `SAD+R/W` = slave address followed by bit 1 to indicate reading or 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43171,"byte_end":43265,"line_start":267,"line_end":267,"column_start":5,"column_end":99}},{"value":"/ - `SR` = repeated start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43270,"byte_end":43307,"line_start":268,"line_end":268,"column_start":5,"column_end":42}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43312,"byte_end":43339,"line_start":269,"line_end":269,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43581,"byte_end":43598,"line_start":277,"line_end":277,"column_start":11,"column_end":28},"name":"TransactionalIter","qualname":"::blocking::i2c::TransactionalIter","value":"TransactionalIter<A: AddressMode = SevenBitAddress>","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"decl_id":null,"docs":" Transactional I2C interface (iterator version).","sig":null,"attributes":[{"value":"/ Transactional I2C interface (iterator version).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43452,"byte_end":43503,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43504,"byte_end":43507,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ This allows combining operation within an I2C transaction.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43508,"byte_end":43570,"line_start":276,"line_end":276,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43663,"byte_end":43668,"line_start":279,"line_end":279,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::TransactionalIter::Error","value":"type Error;","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43639,"byte_end":43653,"line_start":278,"line_end":278,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44491,"byte_end":44500,"line_start":294,"line_end":294,"column_start":8,"column_end":17},"name":"exec_iter","qualname":"::blocking::i2c::TransactionalIter::exec_iter","value":"pub fn exec_iter<'a, O>(&mut Self, A, O) -> Result<(), Self::Error> where\nO: IntoIterator<Item = Operation>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Execute the provided operations on the I2C bus (iterator version).","sig":null,"attributes":[{"value":"/ Execute the provided operations on the I2C bus (iterator version).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43675,"byte_end":43745,"line_start":281,"line_end":281,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43750,"byte_end":43753,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Transaction contract:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43758,"byte_end":43783,"line_start":283,"line_end":283,"column_start":5,"column_end":30}},{"value":"/ - Before executing the first operation an ST is sent automatically. This is followed by SAD+R/W as appropriate.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43788,"byte_end":43903,"line_start":284,"line_end":284,"column_start":5,"column_end":120}},{"value":"/ - Data from adjacent operations of the same type are sent after each other without an SP or SR.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":43908,"byte_end":44007,"line_start":285,"line_end":285,"column_start":5,"column_end":104}},{"value":"/ - Between adjacent operations of a different type an SR and SAD+R/W is sent.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44012,"byte_end":44092,"line_start":286,"line_end":286,"column_start":5,"column_end":85}},{"value":"/ - After executing the last operation an SP is sent automatically.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44097,"byte_end":44166,"line_start":287,"line_end":287,"column_start":5,"column_end":74}},{"value":"/ - If the last operation is a `Read` the master does not send an acknowledge for the last byte.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44171,"byte_end":44269,"line_start":288,"line_end":288,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44274,"byte_end":44277,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ - `ST` = start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44282,"byte_end":44310,"line_start":290,"line_end":290,"column_start":5,"column_end":33}},{"value":"/ - `SAD+R/W` = slave address followed by bit 1 to indicate reading or 0 to indicate writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44315,"byte_end":44409,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ - `SR` = repeated start condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44414,"byte_end":44451,"line_start":292,"line_end":292,"column_start":5,"column_end":42}},{"value":"/ - `SP` = stop condition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":44456,"byte_end":44483,"line_start":293,"line_end":293,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/rng.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rng","qualname":"::blocking::rng","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/rng.rs","parent":null,"children":[],"decl_id":null,"docs":" Blocking hardware random number generator\n","sig":null,"attributes":[{"value":"/ Blocking hardware random number generator","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/rng.rs","byte_start":44633,"byte_end":44678,"line_start":1,"line_end":1,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::blocking::serial","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":72}],"decl_id":null,"docs":" Blocking serial API\n","sig":null,"attributes":[{"value":"/ Blocking serial API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45355,"byte_end":45378,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45446,"byte_end":45451,"line_start":4,"line_end":4,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" Write half of a serial interface (blocking variant)\n","sig":null,"attributes":[{"value":"/ Write half of a serial interface (blocking variant)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45380,"byte_end":45435,"line_start":3,"line_end":3,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45523,"byte_end":45528,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" The type of error that can occur when writing\n","sig":null,"attributes":[{"value":"/ The type of error that can occur when writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45464,"byte_end":45513,"line_start":5,"line_end":5,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45965,"byte_end":45975,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"bwrite_all","qualname":"::blocking::serial::Write::bwrite_all","value":"pub fn bwrite_all(&mut Self, &[Word]) -> Result<(), Self::Error>","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Writes a slice, blocking until everything has been written","sig":null,"attributes":[{"value":"/ Writes a slice, blocking until everything has been written","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45535,"byte_end":45597,"line_start":8,"line_end":8,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45602,"byte_end":45605,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ An implementation can choose to buffer the write, returning `Ok(())`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45610,"byte_end":45682,"line_start":10,"line_end":10,"column_start":5,"column_end":77}},{"value":"/ after the complete slice has been written to a buffer, but before all","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45687,"byte_end":45760,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ words have been sent via the serial interface. To make sure that","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45765,"byte_end":45833,"line_start":12,"line_end":12,"column_start":5,"column_end":73}},{"value":"/ everything has been sent, call [`bflush`] after this function returns.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45838,"byte_end":45912,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45917,"byte_end":45920,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ [`bflush`]: #tymethod.bflush","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":45925,"byte_end":45957,"line_start":15,"line_end":15,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46109,"byte_end":46115,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"bflush","qualname":"::blocking::serial::Write::bflush","value":"pub fn bflush(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Block until the serial interface has sent all buffered words\n","sig":null,"attributes":[{"value":"/ Block until the serial interface has sent all buffered words","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46037,"byte_end":46101,"line_start":18,"line_end":18,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46192,"byte_end":46197,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::serial::write","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" Blocking serial write\n","sig":null,"attributes":[{"value":"/ Blocking serial write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46158,"byte_end":46183,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":73},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46629,"byte_end":46636,"line_start":32,"line_end":32,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::serial::write::Default","value":"Default<Word>: ::serial::Write<Word>","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to opt into default blocking write implementation","sig":null,"attributes":[{"value":"/ Marker trait to opt into default blocking write implementation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46204,"byte_end":46270,"line_start":24,"line_end":24,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46275,"byte_end":46278,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Implementers of [`serial::Write`] can implement this marker trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46283,"byte_end":46352,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ for their type. Doing so will automatically provide the default","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46357,"byte_end":46424,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ implementation of [`blocking::serial::Write`] for the type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46429,"byte_end":46492,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46497,"byte_end":46500,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ [`serial::Write`]: ../../serial/trait.Write.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46505,"byte_end":46557,"line_start":30,"line_end":30,"column_start":5,"column_end":57}},{"value":"/ [`blocking::serial::Write`]: ../trait.Write.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46562,"byte_end":46614,"line_start":31,"line_end":31,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":81},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::blocking::spi","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":91},{"krate":0,"index":100},{"krate":0,"index":344},{"krate":0,"index":353},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":108}],"decl_id":null,"docs":" Blocking SPI API\n","sig":null,"attributes":[{"value":"/ Blocking SPI API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47160,"byte_end":47180,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47214,"byte_end":47222,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::blocking::spi::Transfer","value":"Transfer<W>","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[{"value":"/ Blocking transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47182,"byte_end":47203,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47256,"byte_end":47261,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Transfer::Error","value":"type Error;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47232,"byte_end":47246,"line_start":5,"line_end":5,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47351,"byte_end":47359,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"transfer","qualname":"::blocking::spi::Transfer::transfer","value":"pub fn transfer<'w>(&mut Self, &'w mut [W]) -> Result<&'w [W], Self::Error>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Sends `words` to the slave. Returns the `words` received from the slave\n","sig":null,"attributes":[{"value":"/ Sends `words` to the slave. Returns the `words` received from the slave","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47268,"byte_end":47343,"line_start":8,"line_end":8,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47460,"byte_end":47465,"line_start":13,"line_end":13,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::spi::Write","value":"Write<W>","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47431,"byte_end":47449,"line_start":12,"line_end":12,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":89},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47499,"byte_end":47504,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Write::Error","value":"type Error;","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47475,"byte_end":47489,"line_start":14,"line_end":14,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47582,"byte_end":47587,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::spi::Write::write","value":"pub fn write(&mut Self, &[W]) -> Result<(), Self::Error>","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[{"value":"/ Sends `words` to the slave, ignoring all the incoming words","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47511,"byte_end":47574,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47989,"byte_end":47997,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"transfer","qualname":"::blocking::spi::transfer","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[{"value":"/ Blocking transfer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":47959,"byte_end":47980,"line_start":33,"line_end":33,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48126,"byte_end":48133,"line_start":37,"line_end":37,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::transfer::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Transfer<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[{"value":"/ Default implementation of `blocking::spi::Transfer<W>` for implementers of","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48004,"byte_end":48082,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/ `spi::FullDuplex<W>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48087,"byte_end":48111,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":100},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48610,"byte_end":48615,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::spi::write","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[{"value":"/ Blocking write","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48583,"byte_end":48601,"line_start":57,"line_end":57,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48733,"byte_end":48740,"line_start":60,"line_end":60,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`\n","sig":null,"attributes":[{"value":"/ Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48622,"byte_end":48718,"line_start":59,"line_end":59,"column_start":5,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":347},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50116,"byte_end":50121,"line_start":114,"line_end":114,"column_start":5,"column_end":10},"name":"Write","qualname":"::blocking::spi::Operation::Write","value":"Operation::Write(&'a [W])","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Write data from the provided buffer, discarding read data\n","sig":null,"attributes":[{"value":"/ Write data from the provided buffer, discarding read data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50050,"byte_end":50111,"line_start":113,"line_end":113,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":350},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50203,"byte_end":50211,"line_start":116,"line_end":116,"column_start":5,"column_end":13},"name":"Transfer","qualname":"::blocking::spi::Operation::Transfer","value":"Operation::Transfer(&'a mut [W])","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" Write data out while reading data into the provided buffer\n","sig":null,"attributes":[{"value":"/ Write data out while reading data into the provided buffer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50136,"byte_end":50198,"line_start":115,"line_end":115,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":344},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50018,"byte_end":50027,"line_start":112,"line_end":112,"column_start":10,"column_end":19},"name":"Operation","qualname":"::blocking::spi::Operation","value":"pub enum Operation<'a, W: 'static> { Write(&'a [W]), Transfer(&'a mut [W]), }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":350}],"decl_id":null,"docs":" Operation for transactional SPI trait","sig":null,"attributes":[{"value":"/ Operation for transactional SPI trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":49859,"byte_end":49900,"line_start":108,"line_end":108,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":49901,"byte_end":49904,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This allows composition of SPI operations into a single bus transaction","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":49905,"byte_end":49980,"line_start":110,"line_end":110,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":108},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50342,"byte_end":50355,"line_start":121,"line_end":121,"column_start":11,"column_end":24},"name":"Transactional","qualname":"::blocking::spi::Transactional","value":"Transactional<W: 'static>","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" Transactional trait allows multiple actions to be executed\n as part of a single SPI transaction\n","sig":null,"attributes":[{"value":"/ Transactional trait allows multiple actions to be executed","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50229,"byte_end":50291,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/ as part of a single SPI transaction","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50292,"byte_end":50331,"line_start":120,"line_end":120,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":110},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50409,"byte_end":50414,"line_start":123,"line_end":123,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Transactional::Error","value":"type Error;","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" Associated error type\n","sig":null,"attributes":[{"value":"/ Associated error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50374,"byte_end":50399,"line_start":122,"line_end":122,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50466,"byte_end":50470,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"exec","qualname":"::blocking::spi::Transactional::exec","value":"pub fn exec<'a>(&mut Self, &mut [Operation]) -> Result<(), Self::Error>","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" Execute the provided transactions\n","sig":null,"attributes":[{"value":"/ Execute the provided transactions","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":50421,"byte_end":50458,"line_start":125,"line_end":125,"column_start":5,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"can","qualname":"::can","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":152},{"krate":0,"index":414},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":154},{"krate":0,"index":156}],"decl_id":null,"docs":" Controller Area Network\n","sig":null,"attributes":[{"value":"/ Controller Area Network","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50554,"byte_end":50581,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nb","qualname":"::can::nb","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","parent":null,"children":[{"krate":0,"index":115}],"decl_id":null,"docs":" Non-blocking CAN API\n","sig":null,"attributes":[{"value":"/ Non-blocking CAN API","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54519,"byte_end":54543,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54620,"byte_end":54623,"line_start":4,"line_end":4,"column_start":11,"column_end":14},"name":"Can","qualname":"::can::nb::Can","value":"Can","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A CAN interface that is able to transmit and receive frames.\n","sig":null,"attributes":[{"value":"/ A CAN interface that is able to transmit and receive frames.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54545,"byte_end":54609,"line_start":3,"line_end":3,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":116},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54666,"byte_end":54671,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Frame","qualname":"::can::nb::Can::Frame","value":"type Frame: crate::can::Frame;","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Associated frame type.\n","sig":null,"attributes":[{"value":"/ Associated frame type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54630,"byte_end":54656,"line_start":5,"line_end":5,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":117},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54733,"byte_end":54738,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::can::nb::Can::Error","value":"type Error: crate::can::Error;","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Associated error type.\n","sig":null,"attributes":[{"value":"/ Associated error type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54697,"byte_end":54723,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55397,"byte_end":55405,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"transmit","qualname":"::can::nb::Can::transmit","value":"pub fn transmit(&mut Self, &Self::Frame)\n-> nb::Result<Option<Self::Frame>, Self::Error>","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Puts a frame in the transmit buffer to be sent on the bus.","sig":null,"attributes":[{"value":"/ Puts a frame in the transmit buffer to be sent on the bus.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54764,"byte_end":54826,"line_start":11,"line_end":11,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54831,"byte_end":54834,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ If the transmit buffer is full, this function will try to replace a pending","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54839,"byte_end":54918,"line_start":13,"line_end":13,"column_start":5,"column_end":84}},{"value":"/ lower priority frame and return the frame that was replaced.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54923,"byte_end":54987,"line_start":14,"line_end":14,"column_start":5,"column_end":69}},{"value":"/ Returns `Err(WouldBlock)` if the transmit buffer is full and no frame can be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":54992,"byte_end":55072,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ replaced.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55077,"byte_end":55090,"line_start":16,"line_end":16,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55095,"byte_end":55098,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ # Notes for implementers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55103,"byte_end":55131,"line_start":18,"line_end":18,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55136,"byte_end":55139,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ * Frames of equal identifier shall be transmited in FIFO fashion when more","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55144,"byte_end":55222,"line_start":20,"line_end":20,"column_start":5,"column_end":83}},{"value":"/   than one transmit buffer is available.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55227,"byte_end":55271,"line_start":21,"line_end":21,"column_start":5,"column_end":49}},{"value":"/ * When replacing pending frames make sure the frame is not in the process of","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55276,"byte_end":55356,"line_start":22,"line_end":22,"column_start":5,"column_end":85}},{"value":"/   being send to the bus.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55361,"byte_end":55389,"line_start":23,"line_end":23,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55542,"byte_end":55549,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"receive","qualname":"::can::nb::Can::receive","value":"pub fn receive(&mut Self) -> nb::Result<Self::Frame, Self::Error>","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Returns a received frame if available.\n","sig":null,"attributes":[{"value":"/ Returns a received frame if available.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/nb.rs","byte_start":55492,"byte_end":55534,"line_start":26,"line_end":26,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55733,"byte_end":55743,"line_start":5,"line_end":5,"column_start":12,"column_end":22},"name":"StandardId","qualname":"::can::id::StandardId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard 11-bit CAN Identifier (`0..=0x7FF`).\n","sig":null,"attributes":[{"value":"/ Standard 11-bit CAN Identifier (`0..=0x7FF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55627,"byte_end":55676,"line_start":3,"line_end":3,"column_start":1,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55825,"byte_end":55829,"line_start":9,"line_end":9,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::can::id::StandardId::ZERO","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":" CAN ID `0`, the highest priority.\n","sig":null,"attributes":[{"value":"/ CAN ID `0`, the highest priority.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55773,"byte_end":55810,"line_start":8,"line_end":8,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55913,"byte_end":55916,"line_start":12,"line_end":12,"column_start":15,"column_end":18},"name":"MAX","qualname":"::can::id::StandardId::MAX","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":" CAN ID `0x7FF`, the lowest priority.\n","sig":null,"attributes":[{"value":"/ CAN ID `0x7FF`, the lowest priority.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55858,"byte_end":55898,"line_start":11,"line_end":11,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56135,"byte_end":56138,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<StandardId>::new","value":"pub fn new(u16) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to create a `StandardId` from a raw 16-bit integer.","sig":null,"attributes":[{"value":"/ Tries to create a `StandardId` from a raw 16-bit integer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55949,"byte_end":56010,"line_start":14,"line_end":14,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56015,"byte_end":56018,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This will return `None` if `raw` is out of range of an 11-bit integer (`> 0x7FF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56023,"byte_end":56109,"line_start":16,"line_end":16,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56114,"byte_end":56123,"line_start":17,"line_end":17,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56507,"byte_end":56520,"line_start":31,"line_end":31,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<StandardId>::new_unchecked","value":"pub const unsafe fn new_unchecked(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StandardId` without checking if it is inside the valid range.","sig":null,"attributes":[{"value":"/ Creates a new `StandardId` without checking if it is inside the valid range.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56282,"byte_end":56362,"line_start":26,"line_end":26,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56367,"byte_end":56370,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56375,"byte_end":56387,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/ Using this method can create an invalid ID and is thus marked as unsafe.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56392,"byte_end":56468,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56473,"byte_end":56482,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56658,"byte_end":56664,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<StandardId>::as_raw","value":"pub fn as_raw(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns this CAN Identifier as a raw 16-bit integer.\n","sig":null,"attributes":[{"value":"/ Returns this CAN Identifier as a raw 16-bit integer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56576,"byte_end":56632,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56637,"byte_end":56646,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56815,"byte_end":56825,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ExtendedId","qualname":"::can::id::ExtendedId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Extended 29-bit CAN Identifier (`0..=1FFF_FFFF`).\n","sig":null,"attributes":[{"value":"/ Extended 29-bit CAN Identifier (`0..=1FFF_FFFF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56705,"byte_end":56758,"line_start":42,"line_end":42,"column_start":1,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56907,"byte_end":56911,"line_start":48,"line_end":48,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::can::id::ExtendedId::ZERO","value":"Self","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" CAN ID `0`, the highest priority.\n","sig":null,"attributes":[{"value":"/ CAN ID `0`, the highest priority.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56855,"byte_end":56892,"line_start":47,"line_end":47,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57000,"byte_end":57003,"line_start":51,"line_end":51,"column_start":15,"column_end":18},"name":"MAX","qualname":"::can::id::ExtendedId::MAX","value":"Self","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" CAN ID `0x1FFFFFFF`, the lowest priority.\n","sig":null,"attributes":[{"value":"/ CAN ID `0x1FFFFFFF`, the lowest priority.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56940,"byte_end":56985,"line_start":50,"line_end":50,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57234,"byte_end":57237,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<ExtendedId>::new","value":"pub fn new(u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to create a `ExtendedId` from a raw 32-bit integer.","sig":null,"attributes":[{"value":"/ Tries to create a `ExtendedId` from a raw 32-bit integer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57042,"byte_end":57103,"line_start":53,"line_end":53,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57108,"byte_end":57111,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ This will return `None` if `raw` is out of range of an 29-bit integer (`> 0x1FFF_FFFF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57116,"byte_end":57208,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57213,"byte_end":57222,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57612,"byte_end":57625,"line_start":70,"line_end":70,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<ExtendedId>::new_unchecked","value":"pub const unsafe fn new_unchecked(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ExtendedId` without checking if it is inside the valid range.","sig":null,"attributes":[{"value":"/ Creates a new `ExtendedId` without checking if it is inside the valid range.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57387,"byte_end":57467,"line_start":65,"line_end":65,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57472,"byte_end":57475,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57480,"byte_end":57492,"line_start":67,"line_end":67,"column_start":5,"column_end":17}},{"value":"/ Using this method can create an invalid ID and is thus marked as unsafe.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57497,"byte_end":57573,"line_start":68,"line_end":68,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57578,"byte_end":57587,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57763,"byte_end":57769,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ExtendedId>::as_raw","value":"pub fn as_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns this CAN Identifier as a raw 32-bit integer.\n","sig":null,"attributes":[{"value":"/ Returns this CAN Identifier as a raw 32-bit integer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57681,"byte_end":57737,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57742,"byte_end":57751,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57881,"byte_end":57892,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"standard_id","qualname":"<ExtendedId>::standard_id","value":"pub fn standard_id(&Self) -> StandardId","parent":null,"children":[],"decl_id":null,"docs":" Returns the Base ID part of this extended identifier.\n","sig":null,"attributes":[{"value":"/ Returns the Base ID part of this extended identifier.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57812,"byte_end":57869,"line_start":80,"line_end":80,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":396},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58151,"byte_end":58159,"line_start":91,"line_end":91,"column_start":5,"column_end":13},"name":"Standard","qualname":"::can::id::Id::Standard","value":"Id::Standard(StandardId)","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":" Standard 11-bit Identifier (`0..=0x7FF`).\n","sig":null,"attributes":[{"value":"/ Standard 11-bit Identifier (`0..=0x7FF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58101,"byte_end":58146,"line_start":90,"line_end":90,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58234,"byte_end":58242,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"Extended","qualname":"::can::id::Id::Extended","value":"Id::Extended(ExtendedId)","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":" Extended 29-bit Identifier (`0..=0x1FFF_FFFF`).\n","sig":null,"attributes":[{"value":"/ Extended 29-bit Identifier (`0..=0x1FFF_FFFF`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58178,"byte_end":58229,"line_start":93,"line_end":93,"column_start":5,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":395},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58092,"byte_end":58094,"line_start":89,"line_end":89,"column_start":10,"column_end":12},"name":"Id","qualname":"::can::id::Id","value":"pub enum Id { Standard(StandardId), Extended(ExtendedId), }","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":399}],"decl_id":null,"docs":" A CAN Identifier (standard or extended).\n","sig":null,"attributes":[{"value":"/ A CAN Identifier (standard or extended).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":57993,"byte_end":58037,"line_start":87,"line_end":87,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50677,"byte_end":50682,"line_start":11,"line_end":11,"column_start":11,"column_end":16},"name":"Frame","qualname":"::can::Frame","value":"Frame: Sized","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"decl_id":null,"docs":" A CAN2.0 Frame\n","sig":null,"attributes":[{"value":"/ A CAN2.0 Frame","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50648,"byte_end":50666,"line_start":10,"line_end":10,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50799,"byte_end":50802,"line_start":15,"line_end":15,"column_start":8,"column_end":11},"name":"new","qualname":"::can::Frame::new","value":"pub fn new<impl Into<Id>: Into<Id>>(impl Into<Id>, &[u8]) -> Option<Self>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Creates a new frame.","sig":null,"attributes":[{"value":"/ Creates a new frame.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50696,"byte_end":50720,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50725,"byte_end":50728,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ This will return `None` if the data slice is too long.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50733,"byte_end":50791,"line_start":14,"line_end":14,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50994,"byte_end":51004,"line_start":20,"line_end":20,"column_start":8,"column_end":18},"name":"new_remote","qualname":"::can::Frame::new_remote","value":"pub fn new_remote<impl Into<Id>: Into<Id>>(impl Into<Id>, usize)\n-> Option<Self>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Creates a new remote frame (RTR bit set).","sig":null,"attributes":[{"value":"/ Creates a new remote frame (RTR bit set).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50857,"byte_end":50902,"line_start":17,"line_end":17,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50907,"byte_end":50910,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ This will return `None` if the data length code (DLC) is not valid.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50915,"byte_end":50986,"line_start":19,"line_end":19,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51117,"byte_end":51128,"line_start":23,"line_end":23,"column_start":8,"column_end":19},"name":"is_extended","qualname":"::can::Frame::is_extended","value":"pub fn is_extended(&Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if this frame is a extended frame.\n","sig":null,"attributes":[{"value":"/ Returns true if this frame is a extended frame.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51058,"byte_end":51109,"line_start":22,"line_end":22,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51209,"byte_end":51220,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"is_standard","qualname":"::can::Frame::is_standard","value":"pub fn is_standard(&Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if this frame is a standard frame.\n","sig":null,"attributes":[{"value":"/ Returns true if this frame is a standard frame.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51150,"byte_end":51201,"line_start":25,"line_end":25,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51334,"byte_end":51349,"line_start":31,"line_end":31,"column_start":8,"column_end":23},"name":"is_remote_frame","qualname":"::can::Frame::is_remote_frame","value":"pub fn is_remote_frame(&Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if this frame is a remote frame.\n","sig":null,"attributes":[{"value":"/ Returns true if this frame is a remote frame.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51277,"byte_end":51326,"line_start":30,"line_end":30,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51426,"byte_end":51439,"line_start":34,"line_end":34,"column_start":8,"column_end":21},"name":"is_data_frame","qualname":"::can::Frame::is_data_frame","value":"pub fn is_data_frame(&Self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns true if this frame is a data frame.\n","sig":null,"attributes":[{"value":"/ Returns true if this frame is a data frame.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51371,"byte_end":51418,"line_start":33,"line_end":33,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51541,"byte_end":51543,"line_start":39,"line_end":39,"column_start":8,"column_end":10},"name":"id","qualname":"::can::Frame::id","value":"pub fn id(&Self) -> Id","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns the frame identifier.\n","sig":null,"attributes":[{"value":"/ Returns the frame identifier.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51500,"byte_end":51533,"line_start":38,"line_end":38,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51802,"byte_end":51805,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"dlc","qualname":"::can::Frame::dlc","value":"pub fn dlc(&Self) -> usize","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns the data length code (DLC) which is in the range 0..8.","sig":null,"attributes":[{"value":"/ Returns the data length code (DLC) which is in the range 0..8.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51563,"byte_end":51629,"line_start":41,"line_end":41,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51634,"byte_end":51637,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ For data frames the DLC value always matches the length of the data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51642,"byte_end":51714,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ Remote frames do not carry any data, yet the DLC can be greater than 0.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51719,"byte_end":51794,"line_start":44,"line_end":44,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51886,"byte_end":51890,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"data","qualname":"::can::Frame::data","value":"pub fn data(&Self) -> &[u8]","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns the frame data (0..8 bytes in length).\n","sig":null,"attributes":[{"value":"/ Returns the frame data (0..8 bytes in length).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51828,"byte_end":51878,"line_start":47,"line_end":47,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51935,"byte_end":51940,"line_start":52,"line_end":52,"column_start":11,"column_end":16},"name":"Error","qualname":"::can::Error","value":"Error: core::fmt::Debug","parent":null,"children":[{"krate":0,"index":153}],"decl_id":null,"docs":" CAN error\n","sig":null,"attributes":[{"value":"/ CAN error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51911,"byte_end":51924,"line_start":51,"line_end":51,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52205,"byte_end":52209,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"kind","qualname":"::can::Error::kind","value":"pub fn kind(&Self) -> ErrorKind","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Convert error to a generic CAN error kind","sig":null,"attributes":[{"value":"/ Convert error to a generic CAN error kind","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51965,"byte_end":52010,"line_start":53,"line_end":53,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52015,"byte_end":52018,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ By using this method, CAN errors freely defined by HAL implementations","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52023,"byte_end":52097,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ can be converted to a set of generic serial errors upon which generic","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52102,"byte_end":52175,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ code can act.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52180,"byte_end":52197,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52645,"byte_end":52652,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Overrun","qualname":"::can::ErrorKind::Overrun","value":"ErrorKind::Overrun","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" The peripheral receive buffer was overrun.\n","sig":null,"attributes":[{"value":"/ The peripheral receive buffer was overrun.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52594,"byte_end":52640,"line_start":68,"line_end":68,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52813,"byte_end":52816,"line_start":74,"line_end":74,"column_start":5,"column_end":8},"name":"Bit","qualname":"::can::ErrorKind::Bit","value":"ErrorKind::Bit","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A bit error is detected at that bit time when the bit value that is\n monitored differs from the bit value sent.\n","sig":null,"attributes":[{"value":"/ A bit error is detected at that bit time when the bit value that is","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52686,"byte_end":52757,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ monitored differs from the bit value sent.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52762,"byte_end":52808,"line_start":73,"line_end":73,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":419},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52998,"byte_end":53003,"line_start":79,"line_end":79,"column_start":5,"column_end":10},"name":"Stuff","qualname":"::can::ErrorKind::Stuff","value":"ErrorKind::Stuff","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A stuff error is detected at the bit time of the sixth consecutive\n equal bit level in a frame field that shall be coded by the method\n of bit stuffing.\n","sig":null,"attributes":[{"value":"/ A stuff error is detected at the bit time of the sixth consecutive","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52823,"byte_end":52893,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/ equal bit level in a frame field that shall be coded by the method","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52898,"byte_end":52968,"line_start":77,"line_end":77,"column_start":5,"column_end":75}},{"value":"/ of bit stuffing.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52973,"byte_end":52993,"line_start":78,"line_end":78,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53075,"byte_end":53078,"line_start":82,"line_end":82,"column_start":5,"column_end":8},"name":"Crc","qualname":"::can::ErrorKind::Crc","value":"ErrorKind::Crc","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Calculated CRC sequence does not equal the received one.\n","sig":null,"attributes":[{"value":"/ Calculated CRC sequence does not equal the received one.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53010,"byte_end":53070,"line_start":81,"line_end":81,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53195,"byte_end":53199,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"Form","qualname":"::can::ErrorKind::Form","value":"ErrorKind::Form","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A form error shall be detected when a fixed-form bit field contains\n one or more illegal bits.\n","sig":null,"attributes":[{"value":"/ A form error shall be detected when a fixed-form bit field contains","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53085,"byte_end":53156,"line_start":84,"line_end":84,"column_start":5,"column_end":76}},{"value":"/ one or more illegal bits.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53161,"byte_end":53190,"line_start":85,"line_end":85,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53336,"byte_end":53347,"line_start":90,"line_end":90,"column_start":5,"column_end":16},"name":"Acknowledge","qualname":"::can::ErrorKind::Acknowledge","value":"ErrorKind::Acknowledge","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" An ACK  error shall be detected by a transmitter whenever it does not\n monitor a dominant bit during the ACK slot.\n","sig":null,"attributes":[{"value":"/ An ACK  error shall be detected by a transmitter whenever it does not","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53206,"byte_end":53279,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ monitor a dominant bit during the ACK slot.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53284,"byte_end":53331,"line_start":89,"line_end":89,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53439,"byte_end":53444,"line_start":93,"line_end":93,"column_start":5,"column_end":10},"name":"Other","qualname":"::can::ErrorKind::Other","value":"ErrorKind::Other","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A different error occurred. The original error may contain more information.\n","sig":null,"attributes":[{"value":"/ A different error occurred. The original error may contain more information.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53354,"byte_end":53434,"line_start":92,"line_end":92,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":414},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52578,"byte_end":52587,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::can::ErrorKind","value":"pub enum ErrorKind { Overrun, Bit, Stuff, Crc, Form, Acknowledge, Other, }","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427}],"decl_id":null,"docs":" CAN error kind","sig":null,"attributes":[{"value":"/ CAN error kind","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52234,"byte_end":52252,"line_start":61,"line_end":61,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52253,"byte_end":52256,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This represents a common set of CAN operation errors. HAL implementations are","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52257,"byte_end":52338,"line_start":63,"line_end":63,"column_start":1,"column_end":82}},{"value":"/ free to define more specific or additional error types. However, by providing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52339,"byte_end":52420,"line_start":64,"line_end":64,"column_start":1,"column_end":82}},{"value":"/ a mapping to these common CAN errors, generic code can still react to them.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":52421,"byte_end":52500,"line_start":65,"line_end":65,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":158},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"digital","qualname":"::digital","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":163},{"krate":0,"index":181},{"krate":0,"index":204},{"krate":0,"index":216}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[{"value":"/ Digital I/O","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59728,"byte_end":59743,"line_start":1,"line_end":1,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59744,"byte_end":59747,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59748,"byte_end":59751,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59752,"byte_end":59755,"line_start":4,"line_end":4,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::digital::v1","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","parent":null,"children":[{"krate":0,"index":160}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[{"value":"deprecated(since = \"0.2.2\", note =\n\"Deprecated because the methods cannot return errors. \\\n                                      Users should use the traits in digital::v2.\")","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59791,"byte_end":59978,"line_start":7,"line_end":11,"column_start":1,"column_end":3}},{"value":"/ Digital I/O","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60328,"byte_end":60343,"line_start":1,"line_end":1,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60344,"byte_end":60347,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The traits in this module are now deprecated. Please use the new versions included","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60348,"byte_end":60434,"line_start":3,"line_end":3,"column_start":1,"column_end":87}},{"value":"/ in `digital::v2`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60435,"byte_end":60456,"line_start":4,"line_end":4,"column_start":1,"column_end":22}},{"value":"allow(deprecated)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60458,"byte_end":60479,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60657,"byte_end":60666,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v1::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" Single digital push-pull output pin","sig":null,"attributes":[{"value":"/ Single digital push-pull output pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60481,"byte_end":60520,"line_start":8,"line_end":8,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60521,"byte_end":60524,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ *This version of the trait is now deprecated. Please use the new `OutputPin` trait in","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60525,"byte_end":60614,"line_start":10,"line_end":10,"column_start":1,"column_end":90}},{"value":"/ `digital::v2::OutputPin`*.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60615,"byte_end":60645,"line_start":11,"line_end":11,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60838,"byte_end":60845,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v1::OutputPin::set_low","value":"pub fn set_low(&mut Self)","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[{"value":"/ Drives the pin low","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60673,"byte_end":60695,"line_start":14,"line_end":14,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60700,"byte_end":60703,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be low, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60708,"byte_end":60803,"line_start":16,"line_end":16,"column_start":5,"column_end":100}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60808,"byte_end":60830,"line_start":17,"line_end":17,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":61030,"byte_end":61038,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v1::OutputPin::set_high","value":"pub fn set_high(&mut Self)","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[{"value":"/ Drives the pin high","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60863,"byte_end":60886,"line_start":20,"line_end":20,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60891,"byte_end":60894,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be high, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":60899,"byte_end":60995,"line_start":22,"line_end":22,"column_start":5,"column_end":101}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1.rs","byte_start":61000,"byte_end":61022,"line_start":23,"line_end":23,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2","qualname":"::digital::v2","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":447},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":176}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[{"value":"/ Digital I/O","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64528,"byte_end":64543,"line_start":1,"line_end":1,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64544,"byte_end":64547,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Version 2 / fallible traits. Infallible implementations should set Error to `!`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64548,"byte_end":64632,"line_start":3,"line_end":3,"column_start":1,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":448},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65068,"byte_end":65071,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Low","qualname":"::digital::v2::PinState::Low","value":"PinState::Low","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Low pin state\n","sig":null,"attributes":[{"value":"/ Low pin state","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65046,"byte_end":65063,"line_start":19,"line_end":19,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65100,"byte_end":65104,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"High","qualname":"::digital::v2::PinState::High","value":"PinState::High","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" High pin state\n","sig":null,"attributes":[{"value":"/ High pin state","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65077,"byte_end":65095,"line_start":21,"line_end":21,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":447},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65031,"byte_end":65039,"line_start":18,"line_end":18,"column_start":10,"column_end":18},"name":"PinState","qualname":"::digital::v2::PinState","value":"pub enum PinState { Low, High, }","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":450}],"decl_id":null,"docs":" Digital output pin state","sig":null,"attributes":[{"value":"/ Digital output pin state","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64672,"byte_end":64700,"line_start":7,"line_end":7,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64701,"byte_end":64704,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Conversion from `bool` and logical negation are also implemented","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64705,"byte_end":64773,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ for this type.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64774,"byte_end":64792,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64793,"byte_end":64804,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ # use embedded_hal::digital::v2::PinState;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64805,"byte_end":64851,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/ let state = PinState::from(false);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64852,"byte_end":64890,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(state, PinState::Low);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64891,"byte_end":64928,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(!state, PinState::High);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64929,"byte_end":64968,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":64969,"byte_end":64976,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":176},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65556,"byte_end":65565,"line_start":46,"line_end":46,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v2::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" Single digital push-pull output pin\n","sig":null,"attributes":[{"value":"/ Single digital push-pull output pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65506,"byte_end":65545,"line_start":45,"line_end":45,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":177},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65596,"byte_end":65601,"line_start":48,"line_end":48,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::v2::OutputPin::Error","value":"type Error;","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65572,"byte_end":65586,"line_start":47,"line_end":47,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65773,"byte_end":65780,"line_start":54,"line_end":54,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v2::OutputPin::set_low","value":"pub fn set_low(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[{"value":"/ Drives the pin low","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65608,"byte_end":65630,"line_start":50,"line_end":50,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65635,"byte_end":65638,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be low, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65643,"byte_end":65738,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65743,"byte_end":65765,"line_start":53,"line_end":53,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65992,"byte_end":66000,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v2::OutputPin::set_high","value":"pub fn set_high(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[{"value":"/ Drives the pin high","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65825,"byte_end":65848,"line_start":56,"line_end":56,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65853,"byte_end":65856,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be high, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65861,"byte_end":65957,"line_start":58,"line_end":58,"column_start":5,"column_end":101}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65962,"byte_end":65984,"line_start":59,"line_end":59,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":66258,"byte_end":66267,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"set_state","qualname":"::digital::v2::OutputPin::set_state","value":"pub fn set_state(&mut Self, PinState) -> Result<(), Self::Error>","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Drives the pin high or low depending on the provided value","sig":null,"attributes":[{"value":"/ Drives the pin high or low depending on the provided value","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":66045,"byte_end":66107,"line_start":62,"line_end":62,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":66112,"byte_end":66115,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ *NOTE* the actual electrical state of the pin may not actually be high or low, e.g. due to external","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":66120,"byte_end":66223,"line_start":64,"line_end":64,"column_start":5,"column_end":108}},{"value":"/ electrical sources","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":66228,"byte_end":66250,"line_start":65,"line_end":65,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":181},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1_compat","qualname":"::digital::v1_compat","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":199}],"decl_id":null,"docs":" v1 compatibility wrappers","sig":null,"attributes":[{"value":"/ v1 compatibility wrappers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70717,"byte_end":70746,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70747,"byte_end":70750,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides wrappers to support use of v2 implementations with","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70751,"byte_end":70826,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ v1 consumers. v2 traits must be explicitly cast to the v1 version using","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70827,"byte_end":70902,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ `.into()`, and will panic on internal errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70903,"byte_end":70951,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70952,"byte_end":70955,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70956,"byte_end":70963,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70964,"byte_end":70994,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/ use embedded_hal::digital::{v1, v2, v1_compat::OldOutputPin};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":70995,"byte_end":71060,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71061,"byte_end":71064,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ struct NewOutputPinImpl {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71065,"byte_end":71095,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71096,"byte_end":71099,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ impl v2::OutputPin for NewOutputPinImpl {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71100,"byte_end":71145,"line_start":13,"line_end":13,"column_start":1,"column_end":46}},{"value":"/     type Error = ();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71146,"byte_end":71170,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/     fn set_low(&mut self) -> Result<(), Self::Error> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71171,"byte_end":71238,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/     fn set_high(&mut self) -> Result<(), Self::Error>{ Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71239,"byte_end":71306,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71307,"byte_end":71312,"line_start":17,"line_end":17,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71313,"byte_end":71316,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ struct OldOutputPinConsumer<T: v1::OutputPin> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71317,"byte_end":71368,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/     _pin: T,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71369,"byte_end":71385,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71386,"byte_end":71391,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71392,"byte_end":71395,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ impl <T>OldOutputPinConsumer<T>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71396,"byte_end":71431,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ where T: v1::OutputPin {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71432,"byte_end":71460,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/     pub fn new(pin: T) -> OldOutputPinConsumer<T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71461,"byte_end":71516,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/         OldOutputPinConsumer{ _pin: pin }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71517,"byte_end":71562,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71563,"byte_end":71572,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71573,"byte_end":71578,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71579,"byte_end":71582,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71583,"byte_end":71598,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     let pin = NewOutputPinImpl{};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71599,"byte_end":71636,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/     let _consumer: OldOutputPinConsumer<OldOutputPin<_>> = OldOutputPinConsumer::new(pin.into());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71637,"byte_end":71738,"line_start":32,"line_end":32,"column_start":1,"column_end":102}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71739,"byte_end":71744,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71745,"byte_end":71752,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71753,"byte_end":71756,"line_start":35,"line_end":35,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71916,"byte_end":71928,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"OldOutputPin","qualname":"::digital::v1_compat::OldOutputPin","value":"OldOutputPin {  }","parent":null,"children":[{"krate":0,"index":190}],"decl_id":null,"docs":" Wrapper to allow fallible `v2::OutputPin` traits to be converted to `v1::OutputPin` traits\n","sig":null,"attributes":[{"value":"/ Wrapper to allow fallible `v2::OutputPin` traits to be converted to `v1::OutputPin` traits","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71810,"byte_end":71904,"line_start":41,"line_end":41,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72120,"byte_end":72123,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<OldOutputPin<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new OldOutputPin wrapper around a `v2::OutputPin`\n","sig":null,"attributes":[{"value":"/ Create a new OldOutputPin wrapper around a `v2::OutputPin`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72046,"byte_end":72108,"line_start":51,"line_end":51,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":204},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2_compat","qualname":"::digital::v2_compat","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211}],"decl_id":null,"docs":" v2 compatibility shims","sig":null,"attributes":[{"value":"/ v2 compatibility shims","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77663,"byte_end":77689,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77690,"byte_end":77693,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module adds implicit forward support to v1 digital traits,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77694,"byte_end":77761,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/ allowing v1 implementations to be directly used with v2 consumers.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77762,"byte_end":77832,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77833,"byte_end":77836,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77837,"byte_end":77844,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77845,"byte_end":77875,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/ use embedded_hal::digital::{v1, v2};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77876,"byte_end":77916,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77917,"byte_end":77920,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ struct OldOutputPinImpl { }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77921,"byte_end":77952,"line_start":10,"line_end":10,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77953,"byte_end":77956,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ impl v1::OutputPin for OldOutputPinImpl {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":77957,"byte_end":78002,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/     fn set_low(&mut self) { }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78003,"byte_end":78036,"line_start":13,"line_end":13,"column_start":1,"column_end":34}},{"value":"/     fn set_high(&mut self) { }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78037,"byte_end":78071,"line_start":14,"line_end":14,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78072,"byte_end":78077,"line_start":15,"line_end":15,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78078,"byte_end":78081,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ struct NewOutputPinConsumer<T: v2::OutputPin> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78082,"byte_end":78133,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"/     _pin: T,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78134,"byte_end":78150,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78151,"byte_end":78156,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78157,"byte_end":78160,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ impl <T>NewOutputPinConsumer<T>","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78161,"byte_end":78196,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/ where T: v2::OutputPin {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78197,"byte_end":78225,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/     pub fn new(pin: T) -> NewOutputPinConsumer<T> {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78226,"byte_end":78281,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/         NewOutputPinConsumer{ _pin: pin }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78282,"byte_end":78327,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78328,"byte_end":78337,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78338,"byte_end":78343,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78344,"byte_end":78347,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78348,"byte_end":78363,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/     let pin = OldOutputPinImpl{};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78364,"byte_end":78401,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/     let _consumer = NewOutputPinConsumer::new(pin);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78402,"byte_end":78457,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78458,"byte_end":78463,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78464,"byte_end":78471,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78472,"byte_end":78475,"line_start":33,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":217},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/fmt.rs","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225}],"decl_id":null,"docs":" Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","sig":null,"attributes":[{"value":"/ Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/fmt.rs","byte_start":83192,"byte_end":83263,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/fmt.rs","byte_start":83264,"byte_end":83267,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ TODO write example of usage","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/fmt.rs","byte_start":83268,"byte_end":83299,"line_start":3,"line_end":3,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":230},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":272}],"decl_id":null,"docs":" The prelude is a collection of all the traits in this crate","sig":null,"attributes":[{"value":"/ The prelude is a collection of all the traits in this crate","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":83650,"byte_end":83713,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":83714,"byte_end":83717,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The traits have been renamed to avoid collisions with other items when","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":83718,"byte_end":83792,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ performing a glob import.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/prelude.rs","byte_start":83793,"byte_end":83822,"line_start":4,"line_end":4,"column_start":1,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":275},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::serial","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":283}],"decl_id":null,"docs":" Serial interface\n","sig":null,"attributes":[{"value":"/ Serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85600,"byte_end":85620,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":279},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85830,"byte_end":85834,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::serial::Read","value":"Read<Word>","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"decl_id":null,"docs":" Read half of a serial interface","sig":null,"attributes":[{"value":"/ Read half of a serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85631,"byte_end":85666,"line_start":5,"line_end":5,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85667,"byte_end":85670,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Some serial interfaces support different data sizes (8 bits, 9 bits, etc.);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85671,"byte_end":85750,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This can be encoded in this trait via the `Word` type parameter.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85751,"byte_end":85819,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":281},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85871,"byte_end":85876,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Read::Error","value":"type Error;","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Read error\n","sig":null,"attributes":[{"value":"/ Read error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85847,"byte_end":85861,"line_start":10,"line_end":10,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85940,"byte_end":85944,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"read","qualname":"::serial::Read::read","value":"pub fn read(&mut Self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":" Reads a single word from the serial interface\n","sig":null,"attributes":[{"value":"/ Reads a single word from the serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85883,"byte_end":85932,"line_start":13,"line_end":13,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":283},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86040,"byte_end":86045,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Write","qualname":"::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"decl_id":null,"docs":" Write half of a serial interface\n","sig":null,"attributes":[{"value":"/ Write half of a serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":85993,"byte_end":86029,"line_start":17,"line_end":17,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86083,"byte_end":86088,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[{"value":"/ Write error","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86058,"byte_end":86073,"line_start":19,"line_end":19,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86151,"byte_end":86156,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"write","qualname":"::serial::Write::write","value":"pub fn write(&mut Self, Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Writes a single word to the serial interface\n","sig":null,"attributes":[{"value":"/ Writes a single word to the serial interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86095,"byte_end":86143,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86297,"byte_end":86302,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"flush","qualname":"::serial::Write::flush","value":"pub fn flush(&mut Self) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Ensures that none of the previously written words are still buffered\n","sig":null,"attributes":[{"value":"/ Ensures that none of the previously written words are still buffered","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/serial.rs","byte_start":86217,"byte_end":86289,"line_start":25,"line_end":25,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":288},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::spi","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":463},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" Serial Peripheral Interface\n","sig":null,"attributes":[{"value":"/ Serial Peripheral Interface","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86349,"byte_end":86380,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86783,"byte_end":86793,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"FullDuplex","qualname":"::spi::FullDuplex","value":"FullDuplex<Word>","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" Full duplex (master mode)","sig":null,"attributes":[{"value":"/ Full duplex (master mode)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86391,"byte_end":86420,"line_start":5,"line_end":5,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86421,"byte_end":86424,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86425,"byte_end":86436,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86437,"byte_end":86440,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - It's the task of the user of this interface to manage the slave select lines","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86441,"byte_end":86523,"line_start":9,"line_end":9,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86524,"byte_end":86527,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - Due to how full duplex SPI works each `read` call must be preceded by a `send` call.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86528,"byte_end":86618,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86619,"byte_end":86622,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ - Some SPIs can work with 8-bit *and* 16-bit words. You can overload this trait with different","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86623,"byte_end":86721,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ `Word` types to allow operation in both modes.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86722,"byte_end":86772,"line_start":14,"line_end":14,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86848,"byte_end":86853,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::spi::FullDuplex::Error","value":"type Error;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" An enumeration of SPI errors\n","sig":null,"attributes":[{"value":"/ An enumeration of SPI errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86806,"byte_end":86838,"line_start":16,"line_end":16,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87020,"byte_end":87024,"line_start":23,"line_end":23,"column_start":8,"column_end":12},"name":"read","qualname":"::spi::FullDuplex::read","value":"pub fn read(&mut Self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Reads the word stored in the shift register","sig":null,"attributes":[{"value":"/ Reads the word stored in the shift register","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86860,"byte_end":86907,"line_start":19,"line_end":19,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86912,"byte_end":86915,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ **NOTE** A word must be sent to the slave before attempting to call this","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":86920,"byte_end":86996,"line_start":21,"line_end":21,"column_start":5,"column_end":81}},{"value":"/ method.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87001,"byte_end":87012,"line_start":22,"line_end":22,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87112,"byte_end":87116,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"send","qualname":"::spi::FullDuplex::send","value":"pub fn send(&mut Self, Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Sends a word to the slave\n","sig":null,"attributes":[{"value":"/ Sends a word to the slave","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87075,"byte_end":87104,"line_start":25,"line_end":25,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87291,"byte_end":87298,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"IdleLow","qualname":"::spi::Polarity::IdleLow","value":"Polarity::IdleLow","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Clock signal low when idle\n","sig":null,"attributes":[{"value":"/ Clock signal low when idle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87256,"byte_end":87286,"line_start":32,"line_end":32,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87340,"byte_end":87348,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"IdleHigh","qualname":"::spi::Polarity::IdleHigh","value":"Polarity::IdleHigh","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Clock signal high when idle\n","sig":null,"attributes":[{"value":"/ Clock signal high when idle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87304,"byte_end":87335,"line_start":34,"line_end":34,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":463},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87241,"byte_end":87249,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::spi::Polarity","value":"pub enum Polarity { IdleLow, IdleHigh, }","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":466}],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[{"value":"/ Clock polarity","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87175,"byte_end":87193,"line_start":29,"line_end":29,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":478},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87485,"byte_end":87509,"line_start":42,"line_end":42,"column_start":5,"column_end":29},"name":"CaptureOnFirstTransition","qualname":"::spi::Phase::CaptureOnFirstTransition","value":"Phase::CaptureOnFirstTransition","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the first clock transition\n","sig":null,"attributes":[{"value":"/ Data in \"captured\" on the first clock transition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87428,"byte_end":87480,"line_start":41,"line_end":41,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":480},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87573,"byte_end":87598,"line_start":44,"line_end":44,"column_start":5,"column_end":30},"name":"CaptureOnSecondTransition","qualname":"::spi::Phase::CaptureOnSecondTransition","value":"Phase::CaptureOnSecondTransition","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the second clock transition\n","sig":null,"attributes":[{"value":"/ Data in \"captured\" on the second clock transition","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87515,"byte_end":87568,"line_start":43,"line_end":43,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":477},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87416,"byte_end":87421,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Phase","qualname":"::spi::Phase","value":"pub enum Phase { CaptureOnFirstTransition, CaptureOnSecondTransition, }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480}],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[{"value":"/ Clock phase","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87353,"byte_end":87368,"line_start":38,"line_end":38,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87665,"byte_end":87669,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Mode","qualname":"::spi::Mode","value":"Mode { polarity, phase }","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" SPI mode\n","sig":null,"attributes":[{"value":"/ SPI mode","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87603,"byte_end":87615,"line_start":47,"line_end":47,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":492},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87703,"byte_end":87711,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"polarity","qualname":"::spi::Mode::polarity","value":"spi::Polarity","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[{"value":"/ Clock polarity","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87676,"byte_end":87694,"line_start":50,"line_end":50,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":493},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87751,"byte_end":87756,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"phase","qualname":"::spi::Mode::phase","value":"spi::Phase","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[{"value":"/ Clock phase","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87727,"byte_end":87742,"line_start":52,"line_end":52,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87812,"byte_end":87818,"line_start":57,"line_end":57,"column_start":11,"column_end":17},"name":"MODE_0","qualname":"::spi::MODE_0","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 0\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 0, CPHA = 0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87768,"byte_end":87801,"line_start":56,"line_end":56,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87959,"byte_end":87965,"line_start":63,"line_end":63,"column_start":11,"column_end":17},"name":"MODE_1","qualname":"::spi::MODE_1","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 1\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 0, CPHA = 1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":87915,"byte_end":87948,"line_start":62,"line_end":62,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":88107,"byte_end":88113,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"MODE_2","qualname":"::spi::MODE_2","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 0\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 1, CPHA = 0","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":88063,"byte_end":88096,"line_start":68,"line_end":68,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":88255,"byte_end":88261,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"name":"MODE_3","qualname":"::spi::MODE_3","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 1\n","sig":null,"attributes":[{"value":"/ Helper for CPOL = 1, CPHA = 1","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/spi.rs","byte_start":88211,"byte_end":88244,"line_start":74,"line_end":74,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":301},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timer","qualname":"::timer","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":313},{"krate":0,"index":314}],"decl_id":null,"docs":" Timers\n","sig":null,"attributes":[{"value":"/ Timers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88360,"byte_end":88370,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":308},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89781,"byte_end":89790,"line_start":60,"line_end":60,"column_start":11,"column_end":20},"name":"CountDown","qualname":"::timer::CountDown","value":"CountDown","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":312}],"decl_id":null,"docs":" A count down timer","sig":null,"attributes":[{"value":"/ A count down timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88397,"byte_end":88419,"line_start":6,"line_end":6,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88420,"byte_end":88423,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88424,"byte_end":88438,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88439,"byte_end":88442,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ - `self.start(count); block!(self.wait());` MUST block for AT LEAST the time specified by","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88443,"byte_end":88536,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ `count`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88537,"byte_end":88549,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88550,"byte_end":88553,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *Note* that the implementer doesn't necessarily have to be a *downcounting* timer; it could also","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88554,"byte_end":88654,"line_start":13,"line_end":13,"column_start":1,"column_end":101}},{"value":"/ be an *upcounting* timer as long as the above contract is upheld.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88655,"byte_end":88724,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88725,"byte_end":88728,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88729,"byte_end":88743,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88744,"byte_end":88747,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ You can use this timer to create delays","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88748,"byte_end":88791,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88792,"byte_end":88795,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88796,"byte_end":88803,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ extern crate embedded_hal as hal;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88804,"byte_end":88841,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ #[macro_use(block)]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88842,"byte_end":88865,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ extern crate nb;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88866,"byte_end":88886,"line_start":23,"line_end":23,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88887,"byte_end":88890,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ use hal::prelude::*;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88891,"byte_end":88915,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88916,"byte_end":88919,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88920,"byte_end":88935,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     let mut led: Led = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88936,"byte_end":88964,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88965,"byte_end":88982,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/ #       Led","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88983,"byte_end":88998,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":88999,"byte_end":89009,"line_start":31,"line_end":31,"column_start":1,"column_end":11}},{"value":"/     let mut timer: Timer6 = {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89010,"byte_end":89043,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/         // ..","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89044,"byte_end":89061,"line_start":33,"line_end":33,"column_start":1,"column_end":18}},{"value":"/ #       Timer6","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89062,"byte_end":89080,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89081,"byte_end":89091,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89092,"byte_end":89095,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     Led.on();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89096,"byte_end":89113,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/     timer.start(1.s());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89114,"byte_end":89141,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/     block!(timer.wait()); // blocks for 1 second","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89142,"byte_end":89194,"line_start":39,"line_end":39,"column_start":1,"column_end":53}},{"value":"/     Led.off();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89195,"byte_end":89213,"line_start":40,"line_end":40,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89214,"byte_end":89219,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89220,"byte_end":89223,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # extern crate void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89224,"byte_end":89248,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/ # use void::Void;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89249,"byte_end":89270,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/ # struct Seconds(u32);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89271,"byte_end":89297,"line_start":45,"line_end":45,"column_start":1,"column_end":27}},{"value":"/ # trait U32Ext { fn s(self) -> Seconds; }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89298,"byte_end":89343,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/ # impl U32Ext for u32 { fn s(self) -> Seconds { Seconds(self) } }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89344,"byte_end":89413,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/ # struct Led;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89414,"byte_end":89431,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/ # impl Led {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89432,"byte_end":89448,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/ #     pub fn off(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89449,"byte_end":89483,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ #     pub fn on(&mut self) {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89484,"byte_end":89517,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89518,"byte_end":89525,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ # struct Timer6;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89526,"byte_end":89546,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/ # impl hal::timer::CountDown for Timer6 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89547,"byte_end":89592,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ #     type Time = Seconds;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89593,"byte_end":89623,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/ #     fn start<T>(&mut self, _: T) where T: Into<Seconds> {}","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89624,"byte_end":89688,"line_start":56,"line_end":56,"column_start":1,"column_end":65}},{"value":"/ #     fn wait(&mut self) -> ::nb::Result<(), Void> { Ok(()) }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89689,"byte_end":89754,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89755,"byte_end":89762,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89763,"byte_end":89770,"line_start":59,"line_end":59,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":309},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89846,"byte_end":89850,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Time","qualname":"::timer::CountDown::Time","value":"type Time;","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" The unit of time used by this timer\n","sig":null,"attributes":[{"value":"/ The unit of time used by this timer","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89797,"byte_end":89836,"line_start":61,"line_end":61,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89892,"byte_end":89897,"line_start":65,"line_end":65,"column_start":8,"column_end":13},"name":"start","qualname":"::timer::CountDown::start","value":"pub fn start<T>(&mut Self, T) where T: Into<Self::Time>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Starts a new count down\n","sig":null,"attributes":[{"value":"/ Starts a new count down","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89857,"byte_end":89884,"line_start":64,"line_end":64,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90369,"byte_end":90373,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"wait","qualname":"::timer::CountDown::wait","value":"pub fn wait(&mut Self) -> nb::Result<(), Void>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Non-blockingly \"waits\" until the count down finishes","sig":null,"attributes":[{"value":"/ Non-blockingly \"waits\" until the count down finishes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":89966,"byte_end":90022,"line_start":69,"line_end":69,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90027,"byte_end":90030,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Contract","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90035,"byte_end":90049,"line_start":71,"line_end":71,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90054,"byte_end":90057,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ - If `Self: Periodic`, the timer will start a new count down right after the last one","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90062,"byte_end":90151,"line_start":73,"line_end":73,"column_start":5,"column_end":94}},{"value":"/ finishes.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90156,"byte_end":90169,"line_start":74,"line_end":74,"column_start":5,"column_end":18}},{"value":"/ - Otherwise the behavior of calling `wait` after the last call returned `Ok` is UNSPECIFIED.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90174,"byte_end":90270,"line_start":75,"line_end":75,"column_start":5,"column_end":101}},{"value":"/ Implementers are suggested to panic on this scenario to signal a programmer error.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90275,"byte_end":90361,"line_start":76,"line_end":76,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":313},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90480,"byte_end":90488,"line_start":81,"line_end":81,"column_start":11,"column_end":19},"name":"Periodic","qualname":"::timer::Periodic","value":"Periodic","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that indicates that a timer is periodic\n","sig":null,"attributes":[{"value":"/ Marker trait that indicates that a timer is periodic","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90413,"byte_end":90469,"line_start":80,"line_end":80,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":314},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90540,"byte_end":90546,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"Cancel","qualname":"::timer::Cancel","value":"Cancel: CountDown","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" Trait for cancelable countdowns.\n","sig":null,"attributes":[{"value":"/ Trait for cancelable countdowns.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90493,"byte_end":90529,"line_start":83,"line_end":83,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":315},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90628,"byte_end":90633,"line_start":86,"line_end":86,"column_start":10,"column_end":15},"name":"Error","qualname":"::timer::Cancel::Error","value":"type Error;","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Error returned when a countdown can't be canceled.\n","sig":null,"attributes":[{"value":"/ Error returned when a countdown can't be canceled.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90564,"byte_end":90618,"line_start":85,"line_end":85,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90909,"byte_end":90915,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"cancel","qualname":"::timer::Cancel::cancel","value":"pub fn cancel(&mut Self) -> Result<(), Self::Error>","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Tries to cancel this countdown.","sig":null,"attributes":[{"value":"/ Tries to cancel this countdown.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90640,"byte_end":90675,"line_start":88,"line_end":88,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90680,"byte_end":90683,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90688,"byte_end":90700,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90705,"byte_end":90708,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the countdown has already been canceled or was never started.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90713,"byte_end":90807,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/ An error is also returned if the countdown is not `Periodic` and has already expired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90812,"byte_end":90901,"line_start":93,"line_end":93,"column_start":5,"column_end":94}}]},{"kind":"Mod","id":{"krate":0,"index":317},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/watchdog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"watchdog","qualname":"::watchdog","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/watchdog.rs","parent":null,"children":[],"decl_id":null,"docs":" Traits for interactions with a processors watchdog timer.\n","sig":null,"attributes":[{"value":"/ Traits for interactions with a processors watchdog timer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/watchdog.rs","byte_start":90958,"byte_end":91019,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":318},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26682,"byte_end":26688,"line_start":894,"line_end":894,"column_start":11,"column_end":17},"name":"PwmPin","qualname":"::PwmPin","value":"PwmPin","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" A single PWM channel / pin","sig":null,"attributes":[{"value":"/ A single PWM channel / pin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26611,"byte_end":26641,"line_start":891,"line_end":891,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26642,"byte_end":26645,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ See `Pwm` for details","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26646,"byte_end":26671,"line_start":893,"line_end":893,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":319},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26899,"byte_end":26903,"line_start":899,"line_end":899,"column_start":10,"column_end":14},"name":"Duty","qualname":"::PwmPin::Duty","value":"type Duty;","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[{"value":"/ Type for the `duty` methods","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26695,"byte_end":26726,"line_start":895,"line_end":895,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26731,"byte_end":26734,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The implementer is free to choose a float / percentage representation","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26739,"byte_end":26812,"line_start":897,"line_end":897,"column_start":5,"column_end":78}},{"value":"/ (e.g. `0.0 .. 1.0`) or an integer representation (e.g. `0 .. 65535`)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26817,"byte_end":26889,"line_start":898,"line_end":898,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26946,"byte_end":26953,"line_start":902,"line_end":902,"column_start":8,"column_end":15},"name":"disable","qualname":"::PwmPin::disable","value":"pub fn disable(&mut Self)","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Disables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26910,"byte_end":26938,"line_start":901,"line_end":901,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27006,"byte_end":27012,"line_start":905,"line_end":905,"column_start":8,"column_end":14},"name":"enable","qualname":"::PwmPin::enable","value":"pub fn enable(&mut Self)","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[{"value":"/ Enables a PWM `channel`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":26971,"byte_end":26998,"line_start":904,"line_end":904,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27072,"byte_end":27080,"line_start":908,"line_end":908,"column_start":8,"column_end":16},"name":"get_duty","qualname":"::PwmPin::get_duty","value":"pub fn get_duty(&Self) -> Self::Duty","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[{"value":"/ Returns the current duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27030,"byte_end":27064,"line_start":907,"line_end":907,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27156,"byte_end":27168,"line_start":911,"line_end":911,"column_start":8,"column_end":20},"name":"get_max_duty","qualname":"::PwmPin::get_max_duty","value":"pub fn get_max_duty(&Self) -> Self::Duty","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[{"value":"/ Returns the maximum duty cycle value","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27108,"byte_end":27148,"line_start":910,"line_end":910,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27229,"byte_end":27237,"line_start":914,"line_end":914,"column_start":8,"column_end":16},"name":"set_duty","qualname":"::PwmPin::set_duty","value":"pub fn set_duty(&mut Self, Self::Duty)","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[{"value":"/ Sets a new duty cycle","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":27196,"byte_end":27221,"line_start":913,"line_end":913,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":29425,"byte_end":29431,"line_start":998,"line_end":998,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38138,"byte_end":38153,"line_start":100,"line_end":100,"column_start":26,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38182,"byte_end":38195,"line_start":101,"line_end":101,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38506,"byte_end":38521,"line_start":114,"line_end":114,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38547,"byte_end":38560,"line_start":116,"line_end":116,"column_start":22,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46724,"byte_end":46725,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48211,"byte_end":48212,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48815,"byte_end":48816,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55756,"byte_end":55766,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56838,"byte_end":56848,"line_start":46,"line_end":46,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58285,"byte_end":58287,"line_start":97,"line_end":97,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58402,"byte_end":58404,"line_start":104,"line_end":104,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53464,"byte_end":53473,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53561,"byte_end":53570,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65129,"byte_end":65137,"line_start":25,"line_end":25,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65301,"byte_end":65309,"line_start":34,"line_end":34,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71960,"byte_end":71972,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72325,"byte_end":72337,"line_start":63,"line_end":63,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72639,"byte_end":72651,"line_start":76,"line_end":76,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78650,"byte_end":78651,"line_start":41,"line_end":41,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20601,"byte_end":20604,"line_start":692,"line_end":692,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20614,"byte_end":20622,"line_start":693,"line_end":693,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33439,"byte_end":33442,"line_start":7,"line_end":7,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33452,"byte_end":33457,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33467,"byte_end":33470,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":21}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33480,"byte_end":33483,"line_start":10,"line_end":10,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33493,"byte_end":33499,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/mod.rs","byte_start":33509,"byte_end":33512,"line_start":12,"line_end":12,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":81}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20632,"byte_end":20635,"line_start":694,"line_end":694,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50591,"byte_end":50593,"line_start":3,"line_end":3,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":114}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20645,"byte_end":20652,"line_start":695,"line_end":695,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":158}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":59987,"byte_end":59989,"line_start":12,"line_end":12,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":159}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":60025,"byte_end":60027,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":163}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":60119,"byte_end":60128,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":181}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/mod.rs","byte_start":60217,"byte_end":60226,"line_start":23,"line_end":23,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":204}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20662,"byte_end":20665,"line_start":696,"line_end":696,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":217}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20675,"byte_end":20682,"line_start":697,"line_end":697,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":230}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20692,"byte_end":20698,"line_start":698,"line_end":698,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":275}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20708,"byte_end":20711,"line_start":699,"line_end":699,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":288}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20721,"byte_end":20726,"line_start":700,"line_end":700,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":301}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/lib.rs","byte_start":20736,"byte_end":20744,"line_start":701,"line_end":701,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":317}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38138,"byte_end":38153,"line_start":100,"line_end":100,"column_start":26,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":326}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38182,"byte_end":38195,"line_start":101,"line_end":101,"column_start":26,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":0,"index":326}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38354,"byte_end":38360,"line_start":106,"line_end":106,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":326},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38506,"byte_end":38521,"line_start":114,"line_end":114,"column_start":22,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/i2c.rs","byte_start":38547,"byte_end":38560,"line_start":116,"line_end":116,"column_start":22,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":29},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46654,"byte_end":46659,"line_start":32,"line_end":32,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":283},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/serial.rs","byte_start":46724,"byte_end":46725,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":76},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48145,"byte_end":48155,"line_start":37,"line_end":37,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":292},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48211,"byte_end":48212,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":96},"to":{"krate":0,"index":82}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48752,"byte_end":48762,"line_start":60,"line_end":60,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":292},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/blocking/spi.rs","byte_start":48815,"byte_end":48816,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":105},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":55756,"byte_end":55766,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":56838,"byte_end":56848,"line_start":46,"line_end":46,"column_start":6,"column_end":16},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58285,"byte_end":58287,"line_start":97,"line_end":97,"column_start":27,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":395},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/id.rs","byte_start":58402,"byte_end":58404,"line_start":104,"line_end":104,"column_start":27,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":395},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":50684,"byte_end":50689,"line_start":11,"line_end":11,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":3113},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":51953,"byte_end":51958,"line_start":52,"line_end":52,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":9752},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53464,"byte_end":53473,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/can/mod.rs","byte_start":53561,"byte_end":53570,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65129,"byte_end":65137,"line_start":25,"line_end":25,"column_start":21,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":447},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2.rs","byte_start":65301,"byte_end":65309,"line_start":34,"line_end":34,"column_start":14,"column_end":22},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":447},"to":{"krate":1,"index":3228}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":71960,"byte_end":71972,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72325,"byte_end":72337,"line_start":63,"line_end":63,"column_start":24,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v1_compat.rs","byte_start":72639,"byte_end":72651,"line_start":76,"line_end":76,"column_start":30,"column_end":42},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/digital/v2_compat.rs","byte_start":78650,"byte_end":78651,"line_start":41,"line_end":41,"column_start":27,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":212},"to":{"krate":0,"index":176}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.7/src/timer.rs","byte_start":90548,"byte_end":90557,"line_start":84,"line_end":84,"column_start":19,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":308},"to":{"krate":0,"index":314}}]}