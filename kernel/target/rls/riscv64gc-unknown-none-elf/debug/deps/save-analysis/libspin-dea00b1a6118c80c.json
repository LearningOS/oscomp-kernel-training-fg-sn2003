{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1","program":"/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","spin","/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"ticket_mutex\"","-C","metadata=dea00b1a6118c80c","-C","extra-filename=-dea00b1a6118c80c","--out-dir","/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","--target","riscv64gc-unknown-none-elf","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libspin-dea00b1a6118c80c.rmeta"},"prelude":{"crate_id":{"name":"spin","disambiguator":[13398280943536575607,0]},"crate_root":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src","external_crates":[{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16824974774548153985,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[18062996579175346233,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1534907499907218240,0]}}],"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":0,"byte_end":4135,"line_start":1,"line_end":97,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14439,"byte_end":14440,"line_start":16,"line_end":16,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":71}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14477,"byte_end":14478,"line_start":19,"line_end":19,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TicketMutex, TicketMutexGuard","parent":{"krate":0,"index":71}},{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2505,"byte_end":2512,"line_start":70,"line_end":70,"column_start":18,"column_end":25},"alias_span":null,"name":"Barrier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2528,"byte_end":2532,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"alias_span":null,"name":"Lazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":258},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2550,"byte_end":2555,"line_start":72,"line_end":72,"column_start":17,"column_end":22},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2557,"byte_end":2567,"line_start":72,"line_end":72,"column_start":24,"column_end":34},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2584,"byte_end":2588,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2608,"byte_end":2614,"line_start":74,"line_end":74,"column_start":19,"column_end":25},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2616,"byte_end":2631,"line_start":74,"line_end":74,"column_start":27,"column_end":42},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2633,"byte_end":2649,"line_start":74,"line_end":74,"column_start":44,"column_end":60},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2651,"byte_end":2672,"line_start":74,"line_end":74,"column_start":62,"column_end":83},"alias_span":null,"name":"RwLockUpgradableGuard","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":0,"byte_end":4135,"line_start":1,"line_end":97,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":28},{"krate":0,"index":71},{"krate":0,"index":311},{"krate":0,"index":379},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":559}],"decl_id":null,"docs":" This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the\n primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,\n the primitives are suitable for use in `no_std` environments.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":50,"byte_end":56,"line_start":1,"line_end":1,"column_start":51,"column_end":57}},{"value":"deny(missing_docs)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":59,"byte_end":81,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":83,"byte_end":175,"line_start":4,"line_end":4,"column_start":1,"column_end":93}},{"value":"/ primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":176,"byte_end":272,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ the primitives are suitable for use in `no_std` environments.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":273,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":343,"byte_end":357,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":358,"byte_end":361,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ - `Mutex`, `RwLock`, `Once`/`SyncOnceCell`, and `SyncLazy` equivalents","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":362,"byte_end":436,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":437,"byte_end":440,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ - Support for `no_std` environments","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":441,"byte_end":480,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":481,"byte_end":484,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ - [`lock_api`](https://crates.io/crates/lock_api) compatibility","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":485,"byte_end":552,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":553,"byte_end":556,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - Upgradeable `RwLock` guards","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":557,"byte_end":590,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":591,"byte_end":594,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ - Guards can be sent and shared between threads","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":595,"byte_end":646,"line_start":18,"line_end":18,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":647,"byte_end":650,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - Guard leaking","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":651,"byte_end":670,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":671,"byte_end":674,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Relationship with `std::sync`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":675,"byte_end":710,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":711,"byte_end":714,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ While `spin` is not a drop-in replacement for `std::sync` (and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":715,"byte_end":781,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ [should not be considered as such](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html))","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":782,"byte_end":893,"line_start":25,"line_end":25,"column_start":1,"column_end":112}},{"value":"/ an effort is made to keep this crate reasonably consistent with `std::sync`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":894,"byte_end":974,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":975,"byte_end":978,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Many of the types defined in this crate have 'additional capabilities' when compared to `std::sync`:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":979,"byte_end":1083,"line_start":28,"line_end":28,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1084,"byte_end":1087,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ - Because spinning does not depend on the thread-driven model of `std::sync`, guards ([`MutexGuard`],","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1088,"byte_end":1193,"line_start":30,"line_end":30,"column_start":1,"column_end":106}},{"value":"/   [`RwLockReadGuard`], [`RwLockWriteGuard`], etc.) may be sent and shared between threads.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1194,"byte_end":1288,"line_start":31,"line_end":31,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1289,"byte_end":1292,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - [`RwLockUpgradableGuard`] supports being upgrades into a [`RwLockWriteGuard`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1293,"byte_end":1377,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1378,"byte_end":1381,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - Guards support [leaking](https://doc.rust-lang.org/nomicon/leaking.html).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1382,"byte_end":1461,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1462,"byte_end":1465,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - [`Once`] owns the value returned by its `call_once` initializer.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1466,"byte_end":1536,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1537,"byte_end":1540,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - [`RwLock`] supports counting readers and writers.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1541,"byte_end":1596,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1597,"byte_end":1600,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Conversely, the types in this crate do not have some of the features `std::sync` has:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1601,"byte_end":1690,"line_start":41,"line_end":41,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1691,"byte_end":1694,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - Locks do not track [panic poisoning](https://doc.rust-lang.org/nomicon/poisoning.html).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1695,"byte_end":1788,"line_start":43,"line_end":43,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1789,"byte_end":1792,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ## Feature flags","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1793,"byte_end":1813,"line_start":45,"line_end":45,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1814,"byte_end":1817,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The crate comes with a few feature flags that you may wish to use.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1818,"byte_end":1888,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1889,"byte_end":1892,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - `lock_api` enabled support for [`lock_api`](https://crates.io/crates/lock_api)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1893,"byte_end":1977,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1978,"byte_end":1981,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ - `ticket_mutex` uses a ticket lock for the implementation of `Mutex`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":1982,"byte_end":2055,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2056,"byte_end":2059,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - `std` enables support for thread yielding instead of spinning","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2060,"byte_end":2127,"line_start":53,"line_end":53,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"barrier","qualname":"::barrier","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26}],"decl_id":null,"docs":" Synchronization primitive allowing multiple threads to synchronize the\n beginning of some computation.","sig":null,"attributes":[{"value":"/ Synchronization primitive allowing multiple threads to synchronize the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4137,"byte_end":4211,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/ beginning of some computation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4212,"byte_end":4246,"line_start":2,"line_end":2,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4247,"byte_end":4250,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Implementation adopted the 'Barrier' type of the standard library. See:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4251,"byte_end":4326,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ https://doc.rust-lang.org/std/sync/struct.Barrier.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4327,"byte_end":4385,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4386,"byte_end":4389,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Copyright 2014 The Rust Project Developers. See the COPYRIGHT","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4390,"byte_end":4455,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ file at the top-level directory of this distribution and at","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4456,"byte_end":4519,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/ http://rust-lang.org/COPYRIGHT.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4520,"byte_end":4555,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ ","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4556,"byte_end":4560,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4561,"byte_end":4630,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ http://www.apache.org/licenses/LICENSE-2.0> or the MIT license","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4631,"byte_end":4697,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/ <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4698,"byte_end":4762,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ option. This file may not be copied, modified, or distributed","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4763,"byte_end":4828,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ except according to those terms.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4829,"byte_end":4865,"line_start":15,"line_end":15,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5639,"byte_end":5646,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16}],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":4940,"byte_end":5008,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5009,"byte_end":5012,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5013,"byte_end":5026,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5027,"byte_end":5030,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5031,"byte_end":5038,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5039,"byte_end":5052,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5053,"byte_end":5076,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5077,"byte_end":5097,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5098,"byte_end":5101,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5102,"byte_end":5147,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5148,"byte_end":5199,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5200,"byte_end":5220,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5221,"byte_end":5253,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5254,"byte_end":5308,"line_start":34,"line_end":34,"column_start":1,"column_end":55}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5309,"byte_end":5354,"line_start":35,"line_end":35,"column_start":1,"column_end":46}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5355,"byte_end":5398,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5399,"byte_end":5435,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/         c.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5436,"byte_end":5457,"line_start":38,"line_end":38,"column_start":1,"column_end":22}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5458,"byte_end":5493,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/     }));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5494,"byte_end":5506,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5507,"byte_end":5512,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5513,"byte_end":5553,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ for handle in handles {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5554,"byte_end":5581,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5582,"byte_end":5613,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5614,"byte_end":5619,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5620,"byte_end":5627,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6166,"byte_end":6183,"line_start":72,"line_end":72,"column_start":12,"column_end":29},"name":"BarrierWaitResult","qualname":"::barrier::BarrierWaitResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]\n have rendezvoused.","sig":null,"attributes":[{"value":"/ A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5815,"byte_end":5900,"line_start":58,"line_end":58,"column_start":1,"column_end":86}},{"value":"/ have rendezvoused.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5901,"byte_end":5923,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5924,"byte_end":5927,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5928,"byte_end":5973,"line_start":61,"line_end":61,"column_start":1,"column_end":46}},{"value":"/ [`Barrier`]: struct.Barrier.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":5974,"byte_end":6010,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6011,"byte_end":6014,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6015,"byte_end":6029,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6030,"byte_end":6033,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6034,"byte_end":6041,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6042,"byte_end":6055,"line_start":67,"line_end":67,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6056,"byte_end":6059,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6060,"byte_end":6100,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6101,"byte_end":6146,"line_start":70,"line_end":70,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6147,"byte_end":6154,"line_start":71,"line_end":71,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6708,"byte_end":6711,"line_start":90,"line_end":90,"column_start":18,"column_end":21},"name":"new","qualname":"<Barrier>::new","value":"pub const fn new(usize) -> Barrier","parent":null,"children":[],"decl_id":null,"docs":" Creates a new barrier that can block a given number of threads.","sig":null,"attributes":[{"value":"/ Creates a new barrier that can block a given number of threads.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6211,"byte_end":6278,"line_start":75,"line_end":75,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6283,"byte_end":6286,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ A barrier will block `n`-1 threads which call [`wait`] and then wake up","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6291,"byte_end":6366,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ all threads at once when the `n`th thread calls [`wait`]. A Barrier created","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6371,"byte_end":6450,"line_start":78,"line_end":78,"column_start":5,"column_end":84}},{"value":"/ with n = 0 will behave identically to one created with n = 1.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6455,"byte_end":6520,"line_start":79,"line_end":79,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6525,"byte_end":6528,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: #method.wait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6533,"byte_end":6559,"line_start":81,"line_end":81,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6564,"byte_end":6567,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6572,"byte_end":6586,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6591,"byte_end":6594,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6599,"byte_end":6606,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6611,"byte_end":6624,"line_start":86,"line_end":86,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6629,"byte_end":6632,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6637,"byte_end":6678,"line_start":88,"line_end":88,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6683,"byte_end":6690,"line_start":89,"line_end":89,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8251,"byte_end":8255,"line_start":137,"line_end":137,"column_start":12,"column_end":16},"name":"wait","qualname":"<Barrier>::wait","value":"pub fn wait(&Self) -> BarrierWaitResult","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until all threads have rendezvoused here.","sig":null,"attributes":[{"value":"/ Blocks the current thread until all threads have rendezvoused here.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6922,"byte_end":6993,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6998,"byte_end":7001,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Barriers are re-usable after all threads have rendezvoused once, and can","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7006,"byte_end":7082,"line_start":102,"line_end":102,"column_start":5,"column_end":81}},{"value":"/ be used continuously.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7087,"byte_end":7112,"line_start":103,"line_end":103,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7117,"byte_end":7120,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ A single (arbitrary) thread will receive a [`BarrierWaitResult`] that","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7125,"byte_end":7198,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ returns `true` from [`is_leader`] when returning from this function, and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7203,"byte_end":7279,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/ all other threads will receive a result that will return `false` from","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7284,"byte_end":7357,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ [`is_leader`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7362,"byte_end":7380,"line_start":108,"line_end":108,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7385,"byte_end":7388,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ [`BarrierWaitResult`]: struct.BarrierWaitResult.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7393,"byte_end":7449,"line_start":110,"line_end":110,"column_start":5,"column_end":61}},{"value":"/ [`is_leader`]: struct.BarrierWaitResult.html#method.is_leader","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7454,"byte_end":7519,"line_start":111,"line_end":111,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7524,"byte_end":7527,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7532,"byte_end":7546,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7551,"byte_end":7554,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7559,"byte_end":7566,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7571,"byte_end":7584,"line_start":116,"line_end":116,"column_start":5,"column_end":18}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7589,"byte_end":7612,"line_start":117,"line_end":117,"column_start":5,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7617,"byte_end":7637,"line_start":118,"line_end":118,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7642,"byte_end":7645,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7650,"byte_end":7695,"line_start":120,"line_end":120,"column_start":5,"column_end":50}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7700,"byte_end":7751,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7756,"byte_end":7776,"line_start":122,"line_end":122,"column_start":5,"column_end":25}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7781,"byte_end":7813,"line_start":123,"line_end":123,"column_start":5,"column_end":37}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7818,"byte_end":7872,"line_start":124,"line_end":124,"column_start":5,"column_end":59}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7877,"byte_end":7922,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7927,"byte_end":7970,"line_start":126,"line_end":126,"column_start":5,"column_end":48}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":7975,"byte_end":8011,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/         c.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8016,"byte_end":8037,"line_start":128,"line_end":128,"column_start":5,"column_end":26}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8042,"byte_end":8077,"line_start":129,"line_end":129,"column_start":5,"column_end":40}},{"value":"/     }));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8082,"byte_end":8094,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8099,"byte_end":8104,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8109,"byte_end":8149,"line_start":132,"line_end":132,"column_start":5,"column_end":45}},{"value":"/ for handle in handles {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8154,"byte_end":8181,"line_start":133,"line_end":133,"column_start":5,"column_end":32}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8186,"byte_end":8217,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8222,"byte_end":8227,"line_start":135,"line_end":135,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":8232,"byte_end":8239,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9542,"byte_end":9551,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"is_leader","qualname":"<BarrierWaitResult>::is_leader","value":"pub fn is_leader(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this thread from [`wait`] is the \"leader thread\".","sig":null,"attributes":[{"value":"/ Returns whether this thread from [`wait`] is the \"leader thread\".","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9033,"byte_end":9102,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9107,"byte_end":9110,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Only one thread will have `true` returned from their result, all other","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9115,"byte_end":9189,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/ threads will have `false` returned.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9194,"byte_end":9233,"line_start":166,"line_end":166,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9238,"byte_end":9241,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9246,"byte_end":9291,"line_start":168,"line_end":168,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9296,"byte_end":9299,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9304,"byte_end":9318,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9323,"byte_end":9326,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9331,"byte_end":9338,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9343,"byte_end":9356,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9361,"byte_end":9364,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9369,"byte_end":9409,"line_start":175,"line_end":175,"column_start":5,"column_end":45}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9414,"byte_end":9459,"line_start":176,"line_end":176,"column_start":5,"column_end":50}},{"value":"/ println!(\"{:?}\", barrier_wait_result.is_leader());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9464,"byte_end":9518,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9523,"byte_end":9530,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lazy","qualname":"::lazy","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":63},{"krate":0,"index":68}],"decl_id":null,"docs":" Synchronization primitives for lazy evaluation.","sig":null,"attributes":[{"value":"/ Synchronization primitives for lazy evaluation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":10890,"byte_end":10941,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":10942,"byte_end":10945,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implementation adapted from the `SyncLazy` type of the standard library. See:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":10946,"byte_end":11027,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ https://github.com/rust-lang/rust/blob/cae8bc1f2324e31c98cb32b8ed37032fc9cef405/library/std/src/lazy.rs","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11028,"byte_end":11135,"line_start":4,"line_end":4,"column_start":1,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11997,"byte_end":12001,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11196,"byte_end":11249,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11250,"byte_end":11253,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is a thread-safe `Lazy`, and can be used in statics.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11254,"byte_end":11320,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11321,"byte_end":11324,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11325,"byte_end":11339,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11340,"byte_end":11343,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11344,"byte_end":11351,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11352,"byte_end":11386,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11387,"byte_end":11406,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11407,"byte_end":11410,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11411,"byte_end":11474,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11475,"byte_end":11508,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11509,"byte_end":11544,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11545,"byte_end":11587,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11588,"byte_end":11631,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/     m","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11632,"byte_end":11641,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11642,"byte_end":11649,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11650,"byte_end":11653,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11654,"byte_end":11669,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11670,"byte_end":11696,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11697,"byte_end":11728,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11729,"byte_end":11776,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11777,"byte_end":11804,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11805,"byte_end":11848,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11849,"byte_end":11852,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     // Prints:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11853,"byte_end":11871,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/     //   ready","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11872,"byte_end":11890,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/     //   initializing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11891,"byte_end":11916,"line_start":36,"line_end":36,"column_start":1,"column_end":26}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11917,"byte_end":11943,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11944,"byte_end":11971,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11972,"byte_end":11977,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":11978,"byte_end":11985,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12752,"byte_end":12755,"line_start":63,"line_end":63,"column_start":18,"column_end":21},"name":"new","qualname":"<Lazy<T, F>>::new","value":"pub const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12660,"byte_end":12716,"line_start":61,"line_end":61,"column_start":5,"column_end":61}},{"value":"/ function.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12721,"byte_end":12734,"line_start":62,"line_end":62,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13269,"byte_end":13274,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"name":"force","qualname":"<Lazy<T, F>>::force","value":"pub fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12891,"byte_end":12939,"line_start":69,"line_end":69,"column_start":5,"column_end":53}},{"value":"/ returns a reference to result. This is equivalent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12944,"byte_end":12997,"line_start":70,"line_end":70,"column_start":5,"column_end":58}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13002,"byte_end":13043,"line_start":71,"line_end":71,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13048,"byte_end":13051,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13056,"byte_end":13070,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13075,"byte_end":13078,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13083,"byte_end":13090,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13095,"byte_end":13114,"line_start":76,"line_end":76,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13119,"byte_end":13122,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13127,"byte_end":13159,"line_start":78,"line_end":78,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13164,"byte_end":13167,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13172,"byte_end":13212,"line_start":80,"line_end":80,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13217,"byte_end":13245,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13250,"byte_end":13257,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":71},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mutex","qualname":"::mutex","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":307}],"decl_id":null,"docs":" Locks that have the same behaviour as a mutex.","sig":null,"attributes":[{"value":"/ Locks that have the same behaviour as a mutex.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":13800,"byte_end":13850,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":13851,"byte_end":13854,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The [`Mutex`] in the root of the crate, can be configured using the `ticket_mutex` feature.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":13855,"byte_end":13950,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ If it's enabled, [`TicketMutex`] and [`TicketMutexGuard`] will be re-exported as [`Mutex`]","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":13951,"byte_end":14045,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ and [`MutexGuard`], otherwise the [`SpinMutex`] and guard will be re-exported.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14046,"byte_end":14128,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14129,"byte_end":14132,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ `ticket_mutex` is enabled by default.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14133,"byte_end":14174,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14175,"byte_end":14178,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: ../struct.Mutex.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14179,"byte_end":14214,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ [`MutexGuard`]: ../struct.MutexGuard.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14215,"byte_end":14260,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`TicketMutex`]: ./struct.TicketMutex.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14261,"byte_end":14307,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14308,"byte_end":14364,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutex`]: ./struct.SpinMutex.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14365,"byte_end":14407,"line_start":13,"line_end":13,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23694,"byte_end":23703,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"SpinMutex","qualname":"::mutex::spin::SpinMutex","value":"SpinMutex {  }","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22544,"byte_end":22648,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22649,"byte_end":22652,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22653,"byte_end":22666,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22667,"byte_end":22670,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22671,"byte_end":22678,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22679,"byte_end":22692,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22693,"byte_end":22696,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::mutex::SpinMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22697,"byte_end":22743,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22744,"byte_end":22747,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22748,"byte_end":22770,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22771,"byte_end":22792,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22793,"byte_end":22796,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22797,"byte_end":22817,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22818,"byte_end":22848,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22849,"byte_end":22875,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22876,"byte_end":22883,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22884,"byte_end":22887,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22888,"byte_end":22915,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22916,"byte_end":22919,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22920,"byte_end":22927,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22928,"byte_end":22941,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22942,"byte_end":22976,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22977,"byte_end":22980,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":22981,"byte_end":23009,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::mutex::SpinMutex::new(0));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23010,"byte_end":23072,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23073,"byte_end":23076,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23077,"byte_end":23148,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23149,"byte_end":23208,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23209,"byte_end":23212,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23213,"byte_end":23245,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23246,"byte_end":23287,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23288,"byte_end":23329,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23330,"byte_end":23366,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23367,"byte_end":23410,"line_start":41,"line_end":41,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23411,"byte_end":23435,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23436,"byte_end":23439,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23440,"byte_end":23493,"line_start":44,"line_end":44,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23494,"byte_end":23518,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23519,"byte_end":23549,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23550,"byte_end":23561,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23562,"byte_end":23567,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23568,"byte_end":23571,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23572,"byte_end":23591,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23592,"byte_end":23595,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23596,"byte_end":23636,"line_start":52,"line_end":52,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23637,"byte_end":23674,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23675,"byte_end":23682,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":98},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23904,"byte_end":23918,"line_start":63,"line_end":63,"column_start":12,"column_end":26},"name":"SpinMutexGuard","qualname":"::mutex::spin::SpinMutexGuard","value":"SpinMutexGuard {  }","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23778,"byte_end":23824,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23825,"byte_end":23828,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":23829,"byte_end":23892,"line_start":62,"line_end":62,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24568,"byte_end":24571,"line_start":89,"line_end":89,"column_start":18,"column_end":21},"name":"new","qualname":"<SpinMutex<T>>::new","value":"pub const fn new(T) -> SpinMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`SpinMutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`SpinMutex`] wrapping the supplied data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24172,"byte_end":24231,"line_start":73,"line_end":73,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24236,"byte_end":24239,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24244,"byte_end":24257,"line_start":75,"line_end":75,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24262,"byte_end":24265,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24270,"byte_end":24277,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use spin::mutex::SpinMutex;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24282,"byte_end":24313,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24318,"byte_end":24321,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: SpinMutex<()> = SpinMutex::new(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24326,"byte_end":24379,"line_start":80,"line_end":80,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24384,"byte_end":24387,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24392,"byte_end":24407,"line_start":82,"line_end":82,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24412,"byte_end":24444,"line_start":83,"line_end":83,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24449,"byte_end":24482,"line_start":84,"line_end":84,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24487,"byte_end":24506,"line_start":85,"line_end":85,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24511,"byte_end":24516,"line_start":86,"line_end":86,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24521,"byte_end":24528,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24533,"byte_end":24550,"line_start":88,"line_end":88,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24984,"byte_end":24994,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SpinMutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`SpinMutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`SpinMutex`] and unwraps the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24733,"byte_end":24797,"line_start":96,"line_end":96,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24802,"byte_end":24805,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24810,"byte_end":24823,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24828,"byte_end":24831,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24836,"byte_end":24843,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24848,"byte_end":24895,"line_start":101,"line_end":101,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24900,"byte_end":24938,"line_start":102,"line_end":102,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24943,"byte_end":24950,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24955,"byte_end":24972,"line_start":104,"line_end":104,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25591,"byte_end":25600,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<SpinMutex<T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25241,"byte_end":25290,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25295,"byte_end":25298,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25303,"byte_end":25315,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25320,"byte_end":25323,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25328,"byte_end":25437,"line_start":118,"line_end":118,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25442,"byte_end":25557,"line_start":119,"line_end":119,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25562,"byte_end":25579,"line_start":120,"line_end":120,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26238,"byte_end":26242,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"lock","qualname":"<SpinMutex<T>>::lock","value":"pub fn lock(&Self) -> SpinMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25671,"byte_end":25757,"line_start":125,"line_end":125,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25762,"byte_end":25765,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25770,"byte_end":25828,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25833,"byte_end":25900,"line_start":128,"line_end":128,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25905,"byte_end":25908,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25913,"byte_end":25920,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25925,"byte_end":25971,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25976,"byte_end":25981,"line_start":132,"line_end":132,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25986,"byte_end":26021,"line_start":133,"line_end":133,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26026,"byte_end":26088,"line_start":134,"line_end":134,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26093,"byte_end":26112,"line_start":135,"line_end":135,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26117,"byte_end":26182,"line_start":136,"line_end":136,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26187,"byte_end":26192,"line_start":137,"line_end":137,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26197,"byte_end":26204,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26209,"byte_end":26226,"line_start":139,"line_end":139,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27129,"byte_end":27141,"line_start":164,"line_end":164,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<SpinMutex<T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`SpinMutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`SpinMutex`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26805,"byte_end":26841,"line_start":156,"line_end":156,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26846,"byte_end":26849,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26854,"byte_end":26866,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26871,"byte_end":26874,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26879,"byte_end":26948,"line_start":160,"line_end":160,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":26953,"byte_end":27027,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27032,"byte_end":27088,"line_start":162,"line_end":162,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27093,"byte_end":27110,"line_start":163,"line_end":163,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27679,"byte_end":27687,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<SpinMutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<SpinMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`SpinMutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`SpinMutex`], returning a lock guard if successful.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27213,"byte_end":27286,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27291,"byte_end":27294,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27299,"byte_end":27312,"line_start":170,"line_end":170,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27317,"byte_end":27320,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27325,"byte_end":27332,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27337,"byte_end":27384,"line_start":173,"line_end":173,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27389,"byte_end":27392,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27397,"byte_end":27435,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27440,"byte_end":27475,"line_start":176,"line_end":176,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27480,"byte_end":27483,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27488,"byte_end":27548,"line_start":178,"line_end":178,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27553,"byte_end":27592,"line_start":179,"line_end":179,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27597,"byte_end":27633,"line_start":180,"line_end":180,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27638,"byte_end":27645,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":27650,"byte_end":27667,"line_start":182,"line_end":182,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28734,"byte_end":28741,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SpinMutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28178,"byte_end":28233,"line_start":196,"line_end":196,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28238,"byte_end":28241,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`SpinMutex`] mutably, and a mutable reference is guaranteed to be exclusive in","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28246,"byte_end":28357,"line_start":198,"line_end":198,"column_start":5,"column_end":116}},{"value":"/ Rust, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28362,"byte_end":28472,"line_start":199,"line_end":199,"column_start":5,"column_end":115}},{"value":"/ such, this is a 'zero-cost' operation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28477,"byte_end":28519,"line_start":200,"line_end":200,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28524,"byte_end":28527,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28532,"byte_end":28545,"line_start":202,"line_end":202,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28550,"byte_end":28553,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28558,"byte_end":28565,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::mutex::SpinMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28570,"byte_end":28620,"line_start":205,"line_end":205,"column_start":5,"column_end":55}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28625,"byte_end":28650,"line_start":206,"line_end":206,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28655,"byte_end":28688,"line_start":207,"line_end":207,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28693,"byte_end":28700,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28705,"byte_end":28722,"line_start":209,"line_end":209,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30041,"byte_end":30045,"line_start":254,"line_end":254,"column_start":12,"column_end":16},"name":"leak","qualname":"<SpinMutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29611,"byte_end":29688,"line_start":241,"line_end":241,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29693,"byte_end":29696,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`SpinMutex`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29701,"byte_end":29778,"line_start":243,"line_end":243,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29783,"byte_end":29786,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29791,"byte_end":29798,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::mutex::SpinMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29803,"byte_end":29851,"line_start":246,"line_end":246,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29856,"byte_end":29859,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::mutex::SpinMutexGuard::leak(mylock.lock());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29864,"byte_end":29938,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29943,"byte_end":29946,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29951,"byte_end":29965,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29970,"byte_end":29995,"line_start":251,"line_end":251,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30000,"byte_end":30007,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30012,"byte_end":30029,"line_start":253,"line_end":253,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":177},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37382,"byte_end":37393,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"TicketMutex","qualname":"::mutex::ticket::TicketMutex","value":"TicketMutex {  }","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"decl_id":null,"docs":" A spin-based [ticket lock](https://en.wikipedia.org/wiki/Ticket_lock) providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A spin-based [ticket lock](https://en.wikipedia.org/wiki/Ticket_lock) providing mutually exclusive access to data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":35801,"byte_end":35919,"line_start":8,"line_end":8,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":35920,"byte_end":35923,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ A ticket lock is analagous to a queue management system for lock requests. When a thread tries to take a lock, it","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":35924,"byte_end":36041,"line_start":10,"line_end":10,"column_start":1,"column_end":118}},{"value":"/ is assigned a 'ticket'. It then spins until its ticket becomes next in line. When the lock guard is released, the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36042,"byte_end":36159,"line_start":11,"line_end":11,"column_start":1,"column_end":118}},{"value":"/ next ticket will be processed.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36160,"byte_end":36194,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36195,"byte_end":36198,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Ticket locks significantly reduce the worse-case performance of locking at the cost of slightly higher average-time","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36199,"byte_end":36318,"line_start":14,"line_end":14,"column_start":1,"column_end":120}},{"value":"/ overhead.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36319,"byte_end":36332,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36333,"byte_end":36336,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36337,"byte_end":36350,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36351,"byte_end":36354,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36355,"byte_end":36362,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36363,"byte_end":36376,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36377,"byte_end":36380,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::mutex::TicketMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36381,"byte_end":36429,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36430,"byte_end":36433,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36434,"byte_end":36456,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36457,"byte_end":36478,"line_start":25,"line_end":25,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36479,"byte_end":36482,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36483,"byte_end":36503,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36504,"byte_end":36534,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36535,"byte_end":36561,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36562,"byte_end":36569,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36570,"byte_end":36573,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36574,"byte_end":36601,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36602,"byte_end":36605,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36606,"byte_end":36613,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36614,"byte_end":36627,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36628,"byte_end":36662,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36663,"byte_end":36666,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36667,"byte_end":36695,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::mutex::TicketMutex::new(0));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36696,"byte_end":36760,"line_start":39,"line_end":39,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36761,"byte_end":36764,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36765,"byte_end":36836,"line_start":41,"line_end":41,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36837,"byte_end":36896,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36897,"byte_end":36900,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36901,"byte_end":36933,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36934,"byte_end":36975,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":36976,"byte_end":37017,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37018,"byte_end":37054,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37055,"byte_end":37098,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37099,"byte_end":37123,"line_start":49,"line_end":49,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37124,"byte_end":37127,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37128,"byte_end":37181,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37182,"byte_end":37206,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37207,"byte_end":37237,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37238,"byte_end":37249,"line_start":54,"line_end":54,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37250,"byte_end":37255,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37256,"byte_end":37259,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37260,"byte_end":37279,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37280,"byte_end":37283,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37284,"byte_end":37324,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37325,"byte_end":37362,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37363,"byte_end":37370,"line_start":61,"line_end":61,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":182},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37637,"byte_end":37653,"line_start":71,"line_end":71,"column_start":12,"column_end":28},"name":"TicketMutexGuard","qualname":"::mutex::ticket::TicketMutexGuard","value":"TicketMutexGuard {  }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":" A guard that protects some data.","sig":null,"attributes":[{"value":"/ A guard that protects some data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37519,"byte_end":37555,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37556,"byte_end":37559,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ When the guard is dropped, the next ticket will be processed.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37560,"byte_end":37625,"line_start":70,"line_end":70,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38303,"byte_end":38306,"line_start":97,"line_end":97,"column_start":18,"column_end":21},"name":"new","qualname":"<TicketMutex<T>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`TicketMutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`TicketMutex`] wrapping the supplied data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37899,"byte_end":37960,"line_start":81,"line_end":81,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37965,"byte_end":37968,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37973,"byte_end":37986,"line_start":83,"line_end":83,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37991,"byte_end":37994,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37999,"byte_end":38006,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use spin::mutex::TicketMutex;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38011,"byte_end":38044,"line_start":86,"line_end":86,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38049,"byte_end":38052,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: TicketMutex<()> = TicketMutex::new(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38057,"byte_end":38114,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38119,"byte_end":38122,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38127,"byte_end":38142,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38147,"byte_end":38179,"line_start":91,"line_end":91,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38184,"byte_end":38217,"line_start":92,"line_end":92,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38222,"byte_end":38241,"line_start":93,"line_end":93,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38246,"byte_end":38251,"line_start":94,"line_end":94,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38256,"byte_end":38263,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38268,"byte_end":38285,"line_start":96,"line_end":96,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38754,"byte_end":38764,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TicketMutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`TicketMutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`TicketMutex`] and unwraps the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38499,"byte_end":38565,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38570,"byte_end":38573,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38578,"byte_end":38591,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38596,"byte_end":38599,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38604,"byte_end":38611,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38616,"byte_end":38665,"line_start":110,"line_end":110,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38670,"byte_end":38708,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38713,"byte_end":38720,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38725,"byte_end":38742,"line_start":113,"line_end":113,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39586,"byte_end":39595,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<TicketMutex<T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39236,"byte_end":39285,"line_start":131,"line_end":131,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39290,"byte_end":39293,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39298,"byte_end":39310,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39315,"byte_end":39318,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39323,"byte_end":39432,"line_start":135,"line_end":135,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39437,"byte_end":39552,"line_start":136,"line_end":136,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39557,"byte_end":39574,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40318,"byte_end":40322,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"lock","qualname":"<TicketMutex<T>>::lock","value":"pub fn lock(&Self) -> TicketMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`TicketMutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`TicketMutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39747,"byte_end":39835,"line_start":143,"line_end":143,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39840,"byte_end":39843,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39848,"byte_end":39906,"line_start":145,"line_end":145,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39911,"byte_end":39978,"line_start":146,"line_end":146,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39983,"byte_end":39986,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39991,"byte_end":39998,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40003,"byte_end":40051,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40056,"byte_end":40061,"line_start":150,"line_end":150,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40066,"byte_end":40101,"line_start":151,"line_end":151,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40106,"byte_end":40168,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40173,"byte_end":40192,"line_start":153,"line_end":153,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40197,"byte_end":40262,"line_start":154,"line_end":154,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40267,"byte_end":40272,"line_start":155,"line_end":155,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40277,"byte_end":40284,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40289,"byte_end":40306,"line_start":157,"line_end":157,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41345,"byte_end":41357,"line_start":186,"line_end":186,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<TicketMutex<T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`TicketMutex`], by serving the next ticket.","sig":null,"attributes":[{"value":"/ Force unlock this [`TicketMutex`], by serving the next ticket.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":40991,"byte_end":41057,"line_start":178,"line_end":178,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41062,"byte_end":41065,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41070,"byte_end":41082,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41087,"byte_end":41090,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41095,"byte_end":41164,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41169,"byte_end":41243,"line_start":183,"line_end":183,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41248,"byte_end":41304,"line_start":184,"line_end":184,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41309,"byte_end":41326,"line_start":185,"line_end":185,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41907,"byte_end":41915,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<TicketMutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<TicketMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`TicketMutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`TicketMutex`], returning a lock guard if successful.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41437,"byte_end":41512,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41517,"byte_end":41520,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41525,"byte_end":41538,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41543,"byte_end":41546,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41551,"byte_end":41558,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41563,"byte_end":41612,"line_start":195,"line_end":195,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41617,"byte_end":41620,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41625,"byte_end":41663,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41668,"byte_end":41703,"line_start":198,"line_end":198,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41708,"byte_end":41711,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41716,"byte_end":41776,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41781,"byte_end":41820,"line_start":201,"line_end":201,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41825,"byte_end":41861,"line_start":202,"line_end":202,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41866,"byte_end":41873,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":41878,"byte_end":41895,"line_start":204,"line_end":204,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43314,"byte_end":43321,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TicketMutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":42754,"byte_end":42809,"line_start":227,"line_end":227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":42814,"byte_end":42817,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`TicketMutex`] mutably, and a mutable reference is guaranteed to be exclusive in","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":42822,"byte_end":42935,"line_start":229,"line_end":229,"column_start":5,"column_end":118}},{"value":"/ Rust, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":42940,"byte_end":43050,"line_start":230,"line_end":230,"column_start":5,"column_end":115}},{"value":"/ such, this is a 'zero-cost' operation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43055,"byte_end":43097,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43102,"byte_end":43105,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43110,"byte_end":43123,"line_start":233,"line_end":233,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43128,"byte_end":43131,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43136,"byte_end":43143,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::mutex::TicketMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43148,"byte_end":43200,"line_start":236,"line_end":236,"column_start":5,"column_end":57}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43205,"byte_end":43230,"line_start":237,"line_end":237,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43235,"byte_end":43268,"line_start":238,"line_end":238,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43273,"byte_end":43280,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43285,"byte_end":43302,"line_start":240,"line_end":240,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44285,"byte_end":44289,"line_start":275,"line_end":275,"column_start":12,"column_end":16},"name":"leak","qualname":"<TicketMutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43849,"byte_end":43926,"line_start":262,"line_end":262,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43931,"byte_end":43934,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`TicketMutex`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43939,"byte_end":44018,"line_start":264,"line_end":264,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44023,"byte_end":44026,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44031,"byte_end":44038,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::mutex::TicketMutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44043,"byte_end":44093,"line_start":267,"line_end":267,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44098,"byte_end":44101,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::mutex::TicketMutexGuard::leak(mylock.lock());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44106,"byte_end":44182,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44187,"byte_end":44190,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44195,"byte_end":44209,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44214,"byte_end":44239,"line_start":272,"line_end":272,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44244,"byte_end":44251,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44256,"byte_end":44273,"line_start":274,"line_end":274,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":258},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16101,"byte_end":16106,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":" A spin-based lock providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A spin-based lock providing mutually exclusive access to data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14858,"byte_end":14924,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14925,"byte_end":14928,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The implementation uses either a [`TicketMutex`] or a regular [`SpinMutex`] depending on whether the `ticket_mutex`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":14929,"byte_end":15048,"line_start":38,"line_end":38,"column_start":1,"column_end":120}},{"value":"/ feature flag is enabled.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15049,"byte_end":15077,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15078,"byte_end":15081,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15082,"byte_end":15095,"line_start":41,"line_end":41,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15096,"byte_end":15099,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15100,"byte_end":15107,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15108,"byte_end":15121,"line_start":44,"line_end":44,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15122,"byte_end":15125,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15126,"byte_end":15161,"line_start":46,"line_end":46,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15162,"byte_end":15165,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15166,"byte_end":15188,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15189,"byte_end":15210,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15211,"byte_end":15214,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15215,"byte_end":15235,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15236,"byte_end":15266,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15267,"byte_end":15293,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15294,"byte_end":15301,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15302,"byte_end":15305,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15306,"byte_end":15333,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15334,"byte_end":15337,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15338,"byte_end":15345,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15346,"byte_end":15359,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15360,"byte_end":15394,"line_start":60,"line_end":60,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15395,"byte_end":15398,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15399,"byte_end":15427,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::Mutex::new(0));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15428,"byte_end":15479,"line_start":63,"line_end":63,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15480,"byte_end":15483,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15484,"byte_end":15555,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15556,"byte_end":15615,"line_start":66,"line_end":66,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15616,"byte_end":15619,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15620,"byte_end":15652,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15653,"byte_end":15694,"line_start":69,"line_end":69,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15695,"byte_end":15736,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15737,"byte_end":15773,"line_start":71,"line_end":71,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15774,"byte_end":15817,"line_start":72,"line_end":72,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15818,"byte_end":15842,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15843,"byte_end":15846,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15847,"byte_end":15900,"line_start":75,"line_end":75,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15901,"byte_end":15925,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15926,"byte_end":15956,"line_start":77,"line_end":77,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15957,"byte_end":15968,"line_start":78,"line_end":78,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15969,"byte_end":15974,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15975,"byte_end":15978,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15979,"byte_end":15998,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":15999,"byte_end":16002,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16003,"byte_end":16043,"line_start":83,"line_end":83,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16044,"byte_end":16081,"line_start":84,"line_end":84,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16082,"byte_end":16089,"line_start":85,"line_end":85,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16665,"byte_end":16675,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":268}],"decl_id":null,"docs":" A generic guard that will protect some data access and\n uses either a ticket lock or a normal spin mutex.","sig":null,"attributes":[{"value":"/ A generic guard that will protect some data access and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16357,"byte_end":16415,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ uses either a ticket lock or a normal spin mutex.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16416,"byte_end":16469,"line_start":97,"line_end":97,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16470,"byte_end":16473,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ For more info see [`TicketMutexGuard`] or [`SpinMutexGuard`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16474,"byte_end":16539,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16540,"byte_end":16543,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16544,"byte_end":16600,"line_start":101,"line_end":101,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutexGuard`]: ./struct.SpinMutexGuard.html","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16601,"byte_end":16653,"line_start":102,"line_end":102,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17246,"byte_end":17249,"line_start":127,"line_end":127,"column_start":18,"column_end":21},"name":"new","qualname":"<Mutex<T>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Mutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`Mutex`] wrapping the supplied data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16873,"byte_end":16928,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16933,"byte_end":16936,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16941,"byte_end":16954,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16959,"byte_end":16962,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16967,"byte_end":16974,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use spin::Mutex;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16979,"byte_end":16999,"line_start":116,"line_end":116,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17004,"byte_end":17007,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: Mutex<()> = Mutex::new(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17012,"byte_end":17057,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17062,"byte_end":17065,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17070,"byte_end":17085,"line_start":120,"line_end":120,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17090,"byte_end":17122,"line_start":121,"line_end":121,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17127,"byte_end":17160,"line_start":122,"line_end":122,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17165,"byte_end":17184,"line_start":123,"line_end":123,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17189,"byte_end":17194,"line_start":124,"line_end":124,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17199,"byte_end":17206,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17211,"byte_end":17228,"line_start":126,"line_end":126,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17564,"byte_end":17574,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`Mutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`Mutex`] and unwraps the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17328,"byte_end":17388,"line_start":131,"line_end":131,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17393,"byte_end":17396,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17401,"byte_end":17414,"line_start":133,"line_end":133,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17419,"byte_end":17422,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17427,"byte_end":17434,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17439,"byte_end":17475,"line_start":136,"line_end":136,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17480,"byte_end":17518,"line_start":137,"line_end":137,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17523,"byte_end":17530,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17535,"byte_end":17552,"line_start":139,"line_end":139,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18010,"byte_end":18019,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17660,"byte_end":17709,"line_start":146,"line_end":146,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17714,"byte_end":17717,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17722,"byte_end":17734,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17739,"byte_end":17742,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17747,"byte_end":17856,"line_start":150,"line_end":150,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17861,"byte_end":17976,"line_start":151,"line_end":151,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17981,"byte_end":17998,"line_start":152,"line_end":152,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18631,"byte_end":18635,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`Mutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`Mutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18079,"byte_end":18161,"line_start":157,"line_end":157,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18166,"byte_end":18169,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18174,"byte_end":18232,"line_start":159,"line_end":159,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18237,"byte_end":18304,"line_start":160,"line_end":160,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18309,"byte_end":18312,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18317,"byte_end":18324,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18329,"byte_end":18364,"line_start":163,"line_end":163,"column_start":5,"column_end":40}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18369,"byte_end":18374,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18379,"byte_end":18414,"line_start":165,"line_end":165,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18419,"byte_end":18481,"line_start":166,"line_end":166,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18486,"byte_end":18505,"line_start":167,"line_end":167,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18510,"byte_end":18575,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18580,"byte_end":18585,"line_start":169,"line_end":169,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18590,"byte_end":18597,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18602,"byte_end":18619,"line_start":171,"line_end":171,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19062,"byte_end":19074,"line_start":186,"line_end":186,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`Mutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`Mutex`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18742,"byte_end":18774,"line_start":178,"line_end":178,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18779,"byte_end":18782,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18787,"byte_end":18799,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18804,"byte_end":18807,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18812,"byte_end":18881,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18886,"byte_end":18960,"line_start":183,"line_end":183,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":18965,"byte_end":19021,"line_start":184,"line_end":184,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19026,"byte_end":19043,"line_start":185,"line_end":185,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19580,"byte_end":19588,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`Mutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`Mutex`], returning a lock guard if successful.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19129,"byte_end":19198,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19203,"byte_end":19206,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19211,"byte_end":19224,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19229,"byte_end":19232,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19237,"byte_end":19244,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19249,"byte_end":19285,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19290,"byte_end":19293,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19298,"byte_end":19336,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19341,"byte_end":19376,"line_start":198,"line_end":198,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19381,"byte_end":19384,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19389,"byte_end":19449,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19454,"byte_end":19493,"line_start":201,"line_end":201,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19498,"byte_end":19534,"line_start":202,"line_end":202,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19539,"byte_end":19546,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19551,"byte_end":19568,"line_start":204,"line_end":204,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20272,"byte_end":20279,"line_start":225,"line_end":225,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19731,"byte_end":19786,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19791,"byte_end":19794,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`Mutex`] mutably, and a mutable reference is guaranteed to be exclusive in Rust,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19799,"byte_end":19912,"line_start":213,"line_end":213,"column_start":5,"column_end":118}},{"value":"/ no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As such,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":19917,"byte_end":20027,"line_start":214,"line_end":214,"column_start":5,"column_end":115}},{"value":"/ this is a 'zero-cost' operation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20032,"byte_end":20068,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20073,"byte_end":20076,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20081,"byte_end":20094,"line_start":217,"line_end":217,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20099,"byte_end":20102,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20107,"byte_end":20114,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::Mutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20119,"byte_end":20158,"line_start":220,"line_end":220,"column_start":5,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20163,"byte_end":20188,"line_start":221,"line_end":221,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20193,"byte_end":20226,"line_start":222,"line_end":222,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20231,"byte_end":20238,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20243,"byte_end":20260,"line_start":224,"line_end":224,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21174,"byte_end":21178,"line_start":262,"line_end":262,"column_start":12,"column_end":16},"name":"leak","qualname":"<MutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20770,"byte_end":20847,"line_start":249,"line_end":249,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20852,"byte_end":20855,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`Mutex`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20860,"byte_end":20933,"line_start":251,"line_end":251,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20938,"byte_end":20941,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20946,"byte_end":20953,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::Mutex::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20958,"byte_end":20995,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21000,"byte_end":21003,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::MutexGuard::leak(mylock.lock());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21008,"byte_end":21071,"line_start":256,"line_end":256,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21076,"byte_end":21079,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21084,"byte_end":21098,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21103,"byte_end":21128,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21133,"byte_end":21140,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21145,"byte_end":21162,"line_start":261,"line_end":261,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":311},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"once","qualname":"::once","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":333},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":376}],"decl_id":null,"docs":" Synchronization primitives for one-time evaluation.\n","sig":null,"attributes":[{"value":"/ Synchronization primitives for one-time evaluation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49379,"byte_end":49434,"line_start":1,"line_end":1,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":329},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50102,"byte_end":50106,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" A primitive that provides lazy one-time initialization.","sig":null,"attributes":[{"value":"/ A primitive that provides lazy one-time initialization.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49548,"byte_end":49607,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49608,"byte_end":49611,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Unlike its `std::sync` equivalent, this is generalized such that the closure returns a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49612,"byte_end":49702,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ value to be stored by the [`Once`] (`std::sync::Once` can be trivially emulated with","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49703,"byte_end":49791,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"/ `Once<()>`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49792,"byte_end":49808,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49809,"byte_end":49812,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Because [`Once::new`] is `const`, this primitive may be used to safely initialize statics.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49813,"byte_end":49907,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49908,"byte_end":49911,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49912,"byte_end":49926,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49927,"byte_end":49930,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49931,"byte_end":49938,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49939,"byte_end":49952,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49953,"byte_end":49956,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ static START: spin::Once<()> = spin::Once::new();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":49957,"byte_end":50010,"line_start":23,"line_end":23,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50011,"byte_end":50014,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50015,"byte_end":50039,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50040,"byte_end":50074,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50075,"byte_end":50082,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50083,"byte_end":50090,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":351},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51095,"byte_end":51099,"line_start":62,"line_end":62,"column_start":15,"column_end":19},"name":"INIT","qualname":"::once::Once::<T>::INIT","value":"Self","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Initialization constant of [`Once`].\n","sig":null,"attributes":[{"value":"/ Initialization constant of [`Once`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50987,"byte_end":51027,"line_start":60,"line_end":60,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51032,"byte_end":51080,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51271,"byte_end":51274,"line_start":68,"line_end":68,"column_start":18,"column_end":21},"name":"new","qualname":"<Once<T>>::new","value":"pub const fn new() -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`Once`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51226,"byte_end":51253,"line_start":67,"line_end":67,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51377,"byte_end":51388,"line_start":73,"line_end":73,"column_start":18,"column_end":29},"name":"initialized","qualname":"<Once<T>>::initialized","value":"pub const fn initialized(T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new initialized [`Once`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":51320,"byte_end":51359,"line_start":72,"line_end":72,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53696,"byte_end":53705,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once<T>>::call_once","value":"pub fn call_once<F: FnOnce() -> T>(&Self, F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52531,"byte_end":52607,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52612,"byte_end":52687,"line_start":105,"line_end":105,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52692,"byte_end":52744,"line_start":106,"line_end":106,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52749,"byte_end":52752,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52757,"byte_end":52828,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52833,"byte_end":52866,"line_start":109,"line_end":109,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52871,"byte_end":52874,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52879,"byte_end":52952,"line_start":111,"line_end":111,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). The","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":52957,"byte_end":53025,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ returned pointer will point to the result from the closure that was","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53030,"byte_end":53101,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ run.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53106,"byte_end":53114,"line_start":114,"line_end":114,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53119,"byte_end":53122,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53127,"byte_end":53139,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53144,"byte_end":53147,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53152,"byte_end":53233,"line_start":118,"line_end":118,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53238,"byte_end":53316,"line_start":119,"line_end":119,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53321,"byte_end":53336,"line_start":120,"line_end":120,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53341,"byte_end":53344,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53349,"byte_end":53363,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53368,"byte_end":53371,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53376,"byte_end":53383,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53388,"byte_end":53401,"line_start":125,"line_end":125,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53406,"byte_end":53409,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53414,"byte_end":53469,"line_start":127,"line_end":127,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53474,"byte_end":53477,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53482,"byte_end":53516,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     *INIT.call_once(expensive_computation)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53521,"byte_end":53567,"line_start":130,"line_end":130,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53572,"byte_end":53577,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53582,"byte_end":53585,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53590,"byte_end":53631,"line_start":133,"line_end":133,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53636,"byte_end":53650,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53655,"byte_end":53662,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53667,"byte_end":53672,"line_start":136,"line_end":136,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":53677,"byte_end":53684,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55040,"byte_end":55043,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"get","qualname":"<Once<T>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value if the [`Once`] has been initialized.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":54948,"byte_end":55028,"line_start":173,"line_end":173,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55505,"byte_end":55512,"line_start":185,"line_end":185,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Once<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55220,"byte_end":55308,"line_start":181,"line_end":181,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55313,"byte_end":55316,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Because this method requires a mutable reference to the [`Once`], no synchronization","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55321,"byte_end":55409,"line_start":183,"line_end":183,"column_start":5,"column_end":93}},{"value":"/ overhead is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55414,"byte_end":55493,"line_start":184,"line_end":184,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55943,"byte_end":55957,"line_start":196,"line_end":196,"column_start":12,"column_end":26},"name":"try_into_inner","qualname":"<Once<T>>::try_into_inner","value":"pub fn try_into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55689,"byte_end":55756,"line_start":192,"line_end":192,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55761,"byte_end":55764,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Because this method requires ownershup of the [`Once`], no synchronization overhead","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55769,"byte_end":55856,"line_start":194,"line_end":194,"column_start":5,"column_end":92}},{"value":"/ is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":55861,"byte_end":55931,"line_start":195,"line_end":195,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56223,"byte_end":56235,"line_start":204,"line_end":204,"column_start":12,"column_end":24},"name":"is_completed","qualname":"<Once<T>>::is_completed","value":"pub fn is_completed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value if the [`Once`] has been initialized.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56131,"byte_end":56211,"line_start":203,"line_end":203,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56703,"byte_end":56707,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"wait","qualname":"<Once<T>>::wait","value":"pub fn wait(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Spins until the [`Once`] contains a value.","sig":null,"attributes":[{"value":"/ Spins until the [`Once`] contains a value.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56318,"byte_end":56364,"line_start":208,"line_end":208,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56369,"byte_end":56372,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function had the behaviour of [`Once::poll`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56377,"byte_end":56469,"line_start":210,"line_end":210,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56474,"byte_end":56477,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56482,"byte_end":56494,"line_start":212,"line_end":212,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56499,"byte_end":56502,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56507,"byte_end":56588,"line_start":214,"line_end":214,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56593,"byte_end":56671,"line_start":215,"line_end":215,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56676,"byte_end":56691,"line_start":216,"line_end":216,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57365,"byte_end":57369,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"poll","qualname":"<Once<T>>::poll","value":"pub fn poll(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Like [`Once::get`], but will spin if the [`Once`] is in the process of being\n initialized. If initialization has not even begun, `None` will be returned.","sig":null,"attributes":[{"value":"/ Like [`Once::get`], but will spin if the [`Once`] is in the process of being","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56881,"byte_end":56961,"line_start":226,"line_end":226,"column_start":5,"column_end":85}},{"value":"/ initialized. If initialization has not even begun, `None` will be returned.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":56966,"byte_end":57045,"line_start":227,"line_end":227,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57050,"byte_end":57053,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function was named `wait`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57058,"byte_end":57131,"line_start":229,"line_end":229,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57136,"byte_end":57139,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57144,"byte_end":57156,"line_start":231,"line_end":231,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57161,"byte_end":57164,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57169,"byte_end":57250,"line_start":233,"line_end":233,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57255,"byte_end":57333,"line_start":234,"line_end":234,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57338,"byte_end":57353,"line_start":235,"line_end":235,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":379},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rw_lock","qualname":"::rw_lock","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":416},{"krate":0,"index":421},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":448},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":467},{"krate":0,"index":471},{"krate":0,"index":479},{"krate":0,"index":483},{"krate":0,"index":487},{"krate":0,"index":493},{"krate":0,"index":497},{"krate":0,"index":501},{"krate":0,"index":506},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":528},{"krate":0,"index":532}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.\n","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62125,"byte_end":62199,"line_start":1,"line_end":1,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64765,"byte_end":64771,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rw_lock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62328,"byte_end":62402,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62403,"byte_end":62406,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This lock behaves in a similar manner to its namesake `std::sync::RwLock` but uses","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62407,"byte_end":62493,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ spinning for synchronisation instead. Unlike its namespace, this lock does not","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62494,"byte_end":62576,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/ track lock poisoning.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62577,"byte_end":62602,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62603,"byte_end":62606,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62607,"byte_end":62684,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62685,"byte_end":62764,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62765,"byte_end":62844,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62845,"byte_end":62903,"line_start":20,"line_end":20,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62904,"byte_end":62907,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62908,"byte_end":62985,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across tasks and `Sync` to","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":62986,"byte_end":63064,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63065,"byte_end":63143,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63144,"byte_end":63222,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63223,"byte_end":63272,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63273,"byte_end":63276,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ An [`RwLockUpgradableGuard`](RwLockUpgradableGuard) can be upgraded to a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63277,"byte_end":63353,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ writable guard through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade)","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63354,"byte_end":63451,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/ [`RwLockUpgradableGuard::try_upgrade`](RwLockUpgradableGuard::try_upgrade) functions.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63452,"byte_end":63541,"line_start":30,"line_end":30,"column_start":1,"column_end":90}},{"value":"/ Writable or upgradeable guards can be downgraded through their respective `downgrade`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63542,"byte_end":63631,"line_start":31,"line_end":31,"column_start":1,"column_end":90}},{"value":"/ functions.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63632,"byte_end":63646,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63647,"byte_end":63650,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Based on Facebook's","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63651,"byte_end":63674,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/ [`folly/RWSpinLock.h`](https://github.com/facebook/folly/blob/a0394d84f2d5c3e50ebfd0566f9d3acb52cfab5a/folly/synchronization/RWSpinLock.h).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63675,"byte_end":63818,"line_start":35,"line_end":35,"column_start":1,"column_end":144}},{"value":"/ This implementation is unfair to writers - if the lock always has readers, then no writers will","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63819,"byte_end":63918,"line_start":36,"line_end":36,"column_start":1,"column_end":100}},{"value":"/ ever get a chance. Using an upgradeable lock guard can *somewhat* alleviate this issue as no","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":63919,"byte_end":64015,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/ new readers are allowed when an upgradeable guard is held, but upgradeable guards can be taken","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64016,"byte_end":64114,"line_start":38,"line_end":38,"column_start":1,"column_end":99}},{"value":"/ when there are existing readers. However if the lock is that highly contended and writes are","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64115,"byte_end":64211,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ crucial then this implementation may be a poor choice.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64212,"byte_end":64270,"line_start":40,"line_end":40,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64271,"byte_end":64274,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64275,"byte_end":64289,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64290,"byte_end":64293,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64294,"byte_end":64301,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64302,"byte_end":64315,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64316,"byte_end":64319,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::RwLock::new(5);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64320,"byte_end":64356,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64357,"byte_end":64360,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64361,"byte_end":64405,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64406,"byte_end":64411,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64412,"byte_end":64441,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64442,"byte_end":64471,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64472,"byte_end":64499,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64500,"byte_end":64527,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64528,"byte_end":64573,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64574,"byte_end":64577,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64578,"byte_end":64625,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64626,"byte_end":64631,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64632,"byte_end":64665,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64666,"byte_end":64682,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64683,"byte_end":64709,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64710,"byte_end":64745,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64746,"byte_end":64753,"line_start":63,"line_end":63,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65096,"byte_end":65111,"line_start":77,"line_end":77,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rw_lock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415}],"decl_id":null,"docs":" A guard that provides immutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64924,"byte_end":64972,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64973,"byte_end":64976,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will decrement the read count,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":64977,"byte_end":65048,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/ potentially releasing the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65049,"byte_end":65084,"line_start":76,"line_end":76,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65306,"byte_end":65322,"line_start":85,"line_end":85,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rw_lock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65180,"byte_end":65226,"line_start":82,"line_end":82,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65227,"byte_end":65230,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65231,"byte_end":65294,"line_start":84,"line_end":84,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":421},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65787,"byte_end":65808,"line_start":98,"line_end":98,"column_start":12,"column_end":33},"name":"RwLockUpgradableGuard","qualname":"::rw_lock::RwLockUpgradableGuard","value":"RwLockUpgradableGuard {  }","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded\n to [`RwLockWriteGuard`].","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65395,"byte_end":65462,"line_start":90,"line_end":90,"column_start":1,"column_end":68}},{"value":"/ to [`RwLockWriteGuard`].","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65463,"byte_end":65491,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65492,"byte_end":65495,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ No writers or other upgradeable guards can exist while this is in scope. New reader","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65496,"byte_end":65583,"line_start":93,"line_end":93,"column_start":1,"column_end":88}},{"value":"/ creation is prevented (to alleviate writer starvation) but there may be existing readers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65584,"byte_end":65676,"line_start":94,"line_end":94,"column_start":1,"column_end":93}},{"value":"/ when the lock is acquired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65677,"byte_end":65707,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65708,"byte_end":65711,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65712,"byte_end":65775,"line_start":97,"line_end":97,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66446,"byte_end":66449,"line_start":124,"line_end":124,"column_start":18,"column_end":21},"name":"new","qualname":"<RwLock<T>>::new","value":"pub const fn new(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new spinlock wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new spinlock wrapping the supplied data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66057,"byte_end":66111,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66116,"byte_end":66119,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ May be used statically:","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66124,"byte_end":66151,"line_start":110,"line_end":110,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66156,"byte_end":66159,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66164,"byte_end":66171,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66176,"byte_end":66189,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66194,"byte_end":66197,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ static RW_LOCK: spin::RwLock<()> = spin::RwLock::new(());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66202,"byte_end":66263,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66268,"byte_end":66271,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66276,"byte_end":66291,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     let lock = RW_LOCK.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66296,"byte_end":66330,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/     // do something with lock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66335,"byte_end":66368,"line_start":119,"line_end":119,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66373,"byte_end":66392,"line_start":120,"line_end":120,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66397,"byte_end":66402,"line_start":121,"line_end":121,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66407,"byte_end":66414,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66419,"byte_end":66428,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66686,"byte_end":66696,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66602,"byte_end":66660,"line_start":131,"line_end":131,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66665,"byte_end":66674,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67813,"byte_end":67817,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66937,"byte_end":67011,"line_start":142,"line_end":142,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67016,"byte_end":67045,"line_start":143,"line_end":143,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67050,"byte_end":67053,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67058,"byte_end":67134,"line_start":145,"line_end":145,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67139,"byte_end":67215,"line_start":146,"line_end":146,"column_start":5,"column_end":81}},{"value":"/ this method returns. This method does not provide any guarantees with","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67220,"byte_end":67293,"line_start":147,"line_end":147,"column_start":5,"column_end":78}},{"value":"/ respect to the ordering of whether contentious readers or writers will","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67298,"byte_end":67372,"line_start":148,"line_end":148,"column_start":5,"column_end":79}},{"value":"/ acquire the lock first.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67377,"byte_end":67404,"line_start":149,"line_end":149,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67409,"byte_end":67412,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67417,"byte_end":67489,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67494,"byte_end":67517,"line_start":152,"line_end":152,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67522,"byte_end":67525,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67530,"byte_end":67537,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67542,"byte_end":67580,"line_start":155,"line_end":155,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67585,"byte_end":67590,"line_start":156,"line_end":156,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67595,"byte_end":67632,"line_start":157,"line_end":157,"column_start":5,"column_end":42}},{"value":"/     // The lock is now locked and the data can be read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67637,"byte_end":67695,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", *data);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67700,"byte_end":67730,"line_start":159,"line_end":159,"column_start":5,"column_end":35}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67735,"byte_end":67765,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67770,"byte_end":67775,"line_start":161,"line_end":161,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67780,"byte_end":67787,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":67792,"byte_end":67801,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68937,"byte_end":68945,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire this lock with shared read access.","sig":null,"attributes":[{"value":"/ Attempt to acquire this lock with shared read access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68020,"byte_end":68077,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68082,"byte_end":68085,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This function will never block and will return immediately if `read`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68090,"byte_end":68162,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ would otherwise succeed. Returns `Some` of an RAII guard which will","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68167,"byte_end":68238,"line_start":176,"line_end":176,"column_start":5,"column_end":76}},{"value":"/ release the shared access of this thread when dropped, or `None` if the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68243,"byte_end":68318,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ access could not be granted. This method does not provide any","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68323,"byte_end":68388,"line_start":178,"line_end":178,"column_start":5,"column_end":70}},{"value":"/ guarantees with respect to the ordering of whether contentious readers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68393,"byte_end":68467,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ or writers will acquire the lock first.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68472,"byte_end":68515,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68520,"byte_end":68523,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68528,"byte_end":68535,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68540,"byte_end":68578,"line_start":183,"line_end":183,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68583,"byte_end":68588,"line_start":184,"line_end":184,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_read() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68593,"byte_end":68626,"line_start":185,"line_end":185,"column_start":5,"column_end":38}},{"value":"/         Some(data) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68631,"byte_end":68658,"line_start":186,"line_end":186,"column_start":5,"column_end":32}},{"value":"/             // The lock is now locked and the data can be read","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68663,"byte_end":68729,"line_start":187,"line_end":187,"column_start":5,"column_end":71}},{"value":"/             println!(\"{}\", *data);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68734,"byte_end":68772,"line_start":188,"line_end":188,"column_start":5,"column_end":43}},{"value":"/             // The lock is dropped","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68777,"byte_end":68815,"line_start":189,"line_end":189,"column_start":5,"column_end":43}},{"value":"/         },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68820,"byte_end":68834,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68839,"byte_end":68874,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68879,"byte_end":68889,"line_start":192,"line_end":192,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68894,"byte_end":68899,"line_start":193,"line_end":193,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68904,"byte_end":68911,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":68916,"byte_end":68925,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69909,"byte_end":69921,"line_start":219,"line_end":219,"column_start":12,"column_end":24},"name":"reader_count","qualname":"<RwLock<T>>::reader_count","value":"pub fn reader_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of readers that currently hold the lock (including upgradable readers).","sig":null,"attributes":[{"value":"/ Return the number of readers that currently hold the lock (including upgradable readers).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69537,"byte_end":69630,"line_start":213,"line_end":213,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69635,"byte_end":69638,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69643,"byte_end":69655,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69660,"byte_end":69663,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69668,"byte_end":69777,"line_start":217,"line_end":217,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":69782,"byte_end":69897,"line_start":218,"line_end":218,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70523,"byte_end":70535,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"writer_count","qualname":"<RwLock<T>>::writer_count","value":"pub fn writer_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of writers that currently hold the lock.","sig":null,"attributes":[{"value":"/ Return the number of writers that currently hold the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70061,"byte_end":70123,"line_start":224,"line_end":224,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70128,"byte_end":70131,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Because [`RwLock`] guarantees exclusive mutable access, this function may only return either `0` or `1`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70136,"byte_end":70244,"line_start":226,"line_end":226,"column_start":5,"column_end":113}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70249,"byte_end":70252,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70257,"byte_end":70269,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70274,"byte_end":70277,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70282,"byte_end":70391,"line_start":230,"line_end":230,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70396,"byte_end":70511,"line_start":231,"line_end":231,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71037,"byte_end":71057,"line_start":245,"line_end":245,"column_start":19,"column_end":39},"name":"force_read_decrement","qualname":"<RwLock<T>>::force_read_decrement","value":"pub unsafe fn force_read_decrement(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force decrement the reader count.","sig":null,"attributes":[{"value":"/ Force decrement the reader count.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70627,"byte_end":70664,"line_start":236,"line_end":236,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70669,"byte_end":70672,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70677,"byte_end":70689,"line_start":238,"line_end":238,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70694,"byte_end":70697,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockReadGuard`s","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70702,"byte_end":70776,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ live, or if called more times than `read` has been called, but can be","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70781,"byte_end":70854,"line_start":241,"line_end":241,"column_start":5,"column_end":78}},{"value":"/ useful in FFI contexts where the caller doesn't know how to deal with","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70859,"byte_end":70932,"line_start":242,"line_end":242,"column_start":5,"column_end":78}},{"value":"/ RAII. The underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":70937,"byte_end":71004,"line_start":243,"line_end":243,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71009,"byte_end":71018,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71612,"byte_end":71630,"line_start":259,"line_end":259,"column_start":19,"column_end":37},"name":"force_write_unlock","qualname":"<RwLock<T>>::force_write_unlock","value":"pub unsafe fn force_write_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock exclusive write access.","sig":null,"attributes":[{"value":"/ Force unlock exclusive write access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71206,"byte_end":71246,"line_start":250,"line_end":250,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71251,"byte_end":71254,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71259,"byte_end":71271,"line_start":252,"line_end":252,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71276,"byte_end":71279,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockWriteGuard`s","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71284,"byte_end":71359,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ live, or if called when there are current readers, but can be useful in","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71364,"byte_end":71439,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/ FFI contexts where the caller doesn't know how to deal with RAII. The","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71444,"byte_end":71517,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71522,"byte_end":71579,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":71584,"byte_end":71593,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72938,"byte_end":72943,"line_start":304,"line_end":304,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Lock this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Lock this rwlock with exclusive write access, blocking the current","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72304,"byte_end":72374,"line_start":285,"line_end":285,"column_start":5,"column_end":75}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72379,"byte_end":72415,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72420,"byte_end":72423,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72428,"byte_end":72498,"line_start":288,"line_end":288,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72503,"byte_end":72541,"line_start":289,"line_end":289,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72546,"byte_end":72549,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72554,"byte_end":72627,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72632,"byte_end":72649,"line_start":292,"line_end":292,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72654,"byte_end":72657,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72662,"byte_end":72669,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72674,"byte_end":72712,"line_start":295,"line_end":295,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72717,"byte_end":72722,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.write();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72727,"byte_end":72765,"line_start":297,"line_end":297,"column_start":5,"column_end":43}},{"value":"/     // The lock is now locked and the data can be written","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72770,"byte_end":72831,"line_start":298,"line_end":298,"column_start":5,"column_end":66}},{"value":"/     *data += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72836,"byte_end":72855,"line_start":299,"line_end":299,"column_start":5,"column_end":24}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72860,"byte_end":72890,"line_start":300,"line_end":300,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72895,"byte_end":72900,"line_start":301,"line_end":301,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72905,"byte_end":72912,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":72917,"byte_end":72926,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73831,"byte_end":73840,"line_start":333,"line_end":333,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempt to lock this rwlock with exclusive write access.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73162,"byte_end":73222,"line_start":313,"line_end":313,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73227,"byte_end":73230,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This function does not ever block, and it will return `None` if a call","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73235,"byte_end":73309,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/ to `write` would otherwise block. If successful, an RAII guard is","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73314,"byte_end":73383,"line_start":316,"line_end":316,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73388,"byte_end":73401,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73406,"byte_end":73409,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73414,"byte_end":73421,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73426,"byte_end":73464,"line_start":320,"line_end":320,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73469,"byte_end":73474,"line_start":321,"line_end":321,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_write() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73479,"byte_end":73513,"line_start":322,"line_end":322,"column_start":5,"column_end":39}},{"value":"/         Some(mut data) => {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73518,"byte_end":73549,"line_start":323,"line_end":323,"column_start":5,"column_end":36}},{"value":"/             // The lock is now locked and the data can be written","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73554,"byte_end":73623,"line_start":324,"line_end":324,"column_start":5,"column_end":74}},{"value":"/             *data += 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73628,"byte_end":73655,"line_start":325,"line_end":325,"column_start":5,"column_end":32}},{"value":"/             // The lock is implicitly dropped","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73660,"byte_end":73709,"line_start":326,"line_end":326,"column_start":5,"column_end":54}},{"value":"/         },","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73714,"byte_end":73728,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73733,"byte_end":73768,"line_start":328,"line_end":328,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73773,"byte_end":73783,"line_start":329,"line_end":329,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73788,"byte_end":73793,"line_start":330,"line_end":330,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73798,"byte_end":73805,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73810,"byte_end":73819,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74157,"byte_end":74173,"line_start":340,"line_end":340,"column_start":12,"column_end":28},"name":"upgradeable_read","qualname":"<RwLock<T>>::upgradeable_read","value":"pub fn upgradeable_read(&Self) -> RwLockUpgradableGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a readable lock guard that can later be upgraded to a writable lock guard.\n Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.\n","sig":null,"attributes":[{"value":"/ Obtain a readable lock guard that can later be upgraded to a writable lock guard.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":73930,"byte_end":74015,"line_start":337,"line_end":337,"column_start":5,"column_end":90}},{"value":"/ Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74020,"byte_end":74131,"line_start":338,"line_end":338,"column_start":5,"column_end":116}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74136,"byte_end":74145,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74466,"byte_end":74486,"line_start":351,"line_end":351,"column_start":12,"column_end":32},"name":"try_upgradeable_read","qualname":"<RwLock<T>>::try_upgradeable_read","value":"pub fn try_upgradeable_read(&Self) -> Option<RwLockUpgradableGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain an upgradeable lock guard.\n","sig":null,"attributes":[{"value":"/ Tries to obtain an upgradeable lock guard.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74394,"byte_end":74440,"line_start":349,"line_end":349,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74445,"byte_end":74454,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75374,"byte_end":75381,"line_start":376,"line_end":376,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":74978,"byte_end":75033,"line_start":364,"line_end":364,"column_start":4,"column_end":59}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75037,"byte_end":75040,"line_start":365,"line_end":365,"column_start":4,"column_end":7}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75044,"byte_end":75120,"line_start":366,"line_end":366,"column_start":4,"column_end":80}},{"value":"/ take place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75124,"byte_end":75198,"line_start":367,"line_end":367,"column_start":4,"column_end":78}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75202,"byte_end":75205,"line_start":368,"line_end":368,"column_start":4,"column_end":7}},{"value":"/ # Examples","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75209,"byte_end":75223,"line_start":369,"line_end":369,"column_start":4,"column_end":18}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75227,"byte_end":75230,"line_start":370,"line_end":370,"column_start":4,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75234,"byte_end":75241,"line_start":371,"line_end":371,"column_start":4,"column_end":11}},{"value":"/ let mut lock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75245,"byte_end":75285,"line_start":372,"line_end":372,"column_start":4,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75289,"byte_end":75314,"line_start":373,"line_end":373,"column_start":4,"column_end":29}},{"value":"/ assert_eq!(*lock.read(), 10);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75318,"byte_end":75351,"line_start":374,"line_end":374,"column_start":4,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75355,"byte_end":75362,"line_start":375,"line_end":375,"column_start":4,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76638,"byte_end":76642,"line_start":419,"line_end":419,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockReadGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76246,"byte_end":76315,"line_start":407,"line_end":407,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76320,"byte_end":76323,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock for all but reading locks.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76328,"byte_end":76422,"line_start":409,"line_end":409,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76427,"byte_end":76430,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76435,"byte_end":76442,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76447,"byte_end":76485,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76490,"byte_end":76493,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockReadGuard::leak(mylock.read());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76498,"byte_end":76562,"line_start":414,"line_end":414,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76567,"byte_end":76570,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76575,"byte_end":76600,"line_start":416,"line_end":416,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76605,"byte_end":76612,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76617,"byte_end":76626,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78211,"byte_end":78218,"line_start":474,"line_end":474,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Upgrades an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Upgrades an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77905,"byte_end":77969,"line_start":465,"line_end":465,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77974,"byte_end":77977,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77982,"byte_end":77989,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77994,"byte_end":78032,"line_start":468,"line_end":468,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78037,"byte_end":78040,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78045,"byte_end":78127,"line_start":470,"line_end":470,"column_start":5,"column_end":87}},{"value":"/ let writable = upgradeable.upgrade();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78132,"byte_end":78173,"line_start":471,"line_end":471,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78178,"byte_end":78185,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78190,"byte_end":78199,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78942,"byte_end":78953,"line_start":497,"line_end":497,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to upgrade an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Tries to upgrade an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78475,"byte_end":78547,"line_start":485,"line_end":485,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78552,"byte_end":78555,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78560,"byte_end":78567,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78572,"byte_end":78610,"line_start":488,"line_end":488,"column_start":5,"column_end":43}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78615,"byte_end":78697,"line_start":489,"line_end":489,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78702,"byte_end":78705,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ match upgradeable.try_upgrade() {","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78710,"byte_end":78747,"line_start":491,"line_end":491,"column_start":5,"column_end":42}},{"value":"/     Ok(writable) => /* upgrade successful - use writable lock guard */ (),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78752,"byte_end":78830,"line_start":492,"line_end":492,"column_start":5,"column_end":83}},{"value":"/     Err(upgradeable) => /* upgrade unsuccessful */ (),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78835,"byte_end":78893,"line_start":493,"line_end":493,"column_start":5,"column_end":63}},{"value":"/ };","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78898,"byte_end":78904,"line_start":494,"line_end":494,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78909,"byte_end":78916,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":78921,"byte_end":78930,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79592,"byte_end":79601,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79059,"byte_end":79068,"line_start":501,"line_end":501,"column_start":5,"column_end":14}},{"value":"/ Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79073,"byte_end":79191,"line_start":502,"line_end":502,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79196,"byte_end":79199,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79204,"byte_end":79211,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79216,"byte_end":79254,"line_start":505,"line_end":505,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79259,"byte_end":79262,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79267,"byte_end":79315,"line_start":507,"line_end":507,"column_start":5,"column_end":53}},{"value":"/ assert!(mylock.try_read().is_none());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79320,"byte_end":79361,"line_start":508,"line_end":508,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*upgradeable, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79366,"byte_end":79398,"line_start":509,"line_end":509,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79403,"byte_end":79406,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let readable = upgradeable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79411,"byte_end":79488,"line_start":511,"line_end":511,"column_start":5,"column_end":82}},{"value":"/ assert!(mylock.try_read().is_some());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79493,"byte_end":79534,"line_start":512,"line_end":512,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79539,"byte_end":79568,"line_start":513,"line_end":513,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79573,"byte_end":79580,"line_start":514,"line_end":514,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80360,"byte_end":80364,"line_start":542,"line_end":542,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockUpgradableGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":79976,"byte_end":80045,"line_start":530,"line_end":530,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80050,"byte_end":80053,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80058,"byte_end":80126,"line_start":532,"line_end":532,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80131,"byte_end":80134,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80139,"byte_end":80146,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80151,"byte_end":80189,"line_start":535,"line_end":535,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80194,"byte_end":80197,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockUpgradableGuard::leak(mylock.upgradeable_read());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80202,"byte_end":80284,"line_start":537,"line_end":537,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80289,"byte_end":80292,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80297,"byte_end":80322,"line_start":539,"line_end":539,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80327,"byte_end":80334,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80339,"byte_end":80348,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81371,"byte_end":81380,"line_start":574,"line_end":574,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80905,"byte_end":81020,"line_start":561,"line_end":561,"column_start":5,"column_end":120}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81025,"byte_end":81028,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81033,"byte_end":81040,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81045,"byte_end":81083,"line_start":564,"line_end":564,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81088,"byte_end":81091,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81096,"byte_end":81134,"line_start":566,"line_end":566,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81139,"byte_end":81157,"line_start":567,"line_end":567,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81162,"byte_end":81165,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81170,"byte_end":81244,"line_start":569,"line_end":569,"column_start":5,"column_end":79}},{"value":"/ # let readable_2 = mylock.try_read().unwrap();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81249,"byte_end":81299,"line_start":570,"line_end":570,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81304,"byte_end":81333,"line_start":571,"line_end":571,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81338,"byte_end":81345,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81350,"byte_end":81359,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82184,"byte_end":82208,"line_start":601,"line_end":601,"column_start":12,"column_end":36},"name":"downgrade_to_upgradeable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradeable","value":"pub fn downgrade_to_upgradeable(Self) -> RwLockUpgradableGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81755,"byte_end":81873,"line_start":589,"line_end":589,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81878,"byte_end":81881,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81886,"byte_end":81893,"line_start":591,"line_end":591,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81898,"byte_end":81936,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81941,"byte_end":81944,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81949,"byte_end":81987,"line_start":594,"line_end":594,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":81992,"byte_end":82010,"line_start":595,"line_end":595,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82015,"byte_end":82018,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade_to_upgradeable(); // This is guaranteed not to spin","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82023,"byte_end":82112,"line_start":597,"line_end":597,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82117,"byte_end":82146,"line_start":598,"line_end":598,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82151,"byte_end":82158,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82163,"byte_end":82172,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83092,"byte_end":83096,"line_start":631,"line_end":631,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockWriteGuard>::leak","value":"pub fn leak(Self) -> &'rwlock mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82693,"byte_end":82770,"line_start":618,"line_end":618,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82775,"byte_end":82778,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82783,"byte_end":82851,"line_start":620,"line_end":620,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82856,"byte_end":82859,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82864,"byte_end":82871,"line_start":622,"line_end":622,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82876,"byte_end":82914,"line_start":623,"line_end":623,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82919,"byte_end":82922,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::RwLockWriteGuard::leak(mylock.write());","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":82927,"byte_end":82997,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83002,"byte_end":83005,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83010,"byte_end":83024,"line_start":627,"line_end":627,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83029,"byte_end":83054,"line_start":628,"line_end":628,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83059,"byte_end":83066,"line_start":629,"line_end":629,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83071,"byte_end":83080,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6197,"byte_end":6204,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9009,"byte_end":9026,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12109,"byte_end":12113,"line_start":46,"line_end":46,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12562,"byte_end":12566,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12643,"byte_end":12647,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12874,"byte_end":12878,"line_start":68,"line_end":68,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13516,"byte_end":13520,"line_start":91,"line_end":91,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13642,"byte_end":13646,"line_start":98,"line_end":98,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24073,"byte_end":24082,"line_start":69,"line_end":69,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24128,"byte_end":24137,"line_start":70,"line_end":70,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24153,"byte_end":24162,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25222,"byte_end":25231,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28990,"byte_end":28999,"line_start":217,"line_end":217,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29362,"byte_end":29371,"line_start":228,"line_end":228,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29484,"byte_end":29493,"line_start":234,"line_end":234,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29583,"byte_end":29597,"line_start":240,"line_end":240,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30297,"byte_end":30311,"line_start":261,"line_end":261,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30477,"byte_end":30491,"line_start":267,"line_end":267,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30637,"byte_end":30651,"line_start":273,"line_end":273,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30770,"byte_end":30784,"line_start":280,"line_end":280,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30890,"byte_end":30904,"line_start":286,"line_end":286,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37794,"byte_end":37805,"line_start":77,"line_end":77,"column_start":40,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37851,"byte_end":37862,"line_start":78,"line_end":78,"column_start":40,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37878,"byte_end":37889,"line_start":80,"line_end":80,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38863,"byte_end":38874,"line_start":119,"line_end":119,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39215,"byte_end":39226,"line_start":130,"line_end":130,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43588,"byte_end":43599,"line_start":249,"line_end":249,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43716,"byte_end":43727,"line_start":255,"line_end":255,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43819,"byte_end":43835,"line_start":261,"line_end":261,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44542,"byte_end":44558,"line_start":282,"line_end":282,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44724,"byte_end":44740,"line_start":288,"line_end":288,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44886,"byte_end":44902,"line_start":294,"line_end":294,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":45022,"byte_end":45038,"line_start":301,"line_end":301,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":45145,"byte_end":45161,"line_start":307,"line_end":307,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16293,"byte_end":16298,"line_start":93,"line_end":93,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16344,"byte_end":16349,"line_start":94,"line_end":94,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16858,"byte_end":16863,"line_start":110,"line_end":110,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17645,"byte_end":17650,"line_start":145,"line_end":145,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20385,"byte_end":20390,"line_start":230,"line_end":230,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20542,"byte_end":20547,"line_start":236,"line_end":236,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20651,"byte_end":20656,"line_start":242,"line_end":242,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20746,"byte_end":20756,"line_start":248,"line_end":248,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21305,"byte_end":21315,"line_start":267,"line_end":267,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21481,"byte_end":21491,"line_start":273,"line_end":273,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21637,"byte_end":21647,"line_start":279,"line_end":279,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21769,"byte_end":21779,"line_start":286,"line_end":286,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50212,"byte_end":50216,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50636,"byte_end":50640,"line_start":47,"line_end":47,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50677,"byte_end":50681,"line_start":48,"line_end":48,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50973,"byte_end":50977,"line_start":59,"line_end":59,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57807,"byte_end":57811,"line_start":249,"line_end":249,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57906,"byte_end":57910,"line_start":255,"line_end":255,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":58292,"byte_end":58298,"line_start":271,"line_end":271,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65960,"byte_end":65966,"line_start":104,"line_end":104,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66019,"byte_end":66025,"line_start":105,"line_end":105,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66041,"byte_end":66047,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66921,"byte_end":66927,"line_start":141,"line_end":141,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75629,"byte_end":75635,"line_start":383,"line_end":383,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76000,"byte_end":76006,"line_start":394,"line_end":394,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76111,"byte_end":76117,"line_start":400,"line_end":400,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76212,"byte_end":76227,"line_start":406,"line_end":406,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76784,"byte_end":76799,"line_start":425,"line_end":425,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76975,"byte_end":76990,"line_start":431,"line_end":431,"column_start":58,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77136,"byte_end":77157,"line_start":437,"line_end":437,"column_start":26,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80506,"byte_end":80527,"line_start":548,"line_end":548,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80703,"byte_end":80724,"line_start":554,"line_end":554,"column_start":58,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80870,"byte_end":80886,"line_start":560,"line_end":560,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83358,"byte_end":83374,"line_start":638,"line_end":638,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83550,"byte_end":83566,"line_start":644,"line_end":644,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83722,"byte_end":83737,"line_start":650,"line_end":650,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83864,"byte_end":83885,"line_start":658,"line_end":658,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84012,"byte_end":84028,"line_start":666,"line_end":666,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84158,"byte_end":84174,"line_start":674,"line_end":674,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84290,"byte_end":84305,"line_start":680,"line_end":680,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84541,"byte_end":84562,"line_start":687,"line_end":687,"column_start":35,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84841,"byte_end":84857,"line_start":697,"line_end":697,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2418,"byte_end":2425,"line_start":64,"line_end":64,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2435,"byte_end":2439,"line_start":65,"line_end":65,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2449,"byte_end":2454,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":71}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2464,"byte_end":2468,"line_start":67,"line_end":67,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":311}},{"kind":"Mod","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lib.rs","byte_start":2478,"byte_end":2485,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":379}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":6197,"byte_end":6204,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":14},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/barrier.rs","byte_start":9009,"byte_end":9026,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12109,"byte_end":12113,"line_start":46,"line_end":46,"column_start":39,"column_end":43},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12562,"byte_end":12566,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12643,"byte_end":12647,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":12874,"byte_end":12878,"line_start":68,"line_end":68,"column_start":27,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13516,"byte_end":13520,"line_start":91,"line_end":91,"column_start":37,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/lazy.rs","byte_start":13642,"byte_end":13646,"line_start":98,"line_end":98,"column_start":30,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24073,"byte_end":24082,"line_start":69,"line_end":69,"column_start":40,"column_end":49},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24128,"byte_end":24137,"line_start":70,"line_end":70,"column_start":40,"column_end":49},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":24153,"byte_end":24162,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":25222,"byte_end":25231,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":28990,"byte_end":28999,"line_start":217,"line_end":217,"column_start":45,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29362,"byte_end":29371,"line_start":228,"line_end":228,"column_start":39,"column_end":48},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29484,"byte_end":29493,"line_start":234,"line_end":234,"column_start":21,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":29583,"byte_end":29597,"line_start":240,"line_end":240,"column_start":21,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30297,"byte_end":30311,"line_start":261,"line_end":261,"column_start":49,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30477,"byte_end":30491,"line_start":267,"line_end":267,"column_start":53,"column_end":67},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30637,"byte_end":30651,"line_start":273,"line_end":273,"column_start":31,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30770,"byte_end":30784,"line_start":280,"line_end":280,"column_start":34,"column_end":48},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/spin.rs","byte_start":30890,"byte_end":30904,"line_start":286,"line_end":286,"column_start":30,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37794,"byte_end":37805,"line_start":77,"line_end":77,"column_start":40,"column_end":51},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37851,"byte_end":37862,"line_start":78,"line_end":78,"column_start":40,"column_end":51},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":37878,"byte_end":37889,"line_start":80,"line_end":80,"column_start":9,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":38863,"byte_end":38874,"line_start":119,"line_end":119,"column_start":45,"column_end":56},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":39215,"byte_end":39226,"line_start":130,"line_end":130,"column_start":17,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43588,"byte_end":43599,"line_start":249,"line_end":249,"column_start":39,"column_end":50},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43716,"byte_end":43727,"line_start":255,"line_end":255,"column_start":21,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":177},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":43819,"byte_end":43835,"line_start":261,"line_end":261,"column_start":21,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44542,"byte_end":44558,"line_start":282,"line_end":282,"column_start":49,"column_end":65},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44724,"byte_end":44740,"line_start":288,"line_end":288,"column_start":53,"column_end":69},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":44886,"byte_end":44902,"line_start":294,"line_end":294,"column_start":31,"column_end":47},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":45022,"byte_end":45038,"line_start":301,"line_end":301,"column_start":34,"column_end":50},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex/ticket.rs","byte_start":45145,"byte_end":45161,"line_start":307,"line_end":307,"column_start":30,"column_end":46},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":182},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16293,"byte_end":16298,"line_start":93,"line_end":93,"column_start":40,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":258},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16344,"byte_end":16349,"line_start":94,"line_end":94,"column_start":40,"column_end":45},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":258},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":16858,"byte_end":16863,"line_start":110,"line_end":110,"column_start":9,"column_end":14},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":17645,"byte_end":17650,"line_start":145,"line_end":145,"column_start":17,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20385,"byte_end":20390,"line_start":230,"line_end":230,"column_start":45,"column_end":50},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":258},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20542,"byte_end":20547,"line_start":236,"line_end":236,"column_start":39,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":258},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20651,"byte_end":20656,"line_start":242,"line_end":242,"column_start":21,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":258},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":20746,"byte_end":20756,"line_start":248,"line_end":248,"column_start":21,"column_end":31},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21305,"byte_end":21315,"line_start":267,"line_end":267,"column_start":49,"column_end":59},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21481,"byte_end":21491,"line_start":273,"line_end":273,"column_start":53,"column_end":63},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21637,"byte_end":21647,"line_start":279,"line_end":279,"column_start":31,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/mutex.rs","byte_start":21769,"byte_end":21779,"line_start":286,"line_end":286,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50212,"byte_end":50216,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50636,"byte_end":50640,"line_start":47,"line_end":47,"column_start":38,"column_end":42},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50677,"byte_end":50681,"line_start":48,"line_end":48,"column_start":31,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":50973,"byte_end":50977,"line_start":59,"line_end":59,"column_start":9,"column_end":13},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57807,"byte_end":57811,"line_start":249,"line_end":249,"column_start":21,"column_end":25},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":57906,"byte_end":57910,"line_start":255,"line_end":255,"column_start":18,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/once.rs","byte_start":58292,"byte_end":58298,"line_start":271,"line_end":271,"column_start":19,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":65960,"byte_end":65966,"line_start":104,"line_end":104,"column_start":40,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66019,"byte_end":66025,"line_start":105,"line_end":105,"column_start":47,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66041,"byte_end":66047,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":66921,"byte_end":66927,"line_start":141,"line_end":141,"column_start":17,"column_end":23},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":75629,"byte_end":75635,"line_start":383,"line_end":383,"column_start":45,"column_end":51},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76000,"byte_end":76006,"line_start":394,"line_end":394,"column_start":39,"column_end":45},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76111,"byte_end":76117,"line_start":400,"line_end":400,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76212,"byte_end":76227,"line_start":406,"line_end":406,"column_start":26,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76784,"byte_end":76799,"line_start":425,"line_end":425,"column_start":54,"column_end":69},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":76975,"byte_end":76990,"line_start":431,"line_end":431,"column_start":58,"column_end":73},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":77136,"byte_end":77157,"line_start":437,"line_end":437,"column_start":26,"column_end":47},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80506,"byte_end":80527,"line_start":548,"line_end":548,"column_start":54,"column_end":75},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80703,"byte_end":80724,"line_start":554,"line_end":554,"column_start":58,"column_end":79},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":80870,"byte_end":80886,"line_start":560,"line_end":560,"column_start":26,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83358,"byte_end":83374,"line_start":638,"line_end":638,"column_start":54,"column_end":70},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83550,"byte_end":83566,"line_start":644,"line_end":644,"column_start":58,"column_end":74},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":9759}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83722,"byte_end":83737,"line_start":650,"line_end":650,"column_start":36,"column_end":51},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":83864,"byte_end":83885,"line_start":658,"line_end":658,"column_start":36,"column_end":57},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84012,"byte_end":84028,"line_start":666,"line_end":666,"column_start":36,"column_end":52},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84158,"byte_end":84174,"line_start":674,"line_end":674,"column_start":39,"column_end":55},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84290,"byte_end":84305,"line_start":680,"line_end":680,"column_start":35,"column_end":50},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84541,"byte_end":84562,"line_start":687,"line_end":687,"column_start":35,"column_end":56},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.7.1/src/rw_lock.rs","byte_start":84841,"byte_end":84857,"line_start":697,"line_end":697,"column_start":35,"column_end":51},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":3351}}]}