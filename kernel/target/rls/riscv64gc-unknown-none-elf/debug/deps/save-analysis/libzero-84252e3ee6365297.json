{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2","program":"/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zero","/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=84252e3ee6365297","-C","extra-filename=-84252e3ee6365297","--out-dir","/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","--target","riscv64gc-unknown-none-elf","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps","-L","dependency=/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/stellaris/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/stellaris/operation_system/oskernel2022-oops/kernel/target/rls/riscv64gc-unknown-none-elf/debug/deps/libzero-84252e3ee6365297.rmeta"},"prelude":{"crate_id":{"name":"zero","disambiguator":[2939351395458323435,0]},"crate_root":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src","external_crates":[{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16824974774548153985,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[18062996579175346233,0]}},{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1534907499907218240,0]}}],"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":340,"byte_end":9941,"line_start":9,"line_end":311,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":340,"byte_end":9941,"line_start":9,"line_end":311,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":44},{"krate":0,"index":49}],"decl_id":null,"docs":" Functions for reading binary data into Rust data structures. All functions\n are zero-allocation.","sig":null,"attributes":[{"value":"/ Functions for reading binary data into Rust data structures. All functions","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":340,"byte_end":418,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ are zero-allocation.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":419,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":444,"byte_end":447,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ There are functions for reading a single value, an array of values, a single","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":448,"byte_end":528,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ null-terminated utf8 string (which should also work with ascii strings), and","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":529,"byte_end":609,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ an array of null-terminated strings terminated by another null byte.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":610,"byte_end":682,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":683,"byte_end":686,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Functions preserve the lifetime of the underlying data. These functions are","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":687,"byte_end":766,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ memory safe, although this is in part based on the assumption that the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":767,"byte_end":841,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ client only implements the unsafe trait `Pod` where safe to do so.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":842,"byte_end":912,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":913,"byte_end":916,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Functions assert that the provided data is large enough. The string","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":917,"byte_end":988,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ functions check that strings are valid utf8. There is no checking that the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":989,"byte_end":1067,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ the privided input will produce a valid object (for example, an enum has a","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1068,"byte_end":1146,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ valid discriminant). The user must assert this by implementing the trait","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1147,"byte_end":1223,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ `Pod`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1224,"byte_end":1234,"line_start":24,"line_end":24,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1235,"byte_end":1238,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ There are also unsafe versions of most functions which do not require the","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1239,"byte_end":1316,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ return type to implement `Pod` and which do no checking.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1317,"byte_end":1377,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"no_std","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1379,"byte_end":1389,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1583,"byte_end":1587,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"read","qualname":"::read","value":"pub fn read<'a, T: Pod>(&'a [u8]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Reads a single `T` from `input`.","sig":null,"attributes":[{"value":"/ Reads a single `T` from `input`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1489,"byte_end":1525,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1526,"byte_end":1529,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ `input` must be at least as large as `T`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1530,"byte_end":1575,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1910,"byte_end":1920,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"read_array","qualname":"::read_array","value":"pub fn read_array<'a, T: Pod>(&'a [u8]) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Read an array of `T`s from input.","sig":null,"attributes":[{"value":"/ Read an array of `T`s from input.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1731,"byte_end":1768,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1769,"byte_end":1772,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ `input` must contain an exact number of `T`s, there must be no extra bytes","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1773,"byte_end":1851,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ after the last `T`. `T` may not be zero-sized.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":1852,"byte_end":1902,"line_start":49,"line_end":49,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2310,"byte_end":2318,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"read_str","qualname":"::read_str","value":"pub fn read_str<'a>(&'a [u8]) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Read a string from `input`. The string must be a null-termianted utf8 string.\n Note that an ascii C string fulfils this requirement.\n","sig":null,"attributes":[{"value":"/ Read a string from `input`. The string must be a null-termianted utf8 string.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2163,"byte_end":2244,"line_start":60,"line_end":60,"column_start":1,"column_end":82}},{"value":"/ Note that an ascii C string fulfils this requirement.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2245,"byte_end":2302,"line_start":61,"line_end":61,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2652,"byte_end":2669,"line_start":69,"line_end":69,"column_start":8,"column_end":25},"name":"read_strs_to_null","qualname":"::read_strs_to_null","value":"pub fn read_strs_to_null<'a>(&'a [u8]) -> StrReaderIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which will return a sequence of strings from `input`.\n Each string must be a null-terminated utf8 string. The sequence of strings\n is terminated either by a second null byte, or the end of input.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which will return a sequence of strings from `input`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2419,"byte_end":2496,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ Each string must be a null-terminated utf8 string. The sequence of strings","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2497,"byte_end":2575,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ is terminated either by a second null byte, or the end of input.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2576,"byte_end":2644,"line_start":68,"line_end":68,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3972,"byte_end":3975,"line_start":94,"line_end":94,"column_start":18,"column_end":21},"name":"Pod","qualname":"::Pod","value":"Pod: Sized","parent":null,"children":[],"decl_id":null,"docs":" Implementing this trait means that the concrete type is plain old data (POD).\n Precisely, by implementing `Pod` the programmer asserts that it is safe to\n read the type from binary slices provided to `read`, etc.","sig":null,"attributes":[{"value":"/ Implementing this trait means that the concrete type is plain old data (POD).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2772,"byte_end":2853,"line_start":75,"line_end":75,"column_start":1,"column_end":82}},{"value":"/ Precisely, by implementing `Pod` the programmer asserts that it is safe to","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2854,"byte_end":2932,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ read the type from binary slices provided to `read`, etc.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2933,"byte_end":2994,"line_start":77,"line_end":77,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2995,"byte_end":2998,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Some guidelines for when `Pod` may be implemented (note that whether `Pod`","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":2999,"byte_end":3077,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ should be implemented or not is a function of both the type and the input","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3078,"byte_end":3155,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ data. I.e., just because a type is `Pod` in one context does not mean it","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3156,"byte_end":3232,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ should be in another):","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3233,"byte_end":3259,"line_start":82,"line_end":82,"column_start":1,"column_end":27}},{"value":"/ * primitive numeric types (`u8`, `i64`, `f32`, etc.) are fine,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3260,"byte_end":3326,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/ * bools are fine, if the provided data ensures they may have only the values","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3327,"byte_end":3407,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/   `0` or `1` (note that this is a stricter requirement that C),","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3408,"byte_end":3475,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/ * structs containing only `Pod` data are fine,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3476,"byte_end":3526,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"/ * structs must be `repr(C)` or `repr(packed)`, if the former, the supplied","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3527,"byte_end":3605,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/   data must have the correct alignment,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3606,"byte_end":3649,"line_start":88,"line_end":88,"column_start":1,"column_end":44}},{"value":"/ * enums must have valid discriminants in the supplied data, this is probably","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3650,"byte_end":3730,"line_start":89,"line_end":89,"column_start":1,"column_end":81}},{"value":"/   only feasible if they have a specified representation,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3731,"byte_end":3791,"line_start":90,"line_end":90,"column_start":1,"column_end":61}},{"value":"/ * there must not be invalid enum variants in the data,","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3792,"byte_end":3850,"line_start":91,"line_end":91,"column_start":1,"column_end":59}},{"value":"/ * any kind of pointer is probably a bad idea. Theoretically one could make","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3851,"byte_end":3929,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/   raw pointers work.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3930,"byte_end":3954,"line_start":93,"line_end":93,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4261,"byte_end":4272,"line_start":106,"line_end":106,"column_start":15,"column_end":26},"name":"read_unsafe","qualname":"::read_unsafe","value":"pub unsafe fn read_unsafe<'a, T: Sized>(&'a [u8]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Reads a `T` from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads a `T` from `input` with no checks.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4202,"byte_end":4246,"line_start":105,"line_end":105,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":39},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4454,"byte_end":4471,"line_start":111,"line_end":111,"column_start":15,"column_end":32},"name":"read_array_unsafe","qualname":"::read_array_unsafe","value":"pub unsafe fn read_array_unsafe<'a, T: Sized>(&'a [u8]) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Reads an array of `T`s from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads an array of `T`s from `input` with no checks.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4384,"byte_end":4439,"line_start":110,"line_end":110,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":42},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4698,"byte_end":4713,"line_start":117,"line_end":117,"column_start":15,"column_end":30},"name":"read_str_unsafe","qualname":"::read_str_unsafe","value":"pub unsafe fn read_str_unsafe<'a>(&'a [u8]) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Reads a null-terminated string from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads a null-terminated string from `input` with no checks.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4620,"byte_end":4683,"line_start":116,"line_end":116,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":51},"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4944,"byte_end":4961,"line_start":124,"line_end":124,"column_start":12,"column_end":29},"name":"StrReaderIterator","qualname":"::StrReaderIterator","value":"StrReaderIterator {  }","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":" Iterates over `self.data`, yielding strings (null-terminated in `self.data`).\n See `read_strs_to_null`.\n","sig":null,"attributes":[{"value":"/ Iterates over `self.data`, yielding strings (null-terminated in `self.data`).","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4798,"byte_end":4879,"line_start":121,"line_end":121,"column_start":1,"column_end":82}},{"value":"/ See `read_strs_to_null`.","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":4880,"byte_end":4908,"line_start":122,"line_end":122,"column_start":1,"column_end":29}}]}],"impls":[{"id":8,"kind":"Direct","span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":5012,"byte_end":5029,"line_start":128,"line_end":128,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":3977,"byte_end":3982,"line_start":94,"line_end":94,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3113},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/stellaris/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.2/src/lib.rs","byte_start":5012,"byte_end":5029,"line_start":128,"line_end":128,"column_start":23,"column_end":40},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":51},"to":{"krate":1,"index":8049}}]}